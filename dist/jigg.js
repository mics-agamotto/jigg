(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.JIGG = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}

},{}],2:[function(require,module,exports){
/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};

},{}],3:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":4,"./asn1/base":6,"./asn1/constants":10,"./asn1/decoders":12,"./asn1/encoders":15,"bn.js":21}],4:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":3,"inherits":124,"vm":200}],5:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":6,"buffer":52,"inherits":124}],6:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":5,"./node":7,"./reporter":8}],7:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"../base":6,"minimalistic-assert":131}],8:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":124}],9:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":10}],10:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":9}],11:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":3,"inherits":124}],12:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":11,"./pem":13}],13:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":11,"buffer":52,"inherits":124}],14:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":3,"buffer":52,"inherits":124}],15:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":14,"./pem":16}],16:[function(require,module,exports){
var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":14,"inherits":124}],17:[function(require,module,exports){

/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};


},{}],18:[function(require,module,exports){
/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();

},{}],19:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],20:[function(require,module,exports){
/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :
  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : 
  false;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  return ary.map(function(chunk) {
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      return buf;
    }

    return chunk;
  });
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary).forEach(function(part) {
    bb.append(part);
  });

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  return new Blob(mapArrayBufferViews(ary), options || {});
};

if (typeof Blob !== 'undefined') {
  BlobBuilderConstructor.prototype = Blob.prototype;
  BlobConstructor.prototype = Blob.prototype;
}

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

},{}],21:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":23}],22:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":23}],23:[function(require,module,exports){

},{}],24:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":173}],25:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":24,"./ghash":29,"./incr32":30,"buffer-xor":51,"cipher-base":53,"inherits":124,"safe-buffer":173}],26:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":27,"./encrypter":28,"./modes/list.json":38}],27:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":24,"./authCipher":25,"./modes":37,"./streamCipher":40,"cipher-base":53,"evp_bytestokey":105,"inherits":124,"safe-buffer":173}],28:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":24,"./authCipher":25,"./modes":37,"./streamCipher":40,"cipher-base":53,"evp_bytestokey":105,"inherits":124,"safe-buffer":173}],29:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":173}],30:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],31:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":51}],32:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":51,"safe-buffer":173}],33:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":173}],34:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":173}],35:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":30,"buffer-xor":51,"safe-buffer":173}],36:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],37:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":31,"./cfb":32,"./cfb1":33,"./cfb8":34,"./ctr":35,"./ecb":36,"./list.json":38,"./ofb":39}],38:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],39:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)

},{"buffer":52,"buffer-xor":51}],40:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":24,"cipher-base":53,"inherits":124,"safe-buffer":173}],41:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":26,"browserify-aes/modes":37,"browserify-des":42,"browserify-des/modes":43,"evp_bytestokey":105}],42:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":53,"des.js":64,"inherits":124,"safe-buffer":173}],43:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],44:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)

},{"bn.js":21,"buffer":52,"randombytes":155}],45:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":46}],46:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],47:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],48:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash')
var stream = require('stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

}).call(this,require("buffer").Buffer)

},{"./algorithms.json":46,"./sign":49,"./verify":50,"buffer":52,"create-hash":59,"inherits":124,"stream":194}],49:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

}).call(this,require("buffer").Buffer)

},{"./curves.json":47,"bn.js":21,"browserify-rsa":44,"buffer":52,"create-hmac":61,"elliptic":74,"parse-asn1":138}],50:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

}).call(this,require("buffer").Buffer)

},{"./curves.json":47,"bn.js":21,"buffer":52,"elliptic":74,"parse-asn1":138}],51:[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)

},{"buffer":52}],52:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? Symbol.for('nodejs.util.inspect.custom')
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef'
  var table = new Array(256)
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

}).call(this,require("buffer").Buffer)

},{"base64-js":19,"buffer":52,"ieee754":122}],53:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":124,"safe-buffer":173,"stream":194,"string_decoder":195}],54:[function(require,module,exports){
/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};

},{}],55:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],56:[function(require,module,exports){

module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};
},{}],57:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":125}],58:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this,require("buffer").Buffer)

},{"bn.js":21,"buffer":52,"elliptic":74}],59:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":53,"inherits":124,"md5.js":129,"ripemd160":172,"sha.js":175}],60:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":129}],61:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":62,"cipher-base":53,"create-hash/md5":60,"inherits":124,"ripemd160":172,"safe-buffer":173,"sha.js":175}],62:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":53,"inherits":124,"safe-buffer":173}],63:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":41,"browserify-sign":48,"browserify-sign/algos":45,"create-ecdh":58,"create-hash":59,"create-hmac":61,"diffie-hellman":70,"pbkdf2":142,"public-encrypt":149,"randombytes":155,"randomfill":156}],64:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":65,"./des/cipher":66,"./des/des":67,"./des/ede":68,"./des/utils":69}],65:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":124,"minimalistic-assert":131}],66:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":131}],67:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":66,"./utils":69,"inherits":124,"minimalistic-assert":131}],68:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":66,"./des":67,"inherits":124,"minimalistic-assert":131}],69:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],70:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this,require("buffer").Buffer)

},{"./lib/dh":71,"./lib/generatePrime":72,"./lib/primes.json":73,"buffer":52}],71:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)

},{"./generatePrime":72,"bn.js":21,"buffer":52,"miller-rabin":130,"randombytes":155}],72:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":21,"miller-rabin":130,"randombytes":155}],73:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],74:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":89,"./elliptic/curve":77,"./elliptic/curves":80,"./elliptic/ec":81,"./elliptic/eddsa":84,"./elliptic/utils":88,"brorand":22}],75:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":88,"bn.js":21}],76:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":88,"./base":75,"bn.js":21,"inherits":124}],77:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":75,"./edwards":76,"./mont":78,"./short":79}],78:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":88,"./base":75,"bn.js":21,"inherits":124}],79:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":88,"./base":75,"bn.js":21,"inherits":124}],80:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"./curve":77,"./precomputed/secp256k1":87,"./utils":88,"hash.js":109}],81:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":80,"../utils":88,"./key":82,"./signature":83,"bn.js":21,"brorand":22,"hmac-drbg":121}],82:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":88,"bn.js":21}],83:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":88,"bn.js":21}],84:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":80,"../utils":88,"./key":85,"./signature":86,"hash.js":109}],85:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":88}],86:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":88,"bn.js":21}],87:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],88:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":21,"minimalistic-assert":131,"minimalistic-crypto-utils":132}],89:[function(require,module,exports){
module.exports={
  "_from": "elliptic@^6.5.2",
  "_id": "elliptic@6.5.2",
  "_inBundle": false,
  "_integrity": "sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==",
  "_location": "/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.5.2",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.5.2",
    "saveSpec": null,
    "fetchSpec": "^6.5.2"
  },
  "_requiredBy": [
    "/",
    "/browserify-sign",
    "/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz",
  "_shasum": "05c5678d7173c049d8ca433552224a495d0e3762",
  "_spec": "elliptic@^6.5.2",
  "_where": "/home/bab/Documents/research/jigg",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^3.0.8",
    "grunt": "^1.0.4",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.2",
    "jscs": "^3.0.7",
    "jshint": "^2.10.3",
    "mocha": "^6.2.2"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.5.2"
}

},{}],90:[function(require,module,exports){

module.exports = require('./socket');

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = require('engine.io-parser');

},{"./socket":91,"engine.io-parser":101}],91:[function(require,module,exports){
/**
 * Module dependencies.
 */

var transports = require('./transports/index');
var Emitter = require('component-emitter');
var debug = require('debug')('engine.io-client:socket');
var index = require('indexof');
var parser = require('engine.io-parser');
var parseuri = require('parseuri');
var parseqs = require('parseqs');

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (typeof location !== 'undefined' && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (typeof location !== 'undefined' ? location.hostname : 'localhost');
  this.port = opts.port || (typeof location !== 'undefined' && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // detect ReactNative environment
  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

  // other options for Node.js or ReactNative client
  if (typeof self === 'undefined' || this.isReactNative) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = require('./transport');
Socket.transports = require('./transports/index');
Socket.parser = require('engine.io-parser');

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void (0),
    isReactNative: this.isReactNative
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(JSON.parse(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

},{"./transport":92,"./transports/index":93,"component-emitter":55,"debug":99,"engine.io-parser":101,"indexof":123,"parseqs":139,"parseuri":140}],92:[function(require,module,exports){
/**
 * Module dependencies.
 */

var parser = require('engine.io-parser');
var Emitter = require('component-emitter');

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // results of ReactNative environment detection
  this.isReactNative = opts.isReactNative;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

},{"component-emitter":55,"engine.io-parser":101}],93:[function(require,module,exports){
/**
 * Module dependencies
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var XHR = require('./polling-xhr');
var JSONP = require('./polling-jsonp');
var websocket = require('./websocket');

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

},{"./polling-jsonp":94,"./polling-xhr":95,"./websocket":97,"xmlhttprequest-ssl":98}],94:[function(require,module,exports){
(function (global){
/**
 * Module requirements.
 */

var Polling = require('./polling');
var inherit = require('component-inherit');

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * Until https://github.com/tc39/proposal-global is shipped.
 */
function glob () {
  return typeof self !== 'undefined' ? self
      : typeof window !== 'undefined' ? window
      : typeof global !== 'undefined' ? global : {};
}

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    var global = glob();
    callbacks = global.___eio = (global.___eio || []);
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (typeof addEventListener === 'function') {
    addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./polling":96,"component-inherit":56}],95:[function(require,module,exports){
/* global attachEvent */

/**
 * Module requirements.
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var Polling = require('./polling');
var Emitter = require('component-emitter');
var inherit = require('component-inherit');
var debug = require('debug')('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          try {
            var contentType = xhr.getResponseHeader('Content-Type');
            if (self.supportsBinary && contentType === 'application/octet-stream') {
              xhr.responseType = 'arraybuffer';
            }
          } catch (e) {}
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (typeof document !== 'undefined') {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (typeof document !== 'undefined') {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (typeof document !== 'undefined') {
  if (typeof attachEvent === 'function') {
    attachEvent('onunload', unloadHandler);
  } else if (typeof addEventListener === 'function') {
    var terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';
    addEventListener(terminationEvent, unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

},{"./polling":96,"component-emitter":55,"component-inherit":56,"debug":99,"xmlhttprequest-ssl":98}],96:[function(require,module,exports){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parseqs = require('parseqs');
var parser = require('engine.io-parser');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = require('xmlhttprequest-ssl');
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

},{"../transport":92,"component-inherit":56,"debug":99,"engine.io-parser":101,"parseqs":139,"xmlhttprequest-ssl":98,"yeast":201}],97:[function(require,module,exports){
(function (Buffer){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parser = require('engine.io-parser');
var parseqs = require('parseqs');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:websocket');

var BrowserWebSocket, NodeWebSocket;

if (typeof WebSocket !== 'undefined') {
  BrowserWebSocket = WebSocket;
} else if (typeof self !== 'undefined') {
  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
} else {
  try {
    NodeWebSocket = require('ws');
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocketImpl = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws =
      this.usingBrowserWebSocket && !this.isReactNative
        ? protocols
          ? new WebSocketImpl(uri, protocols)
          : new WebSocketImpl(uri)
        : new WebSocketImpl(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
};

}).call(this,require("buffer").Buffer)

},{"../transport":92,"buffer":52,"component-inherit":56,"debug":99,"engine.io-parser":101,"parseqs":139,"ws":23,"yeast":201}],98:[function(require,module,exports){
// browser shim for xmlhttprequest module

var hasCORS = require('has-cors');

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new self[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};

},{"has-cors":107}],99:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))

},{"./debug":100,"_process":148}],100:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":133}],101:[function(require,module,exports){
/**
 * Module dependencies.
 */

var keys = require('./keys');
var hasBinary = require('has-binary2');
var sliceBuffer = require('arraybuffer.slice');
var after = require('after');
var utf8 = require('./utf8');

var base64encoder;
if (typeof ArrayBuffer !== 'undefined') {
  base64encoder = require('base64-arraybuffer');
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = require('blob');

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '', n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || (length != (n = Number(length)))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

},{"./keys":102,"./utf8":103,"after":1,"arraybuffer.slice":2,"base64-arraybuffer":18,"blob":20,"has-binary2":106}],102:[function(require,module,exports){

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};

},{}],103:[function(require,module,exports){
/*! https://mths.be/utf8js v2.1.2 by @mathias */

var stringFromCharCode = String.fromCharCode;

// Taken from https://mths.be/punycode
function ucs2decode(string) {
	var output = [];
	var counter = 0;
	var length = string.length;
	var value;
	var extra;
	while (counter < length) {
		value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// high surrogate, and there is a next character
			extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) { // low surrogate
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// unmatched surrogate; only append this code unit, in case the next
				// code unit is the high surrogate of a surrogate pair
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

// Taken from https://mths.be/punycode
function ucs2encode(array) {
	var length = array.length;
	var index = -1;
	var value;
	var output = '';
	while (++index < length) {
		value = array[index];
		if (value > 0xFFFF) {
			value -= 0x10000;
			output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
			value = 0xDC00 | value & 0x3FF;
		}
		output += stringFromCharCode(value);
	}
	return output;
}

function checkScalarValue(codePoint, strict) {
	if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
		if (strict) {
			throw Error(
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
				' is not a scalar value'
			);
		}
		return false;
	}
	return true;
}
/*--------------------------------------------------------------------------*/

function createByte(codePoint, shift) {
	return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
}

function encodeCodePoint(codePoint, strict) {
	if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
		return stringFromCharCode(codePoint);
	}
	var symbol = '';
	if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
		symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
	}
	else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
		if (!checkScalarValue(codePoint, strict)) {
			codePoint = 0xFFFD;
		}
		symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
		symbol += createByte(codePoint, 6);
	}
	else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
		symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
		symbol += createByte(codePoint, 12);
		symbol += createByte(codePoint, 6);
	}
	symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
	return symbol;
}

function utf8encode(string, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	var codePoints = ucs2decode(string);
	var length = codePoints.length;
	var index = -1;
	var codePoint;
	var byteString = '';
	while (++index < length) {
		codePoint = codePoints[index];
		byteString += encodeCodePoint(codePoint, strict);
	}
	return byteString;
}

/*--------------------------------------------------------------------------*/

function readContinuationByte() {
	if (byteIndex >= byteCount) {
		throw Error('Invalid byte index');
	}

	var continuationByte = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	if ((continuationByte & 0xC0) == 0x80) {
		return continuationByte & 0x3F;
	}

	// If we end up here, it’s not a continuation byte
	throw Error('Invalid continuation byte');
}

function decodeSymbol(strict) {
	var byte1;
	var byte2;
	var byte3;
	var byte4;
	var codePoint;

	if (byteIndex > byteCount) {
		throw Error('Invalid byte index');
	}

	if (byteIndex == byteCount) {
		return false;
	}

	// Read first byte
	byte1 = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	// 1-byte sequence (no continuation bytes)
	if ((byte1 & 0x80) == 0) {
		return byte1;
	}

	// 2-byte sequence
	if ((byte1 & 0xE0) == 0xC0) {
		byte2 = readContinuationByte();
		codePoint = ((byte1 & 0x1F) << 6) | byte2;
		if (codePoint >= 0x80) {
			return codePoint;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 3-byte sequence (may include unpaired surrogates)
	if ((byte1 & 0xF0) == 0xE0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
		if (codePoint >= 0x0800) {
			return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 4-byte sequence
	if ((byte1 & 0xF8) == 0xF0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		byte4 = readContinuationByte();
		codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
			(byte3 << 0x06) | byte4;
		if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
			return codePoint;
		}
	}

	throw Error('Invalid UTF-8 detected');
}

var byteArray;
var byteCount;
var byteIndex;
function utf8decode(byteString, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	byteArray = ucs2decode(byteString);
	byteCount = byteArray.length;
	byteIndex = 0;
	var codePoints = [];
	var tmp;
	while ((tmp = decodeSymbol(strict)) !== false) {
		codePoints.push(tmp);
	}
	return ucs2encode(codePoints);
}

module.exports = {
	version: '2.1.2',
	encode: utf8encode,
	decode: utf8decode
};

},{}],104:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],105:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":129,"safe-buffer":173}],106:[function(require,module,exports){
(function (Buffer){
/* global Blob File */

/*
 * Module requirements.
 */

var isArray = require('isarray');

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' ||
                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' ||
                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary (obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
    (withNativeBlob && obj instanceof Blob) ||
    (withNativeFile && obj instanceof File)
  ) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}

}).call(this,require("buffer").Buffer)

},{"buffer":52,"isarray":126}],107:[function(require,module,exports){

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

},{}],108:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":124,"safe-buffer":173,"stream":194}],109:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":110,"./hash/hmac":111,"./hash/ripemd":112,"./hash/sha":113,"./hash/utils":120}],110:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":120,"minimalistic-assert":131}],111:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":120,"minimalistic-assert":131}],112:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":110,"./utils":120}],113:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":114,"./sha/224":115,"./sha/256":116,"./sha/384":117,"./sha/512":118}],114:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":110,"../utils":120,"./common":119}],115:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":120,"./256":116}],116:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":110,"../utils":120,"./common":119,"minimalistic-assert":131}],117:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":120,"./512":118}],118:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":110,"../utils":120,"minimalistic-assert":131}],119:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":120}],120:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":124,"minimalistic-assert":131}],121:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":109,"minimalistic-assert":131,"minimalistic-crypto-utils":132}],122:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],123:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],124:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],125:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],126:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],127:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__dirname){
!function(A){function I(A){"use strict";var I;void 0===(I=A)&&(I={});var g=I;"object"!=typeof g.sodium&&("object"==typeof global?g=global:"object"==typeof window&&(g=window)),"object"==typeof g.sodium&&"number"==typeof g.sodium.totalMemory&&(I.TOTAL_MEMORY=g.sodium.totalMemory);var B=I;return I.ready=new Promise(function(A,I){(C=B).onAbort=I,C.print=function(A){},C.printErr=function(A){},C.onRuntimeInitialized=function(){try{C._crypto_secretbox_keybytes(),A()}catch(A){I(A)}},C.useBackupModule=function(){var A,I=void 0!==(I={})?I:{},g={};for(A in I)I.hasOwnProperty(A)&&(g[A]=I[A]);var C,a,t,r,Q=[],e=!1;C="object"==typeof window,a="function"==typeof importScripts,t="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,e=t&&!C&&!a,r=!C&&!e&&!a;var o,c,i,_,E,n="";e?(n=__dirname+"/",o=function(A,I){var g;return(g=rA(A))||(_||(_=require("fs")),E||(E=require("path")),A=E.normalize(A),g=_.readFileSync(A)),I?g:g.toString()},i=function(A){var I=o(A,!0);return I.buffer||(I=new Uint8Array(I)),f(I.buffer),I},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),Q=process.argv.slice(2),"undefined"!=typeof module&&(module.exports=I),process.on("unhandledRejection",X),I.inspect=function(){return"[Emscripten Module object]"}):r?("undefined"!=typeof read&&(o=function(A){var I=rA(A);return I?aA(I):read(A)}),i=function(A){var I;return(I=rA(A))?I:"function"==typeof readbuffer?new Uint8Array(readbuffer(A)):(f("object"==typeof(I=read(A,"binary"))),I)},"undefined"!=typeof scriptArgs?Q=scriptArgs:void 0!==arguments&&(Q=arguments),"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(C||a)&&(a?n=self.location.href:document.currentScript&&(n=document.currentScript.src),n=0!==n.indexOf("blob:")?n.substr(0,n.lastIndexOf("/")+1):"",o=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText}catch(I){var g=rA(A);if(g)return aA(g);throw I}},a&&(i=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}catch(I){var g=rA(A);if(g)return g;throw I}}),c=function(A,I,g){var B=new XMLHttpRequest;B.open("GET",A,!0),B.responseType="arraybuffer",B.onload=function(){if(200==B.status||0==B.status&&B.response)I(B.response);else{var C=rA(A);C?I(C.buffer):g()}},B.onerror=g,B.send(null)});var s=I.print||void 0,y=I.printErr||void 0;for(A in g)g.hasOwnProperty(A)&&(I[A]=g[A]);g=null,I.arguments&&(Q=I.arguments),I.thisProgram&&I.thisProgram,I.quit&&I.quit,new Array(8);var h=0;I.wasmBinary&&I.wasmBinary,I.noExitRuntime&&I.noExitRuntime;var p=!1;function f(A,I){A||X("Assertion failed: "+I)}var w,l,u,D,m,F,k,b="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function d(A,I){return A?function(A,I,g){for(var B=I+g,C=I;A[C]&&!(C>=B);)++C;if(C-I>16&&A.subarray&&b)return b.decode(A.subarray(I,C));for(var a="";I<C;){var t=A[I++];if(128&t){var r=63&A[I++];if(192!=(224&t)){var Q=63&A[I++];if((t=224==(240&t)?(15&t)<<12|r<<6|Q:(7&t)<<18|r<<12|Q<<6|63&A[I++])<65536)a+=String.fromCharCode(t);else{var e=t-65536;a+=String.fromCharCode(55296|e>>10,56320|1023&e)}}else a+=String.fromCharCode((31&t)<<6|r)}else a+=String.fromCharCode(t)}return a}(u,A,I):""}function H(A,I){return A%I>0&&(A+=I-A%I),A}function G(A){w=A,I.HEAP8=l=new Int8Array(A),I.HEAP16=D=new Int16Array(A),I.HEAP32=m=new Int32Array(A),I.HEAPU8=u=new Uint8Array(A),I.HEAPU16=new Uint16Array(A),I.HEAPU32=new Uint32Array(A),I.HEAPF32=F=new Float32Array(A),I.HEAPF64=k=new Float64Array(A)}"undefined"!=typeof TextDecoder&&new TextDecoder("utf-16le");var S=I.TOTAL_MEMORY||16777216;function x(A){for(;A.length>0;){var g=A.shift();if("function"!=typeof g){var B=g.func;"number"==typeof B?void 0===g.arg?I.dynCall_v(B):I.dynCall_vi(B,g.arg):B(void 0===g.arg?null:g.arg)}else g()}}S=(w=I.buffer?I.buffer:new ArrayBuffer(S)).byteLength,G(w),m[9016]=5279136;var U=[],M=[],J=[],v=[],N=Math.abs,R=Math.ceil,Y=Math.floor,L=Math.min,P=0,K=null,q=null;function X(A){throw I.onAbort&&I.onAbort(A),s(A+=""),y(A),p=!0,"abort("+A+"). Build with -s ASSERTIONS=1 for more info."}I.preloadedImages={},I.preloadedAudios={};var j,T,V=null,W="data:application/octet-stream;base64,";function z(A){return String.prototype.startsWith?A.startsWith(W):0===A.indexOf(W)}var Z=[function(){return I.getRandomValue()},function(){if(void 0===I.getRandomValue)try{var A="object"==typeof window?window:self,g=void 0!==A.crypto?A.crypto:A.msCrypto,B=function(){var A=new Uint32Array(1);return g.getRandomValues(A),A[0]>>>0};B(),I.getRandomValue=B}catch(A){try{var C=require("crypto"),a=function(){var A=C.randomBytes(4);return(A[0]<<24|A[1]<<16|A[2]<<8|A[3])>>>0};a(),I.getRandomValue=a}catch(A){throw"No secure random number generator found"}}}];function O(A){return A}function $(A){return A.replace(/\b__Z[\w\d_]+/g,function(A){var I=O(A);return A===I?A:I+" ["+A+"]"})}function AA(){var A=new Error;if(!A.stack){try{throw new Error(0)}catch(I){A=I}if(!A.stack)return"(no stack trace available)"}return A.stack.toString()}function IA(){return l.length}function gA(A){try{var I=new ArrayBuffer(A);if(I.byteLength!=A)return;return new Int8Array(I).set(l),cA(I),G(I),1}catch(A){}}function BA(A){return I.___errno_location&&(m[I.___errno_location()>>2]=A),A}V="data:application/octet-stream;base64,";var CA=!1;function aA(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(CA&&f(!1,"Character code "+B+" ("+String.fromCharCode(B)+")  at offset "+g+" not in 0x00-0xFF."),B&=255),I.push(String.fromCharCode(B))}return I.join("")}var tA="function"==typeof atob?atob:function(A){var I,g,B,C,a,t,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",Q="",e=0;A=A.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{I=r.indexOf(A.charAt(e++))<<2|(C=r.indexOf(A.charAt(e++)))>>4,g=(15&C)<<4|(a=r.indexOf(A.charAt(e++)))>>2,B=(3&a)<<6|(t=r.indexOf(A.charAt(e++))),Q+=String.fromCharCode(I),64!==a&&(Q+=String.fromCharCode(g)),64!==t&&(Q+=String.fromCharCode(B))}while(e<A.length);return Q};function rA(A){if(z(A))return function(A){if("boolean"==typeof e&&e){var I;try{I=Buffer.from(A,"base64")}catch(g){I=new Buffer(A,"base64")}return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=tA(A),B=new Uint8Array(g.length),C=0;C<g.length;++C)B[C]=g.charCodeAt(C);return B}catch(A){throw new Error("Converting base64 string to bytes failed.")}}(A.slice(W.length))}var QA,eA,oA=function(A,I,g){"almost asm";var B=new A.Int8Array(g),C=new A.Int16Array(g),a=new A.Int32Array(g),t=new A.Uint8Array(g),r=(new A.Uint16Array(g),A.Math.imul),Q=A.Math.clz32,e=I.b,o=I.c,c=I.d,i=I.f,_=I.g,E=I.h,n=I.i,s=I.j,y=I.k,h=36256;function p(A,I){A|=0,I|=0;var g,C,r,Q,e,c,i=0,_=0,E=0,n=0,s=0,y=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0,Y=0,L=0,P=0,K=0,q=0,X=0,j=0,T=0,V=0,W=0,z=0,Z=0,O=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,aA=0,tA=0,rA=0,QA=0,eA=0,oA=0,cA=0,iA=0,_A=0,EA=0,nA=0,sA=0,yA=0,hA=0;g=h,C=h=h+63&-64,h=h+256|0,i=0;do{n=0|wB(I+(i<<3)|0),E=0|o(),a[(_=C+128+(i<<3)|0)>>2]=n,a[_+4>>2]=E,i=i+1|0}while(16!=(0|i));i=A,_=(I=C)+64|0;do{B[I>>0]=0|B[i>>0],I=I+1|0,i=i+1|0}while((0|I)<(0|_));for(a[C+88>>2]=1595750129,a[C+88+4>>2]=-1521486534,q=-1377402159^(t[A+64>>0]|t[A+64+1>>0]<<8|t[A+64+2>>0]<<16|t[A+64+3>>0]<<24),K=1359893119^(t[A+64+4>>0]|t[A+64+4+1>>0]<<8|t[A+64+4+2>>0]<<16|t[A+64+4+3>>0]<<24),S=725511199^(t[A+72>>0]|t[A+72+1>>0]<<8|t[A+72+2>>0]<<16|t[A+72+3>>0]<<24),x=-1694144372^(t[A+72+4>>0]|t[A+72+4+1>>0]<<8|t[A+72+4+2>>0]<<16|t[A+72+4+3>>0]<<24),u=-79577749^(t[A+80>>0]|t[A+80+1>>0]<<8|t[A+80+2>>0]<<16|t[A+80+3>>0]<<24),D=528734635^(t[A+80+4>>0]|t[A+80+4+1>>0]<<8|t[A+80+4+2>>0]<<16|t[A+80+4+3>>0]<<24),AA=327033209^(t[A+88>>0]|t[A+88+1>>0]<<8|t[A+88+2>>0]<<16|t[A+88+3>>0]<<24),$=1541459225^(t[A+88+4>>0]|t[A+88+4+1>>0]<<8|t[A+88+4+2>>0]<<16|t[A+88+4+3>>0]<<24),p=0|a[C+32>>2],f=0|a[C+32+4>>2],f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(yA=0|bC(0|(X=0|a[C+128>>2]),0|(j=0|a[C+128+4>>2]),0|p,0|f)),0|(sA=0|o()),0|a[C>>2],0|a[C+4>>2]))^q,(yA=0|o())^K,32)),0|(q=0|o()),-205731576,1779033703))^p,(n=0|o())^f,24),p=0|o(),IA=0|a[C+128+8>>2],gA=0|a[C+128+8+4>>2],q=0|bB((yA=0|bC(0|(yA=0|bC(0|f,0|p,0|sA,0|yA)),0|o(),0|IA,0|gA))^K,(sA=0|o())^q,16),K=0|o(),a[C+96>>2]=q,a[C+96+4>>2]=K,n=0|bC(0|q,0|K,0|I,0|n),I=0|o(),a[C+64>>2]=n,a[C+64+4>>2]=I,p=0|bB(n^f,I^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,z=0|a[C+40>>2],Z=0|a[C+40+4>>2],Z=0|bB((y=0|bC(0|(x=0|bB((iA=0|bC(0|(cA=0|bC(0|(_=0|a[C+128+16>>2]),0|(i=0|a[C+128+16+4>>2]),0|z,0|Z)),0|(iA=0|o()),0|a[C+8>>2],0|a[C+8+4>>2]))^S,(cA=0|o())^x,32)),0|(S=0|o()),-2067093701,-1150833019))^z,(w=0|o())^Z,24),z=0|o(),l=0|a[C+128+24>>2],m=0|a[C+128+24+4>>2],S=0|bB((cA=0|bC(0|(cA=0|bC(0|Z,0|z,0|iA,0|cA)),0|o(),0|l,0|m))^x,(iA=0|o())^S,16),x=0|o(),a[C+104>>2]=S,a[C+104+4>>2]=x,w=0|bC(0|S,0|x,0|y,0|w),y=0|o(),a[C+72>>2]=w,a[C+72+4>>2]=y,z=0|bB(w^Z,y^z,63),Z=0|o(),Y=0|a[C+48>>2],L=0|a[C+48+4>>2],L=0|bB((W=0|bC(0|(D=0|bB((eA=0|bC(0|(QA=0|bC(0|(c=0|a[C+128+32>>2]),0|(_A=0|a[C+128+32+4>>2]),0|Y,0|L)),0|(eA=0|o()),0|a[C+16>>2],0|a[C+16+4>>2]))^u,(QA=0|o())^D,32)),0|(u=0|o()),-23791573,1013904242))^Y,(O=0|o())^L,24),Y=0|o(),r=0|a[C+128+40>>2],b=0|a[C+128+40+4>>2],Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|L,0|Y,0|eA,0|QA)),0|o(),0|r,0|b))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),H=0|a[C+56>>2],d=0|a[C+56+4>>2],d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(aA=0|bC(0|(k=0|a[C+128+48>>2]),0|(F=0|a[C+128+48+4>>2]),0|H,0|d)),0|(tA=0|o()),0|a[C+24>>2],0|a[C+24+4>>2]))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),1595750129,-1521486534))^H,(P=0|o())^d,24),H=0|o(),G=0|a[C+128+56>>2],U=0|a[C+128+56+4>>2],H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|d,0|H,0|tA,0|aA)),0|o(),0|G,0|U))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),T=0|a[C+128+64>>2],V=0|a[C+128+64+4>>2],Z=0|bB((W=0|bC(0|($=0|bB((sA=0|bC(0|(sA=0|bC(0|z,0|Z,0|yA,0|sA)),0|o(),0|T,0|V))^AA,(yA=0|o())^$,32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),e=0|a[C+128+72>>2],oA=0|a[C+128+72+4>>2],AA=0|bB((yA=0|bC(0|(yA=0|bC(0|Z,0|z,0|sA,0|yA)),0|o(),0|e,0|oA))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,O=0|bC(0|AA,0|$,0|W,0|O),W=0|o(),a[C+80>>2]=O,a[C+80+4>>2]=W,z=0|bB(O^Z,W^z,63),Z=0|o(),BA=0|a[C+128+80>>2],CA=0|a[C+128+80+4>>2],L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|Y,0|L,0|cA,0|iA)),0|o(),0|BA,0|CA))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),M=0|a[C+128+88>>2],J=0|a[C+128+88+4>>2],Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|L,0|Y,0|iA,0|cA)),0|o(),0|M,0|J))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),E=0|a[C+128+96>>2],s=0|a[C+128+96+4>>2],d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|H,0|d,0|QA,0|eA)),0|o(),0|E,0|s))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),Q=0|a[C+128+104>>2],rA=0|a[C+128+104+4>>2],H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|d,0|H,0|eA,0|QA)),0|o(),0|Q,0|rA))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),EA=0|a[C+128+112>>2],nA=0|a[C+128+112+4>>2],f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(tA=0|bC(0|aA,0|tA,0|p,0|f)),0|o(),0|EA,0|nA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),v=0|a[C+128+120>>2],N=0|a[C+128+120+4>>2],p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|f,0|p,0|tA,0|aA)),0|o(),0|v,0|N))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|EA,0|nA,0|yA,0|sA)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|BA,0|CA)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|c,0|_A)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|T,0|V)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|e,0|oA)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|v,0|N,0|eA,0|QA)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|Q,0|rA)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|k,0|F)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|IA,0|gA)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|E,0|s)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|X,0|j)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|_,0|i)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|M,0|J)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|G,0|U)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|r,0|b)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|l,0|m)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|M,0|J)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|T,0|V)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|E,0|s)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|X,0|j)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|r,0|b)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|_,0|i)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|v,0|N)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|Q,0|rA)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|BA,0|CA)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|EA,0|nA)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|l,0|m)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|k,0|F)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|G,0|U)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|IA,0|gA)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|e,0|oA)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|c,0|_A)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|G,0|U)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|e,0|oA)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|l,0|m)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|IA,0|gA)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|Q,0|rA)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|E,0|s)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|M,0|J)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|EA,0|nA)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|_,0|i)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|k,0|F)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|r,0|b)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|BA,0|CA)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|c,0|_A)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|X,0|j)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|v,0|N)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|T,0|V)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|e,0|oA)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|X,0|j)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|r,0|b)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|G,0|U)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|_,0|i)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|c,0|_A)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|BA,0|CA)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|v,0|N)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|EA,0|nA)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|IA,0|gA)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|M,0|J)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|E,0|s)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|k,0|F)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|T,0|V)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|l,0|m)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|Q,0|rA)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|_,0|i)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|E,0|s)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|k,0|F)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|BA,0|CA)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|X,0|j)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|M,0|J)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|T,0|V)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|l,0|m)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|c,0|_A)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|Q,0|rA)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|G,0|U)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|r,0|b)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|v,0|N)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|EA,0|nA)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|IA,0|gA)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|e,0|oA)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|E,0|s)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|r,0|b)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|IA,0|gA)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|v,0|N)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|EA,0|nA)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|Q,0|rA)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|c,0|_A)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|BA,0|CA)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|X,0|j)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|G,0|U)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|k,0|F)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|l,0|m)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|e,0|oA)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|_,0|i)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|T,0|V)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|M,0|J)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|Q,0|rA)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|M,0|J)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|G,0|U)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|EA,0|nA)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|E,0|s)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|IA,0|gA)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|l,0|m)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|e,0|oA)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|r,0|b)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|X,0|j)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|v,0|N)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|c,0|_A)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|T,0|V)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|k,0|F)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|_,0|i)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|BA,0|CA)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|k,0|F)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|v,0|N)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|EA,0|nA)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|e,0|oA)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|M,0|J)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|l,0|m)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|X,0|j)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|T,0|V)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|E,0|s)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|_,0|i)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|Q,0|rA)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|G,0|U)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|IA,0|gA)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|c,0|_A)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|BA,0|CA)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|r,0|b)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|BA,0|CA)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|_,0|i)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|T,0|V)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|c,0|_A)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|G,0|U)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|k,0|F)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|IA,0|gA)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|r,0|b)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|v,0|N)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|M,0|J)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|e,0|oA)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|EA,0|nA)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|l,0|m)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|E,0|s)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|Q,0|rA)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|X,0|j)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|X,0|j)),0|o(),0|p,0|f))^q,(yA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|IA,0|gA)),0|o(),0|f,0|p))^K,(sA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(hA=0|bC(0|z,0|Z,0|_,0|i)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|l,0|m)),0|o(),0|Z,0|z))^x,(iA=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(hA=0|bC(0|Y,0|L,0|c,0|_A)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|r,0|b)),0|o(),0|L,0|Y))^D,(eA=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(hA=0|bC(0|H,0|d,0|k,0|F)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|G,0|U)),0|o(),0|d,0|H))^$,(tA=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(sA=0|bC(0|(sA=0|bC(0|yA,0|sA,0|T,0|V)),0|o(),0|z,0|Z)),$^(yA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),AA=0|bB((yA=0|bC(0|(yA=0|bC(0|sA,0|yA,0|e,0|oA)),0|o(),0|Z,0|z))^$,(sA=0|o())^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,z=0|bB((O=0|bC(0|AA,0|$,0|W,0|O))^Z,(W=0|o())^z,63),Z=0|o(),L=0|bB((R=0|bC(0|(K=0|bB((iA=0|bC(0|(iA=0|bC(0|cA,0|iA,0|BA,0|CA)),0|o(),0|Y,0|L))^q,(cA=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),Y=0|bB((P=0|bC(0|(q=0|bB((cA=0|bC(0|(cA=0|bC(0|iA,0|cA,0|M,0|J)),0|o(),0|L,0|Y))^K,(iA=0|o())^q,16)),0|(K=0|o()),0|R,0|P))^L,(R=0|o())^Y,63),L=0|o(),d=0|bB((I=0|bC(0|(x=0|bB((eA=0|bC(0|(eA=0|bC(0|QA,0|eA,0|E,0|s)),0|o(),0|H,0|d))^S,(QA=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),H=0|bB((n=0|bC(0|(S=0|bB((QA=0|bC(0|(QA=0|bC(0|eA,0|QA,0|Q,0|rA)),0|o(),0|d,0|H))^x,(eA=0|o())^S,16)),0|(x=0|o()),0|I,0|n))^d,(I=0|o())^H,63),d=0|o(),f=0|bB((y=0|bC(0|(D=0|bB((tA=0|bC(0|(hA=0|bC(0|p,0|f,0|EA,0|nA)),0|o(),0|aA,0|tA))^u,(aA=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),p=0|bB((w=0|bC(0|(u=0|bB((aA=0|bC(0|(aA=0|bC(0|tA,0|aA,0|v,0|N)),0|o(),0|f,0|p))^D,(tA=0|o())^u,16)),0|(D=0|o()),0|y,0|w))^f,(y=0|o())^p,63),f=0|o(),f=0|bB((I=0|bC(0|(K=0|bB((nA=0|bC(0|(nA=0|bC(0|yA,0|sA,0|EA,0|nA)),0|o(),0|p,0|f))^q,(EA=0|o())^K,32)),0|(q=0|o()),0|n,0|I))^p,(n=0|o())^f,24),p=0|o(),p=0|bB((n=0|bC(0|(q=0|bB((CA=0|bC(0|(CA=0|bC(0|nA,0|EA,0|BA,0|CA)),0|o(),0|f,0|p))^K,(BA=0|o())^q,16)),0|(K=0|o()),0|I,0|n))^f,(I=0|o())^p,63),f=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=f,Z=0|bB((y=0|bC(0|(x=0|bB(S^(iA=0|bC(0|(_A=0|bC(0|z,0|Z,0|c,0|_A)),0|o(),0|cA,0|iA)),x^(cA=0|o()),32)),0|(S=0|o()),0|w,0|y))^z,(w=0|o())^Z,24),z=0|o(),z=0|bB((w=0|bC(0|(S=0|bB((V=0|bC(0|(V=0|bC(0|iA,0|cA,0|T,0|V)),0|o(),0|Z,0|z))^x,(T=0|o())^S,16)),0|(x=0|o()),0|y,0|w))^Z,(y=0|o())^z,63),Z=0|o(),L=0|bB((W=0|bC(0|(D=0|bB(u^(eA=0|bC(0|(oA=0|bC(0|Y,0|L,0|e,0|oA)),0|o(),0|QA,0|eA)),D^(QA=0|o()),32)),0|(u=0|o()),0|O,0|W))^Y,(O=0|o())^L,24),Y=0|o(),Y=0|bB((O=0|bC(0|(u=0|bB((N=0|bC(0|(N=0|bC(0|eA,0|QA,0|v,0|N)),0|o(),0|L,0|Y))^D,(v=0|o())^u,16)),0|(D=0|o()),0|W,0|O))^L,(W=0|o())^Y,63),L=0|o(),d=0|bB((R=0|bC(0|($=0|bB((tA=0|bC(0|(rA=0|bC(0|H,0|d,0|Q,0|rA)),0|o(),0|aA,0|tA))^AA,(aA=0|o())^$,32)),0|(AA=0|o()),0|P,0|R))^H,(P=0|o())^d,24),H=0|o(),H=0|bB((P=0|bC(0|(AA=0|bB((F=0|bC(0|(F=0|bC(0|tA,0|aA,0|k,0|F)),0|o(),0|d,0|H))^$,(k=0|o())^AA,16)),0|($=0|o()),0|R,0|P))^d,(R=0|o())^H,63),d=0|o(),Z=0|bB((W=0|bC(0|($=0|bB(AA^(gA=0|bC(0|(gA=0|bC(0|CA,0|BA,0|IA,0|gA)),0|o(),0|z,0|Z)),$^(IA=0|o()),32)),0|(AA=0|o()),0|O,0|W))^z,(O=0|o())^Z,24),z=0|o(),s=0|bC(0|(s=0|bC(0|gA,0|IA,0|E,0|s)),0|o(),0|Z,0|z),E=0|o(),a[C>>2]=s,a[C+4>>2]=E,AA=0|bB(s^$,E^AA,16),$=0|o(),a[C+120>>2]=AA,a[C+120+4>>2]=$,O=0|bC(0|AA,0|$,0|W,0|O),W=0|o(),a[C+80>>2]=O,a[C+80+4>>2]=W,z=0|bB(O^Z,W^z,63),W=0|o(),a[C+40>>2]=z,a[C+40+4>>2]=W,L=0|bB((R=0|bC(0|(K=0|bB((j=0|bC(0|(j=0|bC(0|V,0|T,0|X,0|j)),0|o(),0|Y,0|L))^q,(X=0|o())^K,32)),0|(q=0|o()),0|P,0|R))^Y,(P=0|o())^L,24),Y=0|o(),i=0|bC(0|(i=0|bC(0|j,0|X,0|_,0|i)),0|o(),0|L,0|Y),_=0|o(),a[C+8>>2]=i,a[C+8+4>>2]=_,q=0|bB(i^K,_^q,16),K=0|o(),a[C+96>>2]=q,a[C+96+4>>2]=K,P=0|bC(0|q,0|K,0|R,0|P),R=0|o(),a[C+88>>2]=P,a[C+88+4>>2]=R,Y=0|bB(P^L,R^Y,63),R=0|o(),a[C+48>>2]=Y,a[C+48+4>>2]=R,d=0|bB((I=0|bC(0|(x=0|bB((J=0|bC(0|(J=0|bC(0|N,0|v,0|M,0|J)),0|o(),0|H,0|d))^S,(M=0|o())^x,32)),0|(S=0|o()),0|n,0|I))^H,(n=0|o())^d,24),H=0|o(),U=0|bC(0|(U=0|bC(0|J,0|M,0|G,0|U)),0|o(),0|d,0|H),G=0|o(),a[C+16>>2]=U,a[C+16+4>>2]=G,S=0|bB(U^x,G^S,16),G=0|o(),a[C+104>>2]=S,a[C+104+4>>2]=G,n=0|bC(0|S,0|G,0|I,0|n),I=0|o(),a[C+64>>2]=n,a[C+64+4>>2]=I,H=0|bB(n^d,I^H,63),d=0|o(),a[C+56>>2]=H,a[C+56+4>>2]=d,f=0|bB((y=0|bC(0|(D=0|bB((k=0|bC(0|(b=0|bC(0|p,0|f,0|r,0|b)),0|o(),0|F,0|k))^u,(F=0|o())^D,32)),0|(u=0|o()),0|w,0|y))^p,(w=0|o())^f,24),p=0|o(),m=0|bC(0|(m=0|bC(0|k,0|F,0|l,0|m)),0|o(),0|f,0|p),l=0|o(),a[C+24>>2]=m,a[C+24+4>>2]=l,u=0|bB(m^D,l^u,16),l=0|o(),a[C+112>>2]=u,a[C+112+4>>2]=l,w=0|bC(0|u,0|l,0|y,0|w),y=0|o(),a[C+72>>2]=w,a[C+72+4>>2]=y,p=0|bB(w^f,y^p,63),y=0|o(),a[C+32>>2]=p,a[C+32+4>>2]=y,n=s^(t[A>>0]|t[A+1>>0]<<8|t[A+2>>0]<<16|t[A+3>>0]<<24)^n,I=E^(t[A+4>>0]|t[A+4+1>>0]<<8|t[A+4+2>>0]<<16|t[A+4+3>>0]<<24)^I,B[A>>0]=n,B[A+1>>0]=n>>8,B[A+2>>0]=n>>16,B[A+3>>0]=n>>24,B[A+4>>0]=I,B[A+4+1>>0]=I>>8,B[A+4+2>>0]=I>>16,B[A+4+3>>0]=I>>24,I=1;yA=C+(I+8<<3)|0,sA=i^(t[(hA=A+(I<<3)|0)>>0]|t[hA+1>>0]<<8|t[hA+2>>0]<<16|t[hA+3>>0]<<24)^a[yA>>2],yA=_^(t[hA+4>>0]|t[hA+4+1>>0]<<8|t[hA+4+2>>0]<<16|t[hA+4+3>>0]<<24)^a[yA+4>>2],B[hA>>0]=sA,B[hA+1>>0]=sA>>8,B[hA+2>>0]=sA>>16,B[hA+3>>0]=sA>>24,B[hA+4>>0]=yA,B[hA+4+1>>0]=yA>>8,B[hA+4+2>>0]=yA>>16,B[hA+4+3>>0]=yA>>24,8!=(0|(I=I+1|0));)i=0|a[C+(I<<3)>>2],_=0|a[C+(I<<3)+4>>2];h=g}function f(A,I,g,C){A|=0,g|=0,C|=0;var a,t,r,Q,e,c,i,_,E,n,s,y,h,p,f,w,l,u,D,m,F,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0,Y=0,L=0,P=0,K=0,q=0,X=0,j=0,T=0,V=0,W=0,z=0,Z=0,O=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,aA=0,tA=0,rA=0,QA=0,eA=0,oA=0,cA=0,iA=0,_A=0,EA=0,nA=0,sA=0,yA=0,hA=0,pA=0,fA=0,wA=0,lA=0,uA=0,DA=0,mA=0,FA=0,kA=0,bA=0,dA=0,HA=0,GA=0,SA=0,xA=0,UA=0,MA=0,JA=0,vA=0,NA=0,RA=0,YA=0,LA=0,PA=0,KA=0,qA=0,XA=0,jA=0,TA=0,VA=0,WA=0,zA=0,ZA=0,OA=0,$A=0,AI=0,II=0,gI=0,BI=0,CI=0,aI=0,tI=0,rI=0,QI=0,eI=0,oI=0,cI=0,iI=0,_I=0,EI=0,nI=0,sI=0,yI=0,hI=0,pI=0,fI=0,wI=0,lI=0,uI=0,DI=0,mI=0,FI=0,kI=0,bI=0,dI=0,HI=0,GI=0,SI=0,xI=0,UI=0,MI=0,JI=0,vI=0,NI=0,RI=0,YI=0,LI=0,PI=0,KI=0,qI=0,XI=0,jI=0,TI=0,VI=0,WI=0,zI=0,ZI=0,OI=0,$I=0,Ag=0,Ig=0,gg=0,Bg=0,Cg=0,ag=0,tg=0,rg=0,Qg=0,eg=0,og=0,cg=0,ig=0,_g=0,Eg=0,ng=0,sg=0,yg=0;sA=0|JB(0|B[(I|=0)>>0],0|B[I+1>>0],0|B[I+2>>0]),o(),SI=0|CC(0|(SI=0|dg(I+2|0)),0|o(),5),o(),uI=0|CC(0|(uI=0|JB(0|B[I+5>>0],0|B[I+6>>0],0|B[I+7>>0])),0|o(),2),o(),GI=0|CC(0|(GI=0|dg(I+7|0)),0|o(),7),o(),yI=0|CC(0|(yI=0|dg(I+10|0)),0|o(),4),o(),CA=0|CC(0|(CA=0|JB(0|B[I+13>>0],0|B[I+14>>0],0|B[I+15>>0])),0|o(),1),o(),wA=0|CC(0|(wA=0|dg(I+15|0)),0|o(),6),o(),k=0|CC(0|(k=0|JB(0|B[I+18>>0],0|B[I+19>>0],0|B[I+20>>0])),0|o(),3),o(),aA=0|JB(0|B[I+21>>0],0|B[I+22>>0],0|B[I+23>>0]),o(),T=0|CC(0|(T=0|dg(I+23|0)),0|o(),5),o(),DA=0|CC(0|(DA=0|JB(0|B[I+26>>0],0|B[I+27>>0],0|B[I+28>>0])),0|o(),2),o(),bA=0|CC(0|(bA=0|dg(I+28|0)),0|o(),7),dA=0|o(),KI=0|JB(0|B[g>>0],0|B[g+1>>0],0|B[g+2>>0]),o(),pI=0|CC(0|(pI=0|dg(g+2|0)),0|o(),5),o(),gI=0|CC(0|(gI=0|JB(0|B[g+5>>0],0|B[g+6>>0],0|B[g+7>>0])),0|o(),2),o(),b=0|CC(0|(b=0|dg(g+7|0)),0|o(),7),o(),d=0|CC(0|(d=0|dg(g+10|0)),0|o(),4),o(),P=0|CC(0|(P=0|JB(0|B[g+13>>0],0|B[g+14>>0],0|B[g+15>>0])),0|o(),1),o(),WA=0|CC(0|(WA=0|dg(g+15|0)),0|o(),6),o(),hA=0|CC(0|(hA=0|JB(0|B[g+18>>0],0|B[g+19>>0],0|B[g+20>>0])),0|o(),3),o(),NA=0|JB(0|B[g+21>>0],0|B[g+22>>0],0|B[g+23>>0]),o(),IA=0|CC(0|(IA=0|dg(g+23|0)),0|o(),5),o(),NI=0|CC(0|(NI=0|JB(0|B[g+26>>0],0|B[g+27>>0],0|B[g+28>>0])),0|o(),2),o(),_A=0|CC(0|(_A=0|dg(g+28|0)),0|o(),7),iA=0|o(),LA=0|JB(0|B[C>>0],0|B[C+1>>0],0|B[C+2>>0]),o(),BA=0|CC(0|(BA=0|dg(C+2|0)),0|o(),5),o(),KA=0|CC(0|(KA=0|JB(0|B[C+5>>0],0|B[C+6>>0],0|B[C+7>>0])),0|o(),2),o(),MA=0|CC(0|(MA=0|dg(C+7|0)),0|o(),7),o(),vA=0|CC(0|(vA=0|dg(C+10|0)),0|o(),4),o(),zA=0|CC(0|(zA=0|JB(0|B[C+13>>0],0|B[C+14>>0],0|B[C+15>>0])),0|o(),1),o(),FI=0|CC(0|(FI=0|dg(C+15|0)),0|o(),6),o(),x=0|CC(0|(x=0|JB(0|B[C+18>>0],0|B[C+19>>0],0|B[C+20>>0])),0|o(),3),o(),oI=0|JB(0|B[C+21>>0],0|B[C+22>>0],0|B[C+23>>0]),o(),jA=0|CC(0|(jA=0|dg(C+23|0)),0|o(),5),o(),EA=0|CC(0|(EA=0|JB(0|B[C+26>>0],0|B[C+27>>0],0|B[C+28>>0])),0|o(),2),o(),wI=0|CC(0|(wI=0|dg(C+28|0)),0|o(),7),kI=0|o(),YA=0|bC(2097151&LA|0,0,0|(YA=0|NB(2097151&KI|0,0,2097151&sA|0,0)),0|o()),LA=0|o(),w=0|NB(2097151&pI|0,0,2097151&sA|0,0),f=0|o(),p=0|NB(2097151&KI|0,0,2097151&SI|0,0),$A=0|o(),O=0|NB(2097151&gI|0,0,2097151&sA|0,0),PA=0|o(),KA=0|bC(0|(PA=0|bC(0|(UA=0|bC(0|(Z=0|NB(2097151&pI|0,0,2097151&SI|0,0)),0|o(),0|(UA=0|NB(2097151&KI|0,0,2097151&uI|0,0)),0|o())),0|o(),0|O,0|PA)),0|o(),2097151&KA|0,0),PA=0|o(),O=0|NB(2097151&b|0,0,2097151&sA|0,0),UA=0|o(),F=0|NB(2097151&gI|0,0,2097151&SI|0,0),Z=0|o(),h=0|NB(2097151&pI|0,0,2097151&uI|0,0),y=0|o(),s=0|NB(2097151&KI|0,0,2097151&GI|0,0),yg=0|o(),cA=0|NB(2097151&d|0,0,2097151&sA|0,0),JA=0|o(),ig=0|NB(2097151&b|0,0,2097151&SI|0,0),ZA=0|o(),Eg=0|NB(2097151&gI|0,0,2097151&uI|0,0),v=0|o(),vA=0|bC(0|(JA=0|bC(0|(ZA=0|bC(0|(v=0|bC(0|(_g=0|bC(0|(ng=0|NB(2097151&pI|0,0,2097151&GI|0,0)),0|o(),0|(_g=0|NB(2097151&KI|0,0,2097151&yI|0,0)),0|o())),0|o(),0|Eg,0|v)),0|o(),0|ig,0|ZA)),0|o(),0|cA,0|JA)),0|o(),2097151&vA|0,0),JA=0|o(),cA=0|NB(2097151&P|0,0,2097151&sA|0,0),ZA=0|o(),ig=0|NB(2097151&d|0,0,2097151&SI|0,0),v=0|o(),Eg=0|NB(2097151&b|0,0,2097151&uI|0,0),_g=0|o(),m=0|NB(2097151&gI|0,0,2097151&GI|0,0),ng=0|o(),n=0|NB(2097151&pI|0,0,2097151&yI|0,0),E=0|o(),_=0|NB(2097151&KI|0,0,2097151&CA|0,0),sg=0|o(),I=0|NB(2097151&WA|0,0,2097151&sA|0,0),fI=0|o(),Bg=0|NB(2097151&P|0,0,2097151&SI|0,0),H=0|o(),ag=0|NB(2097151&d|0,0,2097151&uI|0,0),S=0|o(),rg=0|NB(2097151&b|0,0,2097151&GI|0,0),Cg=0|o(),eg=0|NB(2097151&gI|0,0,2097151&yI|0,0),tg=0|o(),FI=0|bC(0|(fI=0|bC(0|(H=0|bC(0|(S=0|bC(0|(Cg=0|bC(0|(tg=0|bC(0|(Qg=0|bC(0|(og=0|NB(2097151&pI|0,0,2097151&CA|0,0)),0|o(),0|(Qg=0|NB(2097151&KI|0,0,2097151&wA|0,0)),0|o())),0|o(),0|eg,0|tg)),0|o(),0|rg,0|Cg)),0|o(),0|ag,0|S)),0|o(),0|Bg,0|H)),0|o(),0|I,0|fI)),0|o(),2097151&FI|0,0),fI=0|o(),I=0|NB(2097151&hA|0,0,2097151&sA|0,0),H=0|o(),Bg=0|NB(2097151&WA|0,0,2097151&SI|0,0),S=0|o(),ag=0|NB(2097151&P|0,0,2097151&uI|0,0),Cg=0|o(),rg=0|NB(2097151&d|0,0,2097151&GI|0,0),tg=0|o(),eg=0|NB(2097151&b|0,0,2097151&yI|0,0),Qg=0|o(),D=0|NB(2097151&gI|0,0,2097151&CA|0,0),og=0|o(),i=0|NB(2097151&pI|0,0,2097151&wA|0,0),c=0|o(),e=0|NB(2097151&KI|0,0,2097151&k|0,0),cg=0|o(),jI=0|NB(2097151&NA|0,0,2097151&sA|0,0),G=0|o(),j=0|NB(2097151&hA|0,0,2097151&SI|0,0),cI=0|o(),qI=0|NB(2097151&WA|0,0,2097151&uI|0,0),XI=0|o(),VI=0|NB(2097151&P|0,0,2097151&GI|0,0),X=0|o(),zI=0|NB(2097151&d|0,0,2097151&yI|0,0),TI=0|o(),OI=0|NB(2097151&b|0,0,2097151&CA|0,0),WI=0|o(),Ag=0|NB(2097151&gI|0,0,2097151&wA|0,0),ZI=0|o(),oI=0|bC(0|(cI=0|bC(0|(G=0|bC(0|(XI=0|bC(0|(X=0|bC(0|(TI=0|bC(0|(WI=0|bC(0|(ZI=0|bC(0|($I=0|bC(0|(Ig=0|NB(2097151&pI|0,0,2097151&k|0,0)),0|o(),0|($I=0|NB(2097151&KI|0,0,2097151&aA|0,0)),0|o())),0|o(),0|Ag,0|ZI)),0|o(),0|OI,0|WI)),0|o(),0|zI,0|TI)),0|o(),0|VI,0|X)),0|o(),0|qI,0|XI)),0|o(),0|jI,0|G)),0|o(),0|j,0|cI)),0|o(),2097151&oI|0,0),cI=0|o(),j=0|NB(2097151&IA|0,0,2097151&sA|0,0),G=0|o(),jI=0|NB(2097151&NA|0,0,2097151&SI|0,0),XI=0|o(),qI=0|NB(2097151&hA|0,0,2097151&uI|0,0),X=0|o(),VI=0|NB(2097151&WA|0,0,2097151&GI|0,0),TI=0|o(),zI=0|NB(2097151&P|0,0,2097151&yI|0,0),WI=0|o(),OI=0|NB(2097151&d|0,0,2097151&CA|0,0),ZI=0|o(),Ag=0|NB(2097151&b|0,0,2097151&wA|0,0),$I=0|o(),u=0|NB(2097151&gI|0,0,2097151&k|0,0),Ig=0|o(),Q=0|NB(2097151&pI|0,0,2097151&aA|0,0),r=0|o(),t=0|NB(2097151&KI|0,0,2097151&T|0,0),gg=0|o(),yA=0|NB(2097151&NI|0,0,2097151&sA|0,0),nA=0|o(),z=0|NB(2097151&IA|0,0,2097151&SI|0,0),W=0|o(),rI=0|NB(2097151&NA|0,0,2097151&uI|0,0),tI=0|o(),MI=0|NB(2097151&hA|0,0,2097151&GI|0,0),UI=0|o(),tA=0|NB(2097151&WA|0,0,2097151&yI|0,0),M=0|o(),mI=0|NB(2097151&P|0,0,2097151&CA|0,0),DI=0|o(),II=0|NB(2097151&d|0,0,2097151&wA|0,0),AI=0|o(),_I=0|NB(2097151&b|0,0,2097151&k|0,0),iI=0|o(),V=0|NB(2097151&gI|0,0,2097151&aA|0,0),C=0|o(),EA=0|bC(0|(nA=0|bC(0|(W=0|bC(0|(UI=0|bC(0|(tI=0|bC(0|(M=0|bC(0|(DI=0|bC(0|(AI=0|bC(0|(iI=0|bC(0|(C=0|bC(0|(LI=0|bC(0|NB(2097151&pI|0,0,2097151&T|0,0),0|(YI=0|o()),0|(LI=0|NB(2097151&KI|0,0,2097151&DA|0,0)),0|o())),0|o(),0|V,0|C)),0|o(),0|_I,0|iI)),0|o(),0|II,0|AI)),0|o(),0|mI,0|DI)),0|o(),0|tA,0|M)),0|o(),0|rI,0|tI)),0|o(),0|MI,0|UI)),0|o(),0|z,0|W)),0|o(),0|yA,0|nA)),0|o(),2097151&EA|0,0),nA=0|o(),sA=0|NB(0|_A,0|iA,2097151&sA|0,0),yA=0|o(),W=0|NB(2097151&NI|0,0,2097151&SI|0,0),z=0|o(),UI=0|NB(2097151&IA|0,0,2097151&uI|0,0),MI=0|o(),tI=0|NB(2097151&NA|0,0,2097151&GI|0,0),rI=0|o(),M=0|NB(2097151&hA|0,0,2097151&yI|0,0),tA=0|o(),DI=0|NB(2097151&WA|0,0,2097151&CA|0,0),mI=0|o(),AI=0|NB(2097151&P|0,0,2097151&wA|0,0),II=0|o(),iI=0|NB(2097151&d|0,0,2097151&k|0,0),_I=0|o(),C=0|NB(2097151&b|0,0,2097151&aA|0,0),V=0|o(),LI=0|NB(2097151&gI|0,0,2097151&T|0,0),YI=0|o(),l=0|NB(2097151&pI|0,0,2097151&DA|0,0),a=0|o(),KI=0|NB(2097151&KI|0,0,0|bA,0|dA),PI=0|o(),SI=0|NB(0|_A,0|iA,2097151&SI|0,0),xI=0|o(),pA=0|NB(2097151&NI|0,0,2097151&uI|0,0),lI=0|o(),JI=0|NB(2097151&IA|0,0,2097151&GI|0,0),R=0|o(),uA=0|NB(2097151&NA|0,0,2097151&yI|0,0),oA=0|o(),eA=0|NB(2097151&hA|0,0,2097151&CA|0,0),vI=0|o(),SA=0|NB(2097151&WA|0,0,2097151&wA|0,0),L=0|o(),mA=0|NB(2097151&P|0,0,2097151&k|0,0),xA=0|o(),nI=0|NB(2097151&d|0,0,2097151&aA|0,0),HA=0|o(),hI=0|NB(2097151&b|0,0,2097151&T|0,0),EI=0|o(),xI=0|bC(0|(lI=0|bC(0|(R=0|bC(0|(vI=0|bC(0|(oA=0|bC(0|(L=0|bC(0|(xA=0|bC(0|(HA=0|bC(0|(EI=0|bC(0|(pI=0|bC(0|(HI=0|NB(2097151&gI|0,0,2097151&DA|0,0)),0|(BI=0|o()),0|(pI=0|NB(2097151&pI|0,0,0|bA,0|dA)),0|o())),0|o(),0|hI,0|EI)),0|o(),0|nI,0|HA)),0|o(),0|mA,0|xA)),0|o(),0|SA,0|L)),0|o(),0|uA,0|oA)),0|o(),0|eA,0|vI)),0|o(),0|JI,0|R)),0|o(),0|pA,0|lI)),0|o(),0|SI,0|xI),SI=0|o(),uI=0|NB(0|_A,0|iA,2097151&uI|0,0),lI=0|o(),pA=0|NB(2097151&NI|0,0,2097151&GI|0,0),R=0|o(),JI=0|NB(2097151&IA|0,0,2097151&yI|0,0),vI=0|o(),eA=0|NB(2097151&NA|0,0,2097151&CA|0,0),oA=0|o(),uA=0|NB(2097151&hA|0,0,2097151&wA|0,0),L=0|o(),SA=0|NB(2097151&WA|0,0,2097151&k|0,0),xA=0|o(),mA=0|NB(2097151&P|0,0,2097151&aA|0,0),HA=0|o(),nI=0|NB(2097151&d|0,0,2097151&T|0,0),EI=0|o(),hI=0|NB(2097151&b|0,0,2097151&DA|0,0),pI=0|o(),gI=0|NB(2097151&gI|0,0,0|bA,0|dA),BI=0|o(),GI=0|NB(0|_A,0|iA,2097151&GI|0,0),HI=0|o(),bI=0|NB(2097151&NI|0,0,2097151&yI|0,0),sI=0|o(),K=0|NB(2097151&IA|0,0,2097151&CA|0,0),dI=0|o(),TA=0|NB(2097151&NA|0,0,2097151&wA|0,0),$=0|o(),J=0|NB(2097151&hA|0,0,2097151&k|0,0),g=0|o(),U=0|NB(2097151&WA|0,0,2097151&aA|0,0),OA=0|o(),lA=0|NB(2097151&P|0,0,2097151&T|0,0),fA=0|o(),HI=0|bC(0|(sI=0|bC(0|(dI=0|bC(0|(g=0|bC(0|($=0|bC(0|(OA=0|bC(0|(fA=0|bC(0|(b=0|bC(0|(RI=0|NB(2097151&d|0,0,2097151&DA|0,0)),0|(Y=0|o()),0|(b=0|NB(2097151&b|0,0,0|bA,0|dA)),0|o())),0|o(),0|lA,0|fA)),0|o(),0|U,0|OA)),0|o(),0|TA,0|$)),0|o(),0|J,0|g)),0|o(),0|K,0|dI)),0|o(),0|bI,0|sI)),0|o(),0|GI,0|HI),GI=0|o(),yI=0|NB(0|_A,0|iA,2097151&yI|0,0),sI=0|o(),bI=0|NB(2097151&NI|0,0,2097151&CA|0,0),dI=0|o(),K=0|NB(2097151&IA|0,0,2097151&wA|0,0),g=0|o(),J=0|NB(2097151&NA|0,0,2097151&k|0,0),$=0|o(),TA=0|NB(2097151&hA|0,0,2097151&aA|0,0),OA=0|o(),U=0|NB(2097151&WA|0,0,2097151&T|0,0),fA=0|o(),lA=0|NB(2097151&P|0,0,2097151&DA|0,0),b=0|o(),d=0|NB(2097151&d|0,0,0|bA,0|dA),Y=0|o(),CA=0|NB(0|_A,0|iA,2097151&CA|0,0),RI=0|o(),aI=0|NB(2097151&NI|0,0,2097151&wA|0,0),gA=0|o(),kA=0|NB(2097151&IA|0,0,2097151&k|0,0),CI=0|o(),q=0|NB(2097151&NA|0,0,2097151&aA|0,0),rA=0|o(),QA=0|NB(2097151&hA|0,0,2097151&T|0,0),FA=0|o(),RI=0|bC(0|(gA=0|bC(0|(CI=0|bC(0|(FA=0|bC(0|(rA=0|bC(0|(P=0|bC(0|(N=0|NB(2097151&WA|0,0,2097151&DA|0,0)),0|(VA=0|o()),0|(P=0|NB(2097151&P|0,0,0|bA,0|dA)),0|o())),0|o(),0|q,0|rA)),0|o(),0|QA,0|FA)),0|o(),0|kA,0|CI)),0|o(),0|aI,0|gA)),0|o(),0|CA,0|RI),CA=0|o(),wA=0|NB(0|_A,0|iA,2097151&wA|0,0),gA=0|o(),aI=0|NB(2097151&NI|0,0,2097151&k|0,0),CI=0|o(),kA=0|NB(2097151&IA|0,0,2097151&aA|0,0),FA=0|o(),QA=0|NB(2097151&NA|0,0,2097151&T|0,0),rA=0|o(),q=0|NB(2097151&hA|0,0,2097151&DA|0,0),P=0|o(),WA=0|NB(2097151&WA|0,0,0|bA,0|dA),VA=0|o(),k=0|NB(0|_A,0|iA,2097151&k|0,0),N=0|o(),qA=0|NB(2097151&NI|0,0,2097151&aA|0,0),AA=0|o(),eI=0|NB(2097151&IA|0,0,2097151&T|0,0),XA=0|o(),RA=0|NB(2097151&NA|0,0,2097151&DA|0,0),QI=0|o(),N=0|bC(0|(AA=0|bC(0|(XA=0|bC(0|(QI=0|bC(0|(hA=0|NB(2097151&hA|0,0,0|bA,0|dA)),0|o(),0|RA,0|QI)),0|o(),0|eI,0|XA)),0|o(),0|qA,0|AA)),0|o(),0|k,0|N),k=0|o(),aA=0|NB(0|_A,0|iA,2097151&aA|0,0),AA=0|o(),qA=0|NB(2097151&NI|0,0,2097151&T|0,0),XA=0|o(),eI=0|NB(2097151&IA|0,0,2097151&DA|0,0),QI=0|o(),NA=0|NB(2097151&NA|0,0,0|bA,0|dA),RA=0|o(),T=0|NB(0|_A,0|iA,2097151&T|0,0),hA=0|o(),hA=0|bC(0|(IA=0|bC(0|NB(2097151&NI|0,0,2097151&DA|0,0),0|(GA=0|o()),0|(IA=0|NB(2097151&IA|0,0,0|bA,0|dA)),0|o())),0|o(),0|T,0|hA),T=0|o(),NI=0|bC(0|(DA=0|NB(0|_A,0|iA,2097151&DA|0,0)),0|(IA=0|o()),0|(NI=0|NB(2097151&NI|0,0,0|bA,0|dA)),0|o()),IA=0|o(),dA=0|NB(0|_A,0|iA,0|bA,0|dA),bA=0|o(),DA=0|CC(0|(iA=0|bC(0|YA,0|LA,1048576,0)),0|(_A=0|o()),21),GA=0|o(),GA=0|bC(0|(BA=0|bC(0|($A=0|bC(0|w,0|f,0|p,0|$A)),0|o(),2097151&BA|0,0)),0|o(),0|DA,0|GA),DA=0|o(),_A=0|FC(0|YA,0|LA,-2097152&iA|0,4095&_A|0),iA=0|o(),BA=0|CC(0|(LA=0|bC(0|KA,0|PA,1048576,0)),0|(YA=0|o()),21),$A=0|o(),$A=0|bC(0|(MA=0|bC(0|(UA=0|bC(0|(Z=0|bC(0|(yg=0|bC(0|h,0|y,0|s,0|yg)),0|o(),0|F,0|Z)),0|o(),0|O,0|UA)),0|o(),2097151&MA|0,0)),0|o(),0|BA,0|$A),BA=0|o(),O=0|KB(0|(MA=0|bC(0|vA,0|JA,1048576,0)),0|(UA=0|o()),21),Z=0|o(),Z=0|bC(0|(zA=0|bC(0|(ZA=0|bC(0|(v=0|bC(0|(_g=0|bC(0|(ng=0|bC(0|(sg=0|bC(0|n,0|E,0|_,0|sg)),0|o(),0|m,0|ng)),0|o(),0|Eg,0|_g)),0|o(),0|ig,0|v)),0|o(),0|cA,0|ZA)),0|o(),2097151&zA|0,0)),0|o(),0|O,0|Z),O=0|o(),cA=0|KB(0|(zA=0|bC(0|FI,0|fI,1048576,0)),0|(ZA=0|o()),21),v=0|o(),v=0|bC(0|(x=0|bC(0|(H=0|bC(0|(S=0|bC(0|(Cg=0|bC(0|(tg=0|bC(0|(Qg=0|bC(0|(og=0|bC(0|(cg=0|bC(0|i,0|c,0|e,0|cg)),0|o(),0|D,0|og)),0|o(),0|eg,0|Qg)),0|o(),0|rg,0|tg)),0|o(),0|ag,0|Cg)),0|o(),0|Bg,0|S)),0|o(),0|I,0|H)),0|o(),2097151&x|0,0)),0|o(),0|cA,0|v),cA=0|o(),I=0|KB(0|(x=0|bC(0|oI,0|cI,1048576,0)),0|(H=0|o()),21),S=0|o(),S=0|bC(0|(jA=0|bC(0|(G=0|bC(0|(X=0|bC(0|(XI=0|bC(0|(TI=0|bC(0|(WI=0|bC(0|(ZI=0|bC(0|($I=0|bC(0|(Ig=0|bC(0|(gg=0|bC(0|Q,0|r,0|t,0|gg)),0|o(),0|u,0|Ig)),0|o(),0|Ag,0|$I)),0|o(),0|OI,0|ZI)),0|o(),0|zI,0|WI)),0|o(),0|VI,0|TI)),0|o(),0|jI,0|XI)),0|o(),0|qI,0|X)),0|o(),0|j,0|G)),0|o(),2097151&jA|0,0)),0|o(),0|I,0|S),I=0|o(),j=0|KB(0|(jA=0|bC(0|EA,0|nA,1048576,0)),0|(G=0|o()),21),X=0|o(),X=0|bC(0|(kI=0|bC(0|(z=0|bC(0|(yA=0|bC(0|(MI=0|bC(0|(tA=0|bC(0|(rI=0|bC(0|(mI=0|bC(0|(II=0|bC(0|(_I=0|bC(0|(V=0|bC(0|(YI=0|bC(0|(PI=0|bC(0|l,0|a,0|KI,0|PI)),0|o(),0|LI,0|YI)),0|o(),0|C,0|V)),0|o(),0|iI,0|_I)),0|o(),0|AI,0|II)),0|o(),0|DI,0|mI)),0|o(),0|tI,0|rI)),0|o(),0|M,0|tA)),0|o(),0|UI,0|MI)),0|o(),0|sA,0|yA)),0|o(),0|W,0|z)),0|o(),0|wI,0|kI)),0|o(),0|j,0|X),j=0|o(),z=0|KB(0|(kI=0|bC(0|xI,0|SI,1048576,0)),0|(wI=0|o()),21),W=0|o(),W=0|bC(0|(lI=0|bC(0|(R=0|bC(0|(vI=0|bC(0|(L=0|bC(0|(oA=0|bC(0|(xA=0|bC(0|(HA=0|bC(0|(EI=0|bC(0|(BI=0|bC(0|hI,0|pI,0|gI,0|BI)),0|o(),0|nI,0|EI)),0|o(),0|mA,0|HA)),0|o(),0|SA,0|xA)),0|o(),0|eA,0|oA)),0|o(),0|uA,0|L)),0|o(),0|JI,0|vI)),0|o(),0|pA,0|R)),0|o(),0|uI,0|lI)),0|o(),0|z,0|W),z=0|o(),R=0|KB(0|(lI=0|bC(0|HI,0|GI,1048576,0)),0|(uI=0|o()),21),pA=0|o(),pA=0|bC(0|(sI=0|bC(0|(dI=0|bC(0|(g=0|bC(0|(OA=0|bC(0|($=0|bC(0|(fA=0|bC(0|(Y=0|bC(0|lA,0|b,0|d,0|Y)),0|o(),0|U,0|fA)),0|o(),0|J,0|$)),0|o(),0|TA,0|OA)),0|o(),0|K,0|g)),0|o(),0|bI,0|dI)),0|o(),0|yI,0|sI)),0|o(),0|R,0|pA),R=0|o(),dI=0|KB(0|(sI=0|bC(0|RI,0|CA,1048576,0)),0|(yI=0|o()),21),bI=0|o(),bI=0|bC(0|(gA=0|bC(0|(CI=0|bC(0|(FA=0|bC(0|(P=0|bC(0|(VA=0|bC(0|QA,0|rA,0|WA,0|VA)),0|o(),0|q,0|P)),0|o(),0|kA,0|FA)),0|o(),0|aI,0|CI)),0|o(),0|wA,0|gA)),0|o(),0|dI,0|bI),dI=0|o(),CI=0|KB(0|(gA=0|bC(0|N,0|k,1048576,0)),0|(wA=0|o()),21),aI=0|o(),aI=0|bC(0|(AA=0|bC(0|(XA=0|bC(0|(RA=0|bC(0|eI,0|QI,0|NA,0|RA)),0|o(),0|qA,0|XA)),0|o(),0|aA,0|AA)),0|o(),0|CI,0|aI),CI=0|o(),wA=0|FC(0|N,0|k,-2097152&gA|0,0|wA),gA=0|o(),AA=0|bC(0|NI,0|IA,0|(AA=0|KB(0|(k=0|bC(0|hA,0|T,1048576,0)),0|(N=0|o()),21)),0|o()),IA=0|o(),N=0|FC(0|hA,0|T,-2097152&k|0,0|N),k=0|o(),NI=0|KB(0|(T=0|bC(0|dA,0|bA,1048576,0)),0|(hA=0|o()),21),aA=0|o(),hA=0|FC(0|dA,0|bA,-2097152&T|0,0|hA),T=0|o(),XA=0|CC(0|(bA=0|bC(0|GA,0|DA,1048576,0)),0|(dA=0|o()),21),qA=0|o(),dA=0|FC(0|GA,0|DA,-2097152&bA|0,0|dA),bA=0|o(),RA=0|KB(0|(DA=0|bC(0|$A,0|BA,1048576,0)),0|(GA=0|o()),21),NA=0|o(),GA=0|FC(0|$A,0|BA,-2097152&DA|0,0|GA),DA=0|o(),QI=0|KB(0|(BA=0|bC(0|Z,0|O,1048576,0)),0|($A=0|o()),21),eI=0|o(),$A=0|FC(0|Z,0|O,-2097152&BA|0,0|$A),BA=0|o(),FA=0|KB(0|(O=0|bC(0|v,0|cA,1048576,0)),0|(Z=0|o()),21),kA=0|o(),VA=0|KB(0|(P=0|bC(0|S,0|I,1048576,0)),0|(q=0|o()),21),WA=0|o(),g=0|KB(0|(rA=0|bC(0|X,0|j,1048576,0)),0|(QA=0|o()),21),K=0|o(),$=0|KB(0|(OA=0|bC(0|W,0|z,1048576,0)),0|(TA=0|o()),21),J=0|o(),Y=0|KB(0|(fA=0|bC(0|pA,0|R,1048576,0)),0|(U=0|o()),21),d=0|o(),gA=0|bC(0|(vI=0|KB(0|(b=0|bC(0|bI,0|dI,1048576,0)),0|(lA=0|o()),21)),0|o(),0|wA,0|gA),wA=0|o(),lA=0|FC(0|bI,0|dI,-2097152&b|0,0|lA),b=0|o(),k=0|bC(0|(vI=0|KB(0|(dI=0|bC(0|aI,0|CI,1048576,0)),0|(bI=0|o()),21)),0|o(),0|N,0|k),N=0|o(),bI=0|FC(0|aI,0|CI,-2097152&dI|0,0|bI),dI=0|o(),T=0|bC(0|(vI=0|KB(0|(CI=0|bC(0|AA,0|IA,1048576,0)),0|(aI=0|o()),21)),0|o(),0|hA,0|T),hA=0|o(),aI=0|FC(0|AA,0|IA,-2097152&CI|0,0|aI),CI=0|o(),IA=0|NB(0|NI,0|aA,666643,0),AA=0|o(),vI=0|NB(0|NI,0|aA,470296,0),JI=0|o(),L=0|NB(0|NI,0|aA,654183,0),uA=0|o(),oA=0|NB(0|NI,0|aA,-997805,-1),eA=0|o(),xA=0|NB(0|NI,0|aA,136657,0),SA=0|o(),d=0|bC(0|(yI=0|FC(0|(aA=0|bC(0|RI,0|CA,0|(aA=0|NB(0|NI,0|aA,-683901,-1)),0|o())),0|o(),-2097152&sI|0,0|yI)),0|o(),0|Y,0|d),Y=0|o(),yI=0|NB(0|T,0|hA,666643,0),sI=0|o(),aA=0|NB(0|T,0|hA,470296,0),CA=0|o(),RI=0|NB(0|T,0|hA,654183,0),NI=0|o(),HA=0|NB(0|T,0|hA,-997805,-1),mA=0|o(),EI=0|NB(0|T,0|hA,136657,0),nI=0|o(),hA=0|NB(0|T,0|hA,-683901,-1),T=0|o(),BI=0|NB(0|aI,0|CI,666643,0),gI=0|o(),pI=0|NB(0|aI,0|CI,470296,0),hI=0|o(),yA=0|NB(0|aI,0|CI,654183,0),sA=0|o(),MI=0|NB(0|aI,0|CI,-997805,-1),UI=0|o(),tA=0|NB(0|aI,0|CI,136657,0),M=0|o(),CI=0|NB(0|aI,0|CI,-683901,-1),aI=0|o(),J=0|bC(0|(uI=0|FC(0|(aI=0|bC(0|(nI=0|bC(0|(eA=0|bC(0|HI,0|GI,0|oA,0|eA)),0|o(),0|EI,0|nI)),0|o(),0|CI,0|aI)),0|o(),-2097152&lI|0,0|uI)),0|o(),0|$,0|J),$=0|o(),uI=0|NB(0|k,0|N,666643,0),lI=0|o(),aI=0|NB(0|k,0|N,470296,0),CI=0|o(),nI=0|NB(0|k,0|N,654183,0),EI=0|o(),eA=0|NB(0|k,0|N,-997805,-1),oA=0|o(),GI=0|NB(0|k,0|N,136657,0),HI=0|o(),N=0|NB(0|k,0|N,-683901,-1),k=0|o(),rI=0|NB(0|bI,0|dI,666643,0),tI=0|o(),mI=0|NB(0|bI,0|dI,470296,0),DI=0|o(),II=0|NB(0|bI,0|dI,654183,0),AI=0|o(),_I=0|NB(0|bI,0|dI,-997805,-1),iI=0|o(),V=0|NB(0|bI,0|dI,136657,0),C=0|o(),dI=0|NB(0|bI,0|dI,-683901,-1),bI=0|o(),K=0|bC(0|(wI=0|FC(0|(bI=0|bC(0|(HI=0|bC(0|(SI=0|bC(0|(UI=0|bC(0|(JI=0|bC(0|RI,0|NI,0|vI,0|JI)),0|o(),0|MI,0|UI)),0|o(),0|xI,0|SI)),0|o(),0|GI,0|HI)),0|o(),0|dI,0|bI)),0|o(),-2097152&kI|0,0|wI)),0|o(),0|g,0|K),g=0|o(),ZA=0|FC(0|(eI=0|bC(0|(wI=0|bC(0|FI,0|fI,0|(wI=0|NB(0|gA,0|wA,666643,0)),0|o())),0|o(),0|QI,0|eI)),0|o(),-2097152&zA|0,0|ZA),zA=0|o(),eI=0|NB(0|gA,0|wA,470296,0),QI=0|o(),wI=0|NB(0|gA,0|wA,654183,0),fI=0|o(),kA=0|bC(0|(H=0|FC(0|(cI=0|bC(0|(fI=0|bC(0|(lI=0|bC(0|mI,0|DI,0|uI,0|lI)),0|o(),0|wI,0|fI)),0|o(),0|oI,0|cI)),0|o(),-2097152&x|0,0|H)),0|o(),0|FA,0|kA),FA=0|o(),H=0|NB(0|gA,0|wA,-997805,-1),x=0|o(),cI=0|NB(0|gA,0|wA,136657,0),oI=0|o(),G=0|FC(0|(WA=0|bC(0|(nA=0|bC(0|(oI=0|bC(0|(iI=0|bC(0|(EI=0|bC(0|(sI=0|bC(0|pI,0|hI,0|yI,0|sI)),0|o(),0|nI,0|EI)),0|o(),0|_I,0|iI)),0|o(),0|cI,0|oI)),0|o(),0|EA,0|nA)),0|o(),0|VA,0|WA)),0|o(),-2097152&jA|0,0|G),jA=0|o(),wA=0|NB(0|gA,0|wA,-683901,-1),gA=0|o(),nA=0|KB(0|(WA=0|bC(0|ZA,0|zA,1048576,0)),0|(VA=0|o()),21),EA=0|o(),EA=0|bC(0|(Z=0|FC(0|(cA=0|bC(0|(tI=0|bC(0|eI,0|QI,0|rI,0|tI)),0|o(),0|v,0|cA)),0|o(),-2097152&O|0,0|Z)),0|o(),0|nA,0|EA),nA=0|o(),cA=0|KB(0|(Z=0|bC(0|kA,0|FA,1048576,0)),0|(O=0|o()),21),v=0|o(),v=0|bC(0|(q=0|FC(0|(I=0|bC(0|(x=0|bC(0|(AI=0|bC(0|(gI=0|bC(0|aI,0|CI,0|BI,0|gI)),0|o(),0|II,0|AI)),0|o(),0|H,0|x)),0|o(),0|S,0|I)),0|o(),-2097152&P|0,0|q)),0|o(),0|cA,0|v),cA=0|o(),I=0|KB(0|(q=0|bC(0|G,0|jA,1048576,0)),0|(P=0|o()),21),S=0|o(),S=0|bC(0|(QA=0|FC(0|(j=0|bC(0|(gA=0|bC(0|(C=0|bC(0|(oA=0|bC(0|(sA=0|bC(0|(AA=0|bC(0|aA,0|CA,0|IA,0|AA)),0|o(),0|yA,0|sA)),0|o(),0|eA,0|oA)),0|o(),0|V,0|C)),0|o(),0|wA,0|gA)),0|o(),0|X,0|j)),0|o(),-2097152&rA|0,0|QA)),0|o(),0|I,0|S),I=0|o(),j=0|KB(0|(QA=0|bC(0|K,0|g,1048576,0)),0|(rA=0|o()),21),X=0|o(),X=0|bC(0|(TA=0|FC(0|(z=0|bC(0|(k=0|bC(0|(M=0|bC(0|(uA=0|bC(0|HA,0|mA,0|L,0|uA)),0|o(),0|tA,0|M)),0|o(),0|N,0|k)),0|o(),0|W,0|z)),0|o(),-2097152&OA|0,0|TA)),0|o(),0|j,0|X),j=0|o(),rA=0|FC(0|K,0|g,-2097152&QA|0,0|rA),QA=0|o(),TA=0|KB(0|(g=0|bC(0|J,0|$,1048576,0)),0|(K=0|o()),21),OA=0|o(),OA=0|bC(0|(U=0|FC(0|(R=0|bC(0|(SA=0|bC(0|hA,0|T,0|xA,0|SA)),0|o(),0|pA,0|R)),0|o(),-2097152&fA|0,0|U)),0|o(),0|TA,0|OA),TA=0|o(),K=0|FC(0|J,0|$,-2097152&g|0,0|K),g=0|o(),b=0|bC(0|(U=0|KB(0|($=0|bC(0|d,0|Y,1048576,0)),0|(J=0|o()),21)),0|o(),0|lA,0|b),lA=0|o(),J=0|FC(0|d,0|Y,-2097152&$|0,0|J),$=0|o(),U=0|KB(0|(Y=0|bC(0|EA,0|nA,1048576,0)),0|(d=0|o()),21),fA=0|o(),SA=0|KB(0|(R=0|bC(0|v,0|cA,1048576,0)),0|(pA=0|o()),21),xA=0|o(),QA=0|bC(0|(z=0|KB(0|(T=0|bC(0|S,0|I,1048576,0)),0|(hA=0|o()),21)),0|o(),0|rA,0|QA),rA=0|o(),hA=0|FC(0|S,0|I,-2097152&T|0,0|hA),T=0|o(),g=0|bC(0|(z=0|KB(0|(I=0|bC(0|X,0|j,1048576,0)),0|(S=0|o()),21)),0|o(),0|K,0|g),K=0|o(),S=0|FC(0|X,0|j,-2097152&I|0,0|S),I=0|o(),$=0|bC(0|(z=0|KB(0|(j=0|bC(0|OA,0|TA,1048576,0)),0|(X=0|o()),21)),0|o(),0|J,0|$),J=0|o(),X=0|FC(0|OA,0|TA,-2097152&j|0,0|X),j=0|o(),TA=0|bC(0|$A,0|BA,0|(TA=0|NB(0|b,0|lA,666643,0)),0|o()),BA=0|o(),$A=0|NB(0|b,0|lA,470296,0),OA=0|o(),z=0|NB(0|b,0|lA,654183,0),W=0|o(),k=0|NB(0|b,0|lA,-997805,-1),N=0|o(),M=0|NB(0|b,0|lA,136657,0),tA=0|o(),P=0|FC(0|(xA=0|bC(0|(lA=0|bC(0|G,0|jA,0|(lA=0|NB(0|b,0|lA,-683901,-1)),0|o())),0|o(),0|SA,0|xA)),0|o(),-2097152&q|0,0|P),q=0|o(),xA=0|NB(0|$,0|J,666643,0),SA=0|o(),lA=0|bC(0|TA,0|BA,0|(lA=0|NB(0|$,0|J,470296,0)),0|o()),BA=0|o(),TA=0|NB(0|$,0|J,654183,0),jA=0|o(),G=0|NB(0|$,0|J,-997805,-1),b=0|o(),uA=0|NB(0|$,0|J,136657,0),L=0|o(),J=0|NB(0|$,0|J,-683901,-1),$=0|o(),mA=0|bC(0|GA,0|DA,0|(mA=0|NB(0|X,0|j,666643,0)),0|o()),DA=0|o(),GA=0|NB(0|X,0|j,470296,0),HA=0|o(),gA=0|bC(0|lA,0|BA,0|(gA=0|NB(0|X,0|j,654183,0)),0|o()),BA=0|o(),lA=0|NB(0|X,0|j,-997805,-1),wA=0|o(),C=0|NB(0|X,0|j,136657,0),V=0|o(),j=0|NB(0|X,0|j,-683901,-1),X=0|o(),X=0|bC(0|(L=0|bC(0|(O=0|FC(0|(fA=0|bC(0|(N=0|bC(0|kA,0|FA,0|k,0|N)),0|o(),0|U,0|fA)),0|o(),-2097152&Z|0,0|O)),0|o(),0|uA,0|L)),0|o(),0|j,0|X),j=0|o(),L=0|NB(0|g,0|K,666643,0),uA=0|o(),O=0|NB(0|g,0|K,470296,0),Z=0|o(),fA=0|NB(0|g,0|K,654183,0),U=0|o(),N=0|NB(0|g,0|K,-997805,-1),k=0|o(),FA=0|NB(0|g,0|K,136657,0),kA=0|o(),K=0|NB(0|g,0|K,-683901,-1),g=0|o(),oA=0|NB(0|S,0|I,666643,0),eA=0|o(),sA=0|NB(0|S,0|I,470296,0),yA=0|o(),AA=0|NB(0|S,0|I,654183,0),IA=0|o(),CA=0|NB(0|S,0|I,-997805,-1),aA=0|o(),x=0|NB(0|S,0|I,136657,0),H=0|o(),I=0|NB(0|S,0|I,-683901,-1),S=0|o(),S=0|bC(0|(kA=0|bC(0|(wA=0|bC(0|(jA=0|bC(0|(VA=0|FC(0|(zA=0|bC(0|$A,0|OA,0|ZA,0|zA)),0|o(),-2097152&WA|0,0|VA)),0|o(),0|TA,0|jA)),0|o(),0|lA,0|wA)),0|o(),0|FA,0|kA)),0|o(),0|I,0|S),I=0|o(),iA=0|bC(0|(kA=0|NB(0|QA,0|rA,666643,0)),0|o(),0|_A,0|iA),_A=0|o(),kA=0|NB(0|QA,0|rA,470296,0),FA=0|o(),wA=0|NB(0|QA,0|rA,654183,0),lA=0|o(),yA=0|bC(0|(uA=0|bC(0|(lA=0|bC(0|(YA=0|FC(0|(PA=0|bC(0|XA,0|qA,0|KA,0|PA)),0|o(),-2097152&LA|0,0|YA)),0|o(),0|wA,0|lA)),0|o(),0|L,0|uA)),0|o(),0|sA,0|yA),sA=0|o(),uA=0|NB(0|QA,0|rA,-997805,-1),L=0|o(),lA=0|NB(0|QA,0|rA,136657,0),wA=0|o(),aA=0|bC(0|(U=0|bC(0|(wA=0|bC(0|(HA=0|bC(0|(SA=0|bC(0|(UA=0|FC(0|(JA=0|bC(0|RA,0|NA,0|vA,0|JA)),0|o(),-2097152&MA|0,0|UA)),0|o(),0|xA,0|SA)),0|o(),0|GA,0|HA)),0|o(),0|lA,0|wA)),0|o(),0|fA,0|U)),0|o(),0|CA,0|aA),CA=0|o(),rA=0|NB(0|QA,0|rA,-683901,-1),QA=0|o(),wA=0|KB(0|(U=0|bC(0|iA,0|_A,1048576,0)),0|(fA=0|o()),21),lA=0|o(),lA=0|bC(0|(eA=0|bC(0|(FA=0|bC(0|dA,0|bA,0|kA,0|FA)),0|o(),0|oA,0|eA)),0|o(),0|wA,0|lA),wA=0|o(),fA=0|FC(0|iA,0|_A,-2097152&U|0,0|fA),U=0|o(),eA=0|KB(0|(_A=0|bC(0|yA,0|sA,1048576,0)),0|(iA=0|o()),21),oA=0|o(),oA=0|bC(0|(IA=0|bC(0|(Z=0|bC(0|(L=0|bC(0|mA,0|DA,0|uA,0|L)),0|o(),0|O,0|Z)),0|o(),0|AA,0|IA)),0|o(),0|eA,0|oA),eA=0|o(),Z=0|KB(0|(IA=0|bC(0|aA,0|CA,1048576,0)),0|(AA=0|o()),21),O=0|o(),O=0|bC(0|(H=0|bC(0|(k=0|bC(0|(QA=0|bC(0|gA,0|BA,0|rA,0|QA)),0|o(),0|N,0|k)),0|o(),0|x,0|H)),0|o(),0|Z,0|O),Z=0|o(),k=0|KB(0|(H=0|bC(0|S,0|I,1048576,0)),0|(x=0|o()),21),N=0|o(),N=0|bC(0|(g=0|bC(0|(V=0|bC(0|(b=0|bC(0|(d=0|FC(0|(W=0|bC(0|EA,0|nA,0|z,0|W)),0|o(),-2097152&Y|0,0|d)),0|o(),0|G,0|b)),0|o(),0|C,0|V)),0|o(),0|K,0|g)),0|o(),0|k,0|N),k=0|o(),x=0|FC(0|S,0|I,-2097152&H|0,0|x),H=0|o(),g=0|KB(0|(I=0|bC(0|X,0|j,1048576,0)),0|(S=0|o()),21),K=0|o(),K=0|bC(0|(pA=0|FC(0|(cA=0|bC(0|(tA=0|bC(0|J,0|$,0|M,0|tA)),0|o(),0|v,0|cA)),0|o(),-2097152&R|0,0|pA)),0|o(),0|g,0|K),g=0|o(),S=0|FC(0|X,0|j,-2097152&I|0,0|S),I=0|o(),pA=0|bC(0|hA,0|T,0|(pA=0|KB(0|(j=0|bC(0|P,0|q,1048576,0)),0|(X=0|o()),21)),0|o()),T=0|o(),cA=0|KB(0|(hA=0|bC(0|lA,0|wA,1048576,0)),0|(R=0|o()),21),v=0|o(),$=0|KB(0|(tA=0|bC(0|oA,0|eA,1048576,0)),0|(M=0|o()),21),J=0|o(),b=0|bC(0|x,0|H,0|(b=0|KB(0|(V=0|bC(0|O,0|Z,1048576,0)),0|(C=0|o()),21)),0|o()),H=0|o(),d=0|bC(0|S,0|I,0|(d=0|KB(0|(x=0|bC(0|N,0|k,1048576,0)),0|(G=0|o()),21)),0|o()),I=0|o(),G=0|FC(0|N,0|k,-2097152&x|0,0|G),x=0|o(),S=0|KB(0|(k=0|bC(0|K,0|g,1048576,0)),0|(N=0|o()),21),Y=0|o(),N=0|FC(0|K,0|g,-2097152&k|0,0|N),k=0|o(),W=0|KB(0|(g=0|bC(0|pA,0|T,1048576,0)),0|(K=0|o()),21),z=0|o(),K=0|FC(0|pA,0|T,-2097152&g|0,0|K),g=0|o(),T=0|bC(0|fA,0|U,0|(T=0|NB(0|W,0|z,666643,0)),0|o()),U=0|o(),fA=0|NB(0|W,0|z,470296,0),pA=0|o(),nA=0|NB(0|W,0|z,654183,0),EA=0|o(),QA=0|NB(0|W,0|z,-997805,-1),rA=0|o(),BA=0|NB(0|W,0|z,136657,0),gA=0|o(),z=0|NB(0|W,0|z,-683901,-1),W=0|o(),U=0|KB(0|T,0|U,21),L=0|o(),U=0|KB(0|(L=0|bC(0|(R=0|FC(0|(pA=0|bC(0|lA,0|wA,0|fA,0|pA)),0|o(),-2097152&hA|0,0|R)),0|o(),0|U,0|L)),0|o(),21),R=0|o(),U=0|KB(0|(R=0|bC(0|(v=0|bC(0|(iA=0|FC(0|(EA=0|bC(0|yA,0|sA,0|nA,0|EA)),0|o(),-2097152&_A|0,0|iA)),0|o(),0|cA,0|v)),0|o(),0|U,0|R)),0|o(),21),v=0|o(),U=0|KB(0|(v=0|bC(0|(M=0|FC(0|(rA=0|bC(0|oA,0|eA,0|QA,0|rA)),0|o(),-2097152&tA|0,0|M)),0|o(),0|U,0|v)),0|o(),21),M=0|o(),U=0|KB(0|(M=0|bC(0|(J=0|bC(0|(AA=0|FC(0|(gA=0|bC(0|aA,0|CA,0|BA,0|gA)),0|o(),-2097152&IA|0,0|AA)),0|o(),0|$,0|J)),0|o(),0|U,0|M)),0|o(),21),J=0|o(),N=0|KB(0|(k=0|bC(0|(I=0|KB(0|(G=0|bC(0|d,0|I,0|(G=0|KB(0|(x=0|bC(0|(H=0|KB(0|(U=0|bC(0|b,0|H,0|(U=0|KB(0|(J=0|bC(0|(C=0|FC(0|(W=0|bC(0|O,0|Z,0|z,0|W)),0|o(),-2097152&V|0,0|C)),0|o(),0|U,0|J)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|G,0|x)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|N,0|k)),0|o(),21),I=0|o(),T=0|bC(0|(X=0|NB(0|(K=0|KB(0|(g=0|bC(0|(N=0|KB(0|(I=0|bC(0|(X=0|FC(0|(q=0|bC(0|S,0|Y,0|P,0|q)),0|o(),-2097152&j|0,0|X)),0|o(),0|N,0|I)),0|o(),21)),0|o(),0|K,0|g)),0|o(),21)),0|(N=0|o()),666643,0)),0|o(),2097151&T|0,0),X=0|o(),L=0|bC(0|(j=0|NB(0|K,0|N,470296,0)),0|o(),2097151&L|0,0),j=0|o(),R=0|bC(0|(q=0|NB(0|K,0|N,654183,0)),0|o(),2097151&R|0,0),q=0|o(),v=0|bC(0|(P=0|NB(0|K,0|N,-997805,-1)),0|o(),2097151&v|0,0),P=0|o(),M=0|bC(0|(Y=0|NB(0|K,0|N,136657,0)),0|o(),2097151&M|0,0),Y=0|o(),g=0|bC(0|(C=0|KB(0|(I=0|bC(0|(b=0|KB(0|(k=0|bC(0|(H=0|KB(0|(G=0|bC(0|(d=0|KB(0|(x=0|bC(0|(S=0|KB(0|(U=0|bC(0|(J=0|KB(0|(M=0|bC(0|(J=0|bC(0|(N=0|NB(0|K,0|N,-683901,-1)),0|o(),2097151&J|0,0)),0|(N=0|o()),0|(M=0|KB(0|(v=0|bC(0|M,0|Y,0|(v=0|KB(0|(R=0|bC(0|v,0|P,0|(R=0|KB(0|(L=0|bC(0|R,0|q,0|(L=0|KB(0|(K=0|bC(0|L,0|j,0|(K=0|KB(0|T,0|X,21)),0|o())),0|(j=0|o()),21)),0|o())),0|(q=0|o()),21)),0|o())),0|(P=0|o()),21)),0|o())),0|(Y=0|o()),21)),0|o())),0|(N=0|o()),21)),0|o(),2097151&U|0,0)),0|(J=0|o()),21)),0|o(),2097151&x|0,0)),0|(S=0|o()),21)),0|o(),2097151&G|0,0)),0|(d=0|o()),21)),0|o(),2097151&k|0,0)),0|(H=0|o()),21)),0|o(),2097151&I|0,0)),0|(b=0|o()),21)),0|o(),2097151&g|0,0),C=0|o(),B[A>>0]=T,V=0|CC(0|T,0|X,8),o(),B[A+1>>0]=V,X=0|CC(0|T,0|X,16),o(),T=0|$B(2097151&K|0,0,5),o(),B[A+2>>0]=T|31&X,X=0|CC(0|K,0|j,3),o(),B[A+3>>0]=X,j=0|CC(0|K,0|j,11),o(),B[A+4>>0]=j,K=0|CC(2097151&K|0,0,19),j=0|o(),X=0|$B(2097151&L|0,0,2),o(),B[A+5>>0]=X|K,q=0|CC(0|L,0|q,6),o(),B[A+6>>0]=q,L=0|CC(2097151&L|0,0,14),q=0|o(),K=0|$B(2097151&R|0,0,7),o(),B[A+7>>0]=K|L,L=0|CC(0|R,0|P,1),o(),B[A+8>>0]=L,P=0|CC(0|R,0|P,9),o(),B[A+9>>0]=P,R=0|CC(2097151&R|0,0,17),P=0|o(),L=0|$B(2097151&v|0,0,4),o(),B[A+10>>0]=L|R,R=0|CC(0|v,0|Y,4),o(),B[A+11>>0]=R,Y=0|CC(0|v,0|Y,12),o(),B[A+12>>0]=Y,v=0|CC(2097151&v|0,0,20),Y=0|o(),R=0|$B(2097151&M|0,0,1),o(),B[A+13>>0]=R|v,N=0|CC(0|M,0|N,7),o(),B[A+14>>0]=N,M=0|CC(2097151&M|0,0,15),N=0|o(),v=0|$B(2097151&U|0,0,6),o(),B[A+15>>0]=v|M,M=0|CC(0|U,0|J,2),o(),B[A+16>>0]=M,J=0|CC(0|U,0|J,10),o(),B[A+17>>0]=J,U=0|CC(2097151&U|0,0,18),J=0|o(),M=0|$B(0|x,0|S,3),o(),B[A+18>>0]=M|U,U=0|CC(0|x,0|S,5),o(),B[A+19>>0]=U,S=0|CC(0|x,0|S,13),o(),B[A+20>>0]=S,B[A+21>>0]=G,S=0|CC(0|G,0|d,8),o(),B[A+22>>0]=S,d=0|CC(0|G,0|d,16),o(),G=0|$B(2097151&k|0,0,5),o(),B[A+23>>0]=G|31&d,d=0|CC(0|k,0|H,3),o(),B[A+24>>0]=d,H=0|CC(0|k,0|H,11),o(),B[A+25>>0]=H,k=0|CC(2097151&k|0,0,19),H=0|o(),d=0|$B(2097151&I|0,0,2),o(),B[A+26>>0]=d|k,b=0|CC(0|I,0|b,6),o(),B[A+27>>0]=b,I=0|CC(2097151&I|0,0,14),b=0|o(),k=0|$B(0|g,0|C,7),o(),B[A+28>>0]=k|I,I=0|CC(0|g,0|C,1),o(),B[A+29>>0]=I,I=0|CC(0|g,0|C,9),o(),B[A+30>>0]=I,C=0|KB(0|g,0|C,17),o(),B[A+31>>0]=C}function w(A,I,g){A|=0,g|=0;var C,a,t,r,Q,e,c,i,_,E,n,s,y,h,p,f,w,l,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0,Y=0,L=0,P=0,K=0,q=0,X=0,j=0,T=0,V=0,W=0,z=0,Z=0,O=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,aA=0,tA=0,rA=0,QA=0,eA=0,oA=0,cA=0,iA=0,_A=0,EA=0,nA=0,sA=0,yA=0,hA=0,pA=0,fA=0,wA=0,lA=0,uA=0,DA=0,mA=0,FA=0,kA=0,bA=0,dA=0,HA=0,GA=0,SA=0,xA=0,UA=0,MA=0,JA=0,vA=0,NA=0,RA=0,YA=0,LA=0,PA=0,KA=0,qA=0,XA=0,jA=0,TA=0,VA=0,WA=0,zA=0,ZA=0,OA=0,$A=0,AI=0,II=0,gI=0,BI=0,CI=0,aI=0,tI=0,rI=0,QI=0,eI=0,oI=0,cI=0,iI=0,_I=0,EI=0,nI=0,sI=0,yI=0,hI=0,pI=0,fI=0,wI=0,lI=0,uI=0,DI=0,mI=0,FI=0,kI=0,bI=0,dI=0,HI=0,GI=0,SI=0,xI=0,UI=0,MI=0,JI=0,vI=0,NI=0,RI=0,YI=0,LI=0,PI=0,KI=0,qI=0,XI=0,jI=0,TI=0,VI=0,WI=0,zI=0,ZI=0,OI=0,$I=0,Ag=0,Ig=0,gg=0,Bg=0,Cg=0,ag=0,tg=0,rg=0,Qg=0;M=0|JB(0|B[(I|=0)>>0],0|B[I+1>>0],0|B[I+2>>0]),o(),yI=0|CC(0|(yI=0|dg(I+2|0)),0|o(),5),o(),jA=0|CC(0|(jA=0|JB(0|B[I+5>>0],0|B[I+6>>0],0|B[I+7>>0])),0|o(),2),o(),J=0|CC(0|(J=0|dg(I+7|0)),0|o(),7),o(),QI=0|CC(0|(QI=0|dg(I+10|0)),0|o(),4),o(),KA=0|CC(0|(KA=0|JB(0|B[I+13>>0],0|B[I+14>>0],0|B[I+15>>0])),0|o(),1),o(),d=0|CC(0|(d=0|dg(I+15|0)),0|o(),6),o(),EA=0|CC(0|(EA=0|JB(0|B[I+18>>0],0|B[I+19>>0],0|B[I+20>>0])),0|o(),3),o(),qA=0|JB(0|B[I+21>>0],0|B[I+22>>0],0|B[I+23>>0]),o(),Z=0|CC(0|(Z=0|dg(I+23|0)),0|o(),5),o(),AA=0|CC(0|(AA=0|JB(0|B[I+26>>0],0|B[I+27>>0],0|B[I+28>>0])),0|o(),2),o(),QA=0|CC(0|(QA=0|dg(I+28|0)),0|o(),7),rA=0|o(),MI=0|JB(0|B[g>>0],0|B[g+1>>0],0|B[g+2>>0]),o(),fI=0|CC(0|(fI=0|dg(g+2|0)),0|o(),5),o(),RA=0|CC(0|(RA=0|JB(0|B[g+5>>0],0|B[g+6>>0],0|B[g+7>>0])),0|o(),2),o(),HA=0|CC(0|(HA=0|dg(g+7|0)),0|o(),7),o(),wI=0|CC(0|(wI=0|dg(g+10|0)),0|o(),4),o(),S=0|CC(0|(S=0|JB(0|B[g+13>>0],0|B[g+14>>0],0|B[g+15>>0])),0|o(),1),o(),Y=0|CC(0|(Y=0|dg(g+15|0)),0|o(),6),o(),O=0|CC(0|(O=0|JB(0|B[g+18>>0],0|B[g+19>>0],0|B[g+20>>0])),0|o(),3),o(),pA=0|JB(0|B[g+21>>0],0|B[g+22>>0],0|B[g+23>>0]),o(),PA=0|CC(0|(PA=0|dg(g+23|0)),0|o(),5),o(),uI=0|CC(0|(uI=0|JB(0|B[g+26>>0],0|B[g+27>>0],0|B[g+28>>0])),0|o(),2),o(),tA=0|CC(0|(tA=0|dg(g+28|0)),0|o(),7),aA=0|o(),wA=0|NB(2097151&MI|0,0,2097151&M|0,0),lA=0|o(),j=0|bC(0|(uA=0|NB(2097151&fI|0,0,2097151&M|0,0)),0|(v=0|o()),0|(j=0|NB(2097151&MI|0,0,2097151&yI|0,0)),0|o()),v=0|o(),uA=0|NB(2097151&RA|0,0,2097151&M|0,0),DA=0|o(),DA=0|bC(0|(N=0|bC(0|(L=0|NB(2097151&fI|0,0,2097151&yI|0,0)),0|(sA=0|o()),0|(N=0|NB(2097151&MI|0,0,2097151&jA|0,0)),0|o())),0|o(),0|uA,0|DA),uA=0|o(),N=0|NB(2097151&HA|0,0,2097151&M|0,0),sA=0|o(),L=0|NB(2097151&RA|0,0,2097151&yI|0,0),I=0|o(),h=0|NB(2097151&fI|0,0,2097151&jA|0,0),y=0|o(),s=0|NB(2097151&MI|0,0,2097151&J|0,0),Qg=0|o(),yA=0|NB(2097151&wI|0,0,2097151&M|0,0),hA=0|o(),P=0|NB(2097151&HA|0,0,2097151&yI|0,0),q=0|o(),zA=0|NB(2097151&RA|0,0,2097151&jA|0,0),WA=0|o(),hA=0|bC(0|(q=0|bC(0|(WA=0|bC(0|(ag=0|bC(0|NB(2097151&fI|0,0,2097151&J|0,0),0|(Cg=0|o()),0|(ag=0|NB(2097151&MI|0,0,2097151&QI|0,0)),0|o())),0|o(),0|zA,0|WA)),0|o(),0|P,0|q)),0|o(),0|yA,0|hA),yA=0|o(),q=0|NB(2097151&S|0,0,2097151&M|0,0),P=0|o(),WA=0|NB(2097151&wI|0,0,2097151&yI|0,0),zA=0|o(),ag=0|NB(2097151&HA|0,0,2097151&jA|0,0),Cg=0|o(),l=0|NB(2097151&RA|0,0,2097151&J|0,0),tg=0|o(),n=0|NB(2097151&fI|0,0,2097151&QI|0,0),E=0|o(),_=0|NB(2097151&MI|0,0,2097151&KA|0,0),rg=0|o(),eA=0|NB(2097151&Y|0,0,2097151&M|0,0),g=0|o(),cA=0|NB(2097151&S|0,0,2097151&yI|0,0),CI=0|o(),ZA=0|NB(2097151&wI|0,0,2097151&jA|0,0),OA=0|o(),zI=0|NB(2097151&HA|0,0,2097151&J|0,0),ZI=0|o(),OI=0|NB(2097151&RA|0,0,2097151&QI|0,0),$I=0|o(),g=0|bC(0|(CI=0|bC(0|(OA=0|bC(0|(ZI=0|bC(0|($I=0|bC(0|(Ig=0|bC(0|NB(2097151&fI|0,0,2097151&KA|0,0),0|(Ag=0|o()),0|(Ig=0|NB(2097151&MI|0,0,2097151&d|0,0)),0|o())),0|o(),0|OI,0|$I)),0|o(),0|zI,0|ZI)),0|o(),0|ZA,0|OA)),0|o(),0|cA,0|CI)),0|o(),0|eA,0|g),eA=0|o(),CI=0|NB(2097151&O|0,0,2097151&M|0,0),cA=0|o(),OA=0|NB(2097151&Y|0,0,2097151&yI|0,0),ZA=0|o(),ZI=0|NB(2097151&S|0,0,2097151&jA|0,0),zI=0|o(),$I=0|NB(2097151&wI|0,0,2097151&J|0,0),OI=0|o(),Ig=0|NB(2097151&HA|0,0,2097151&QI|0,0),Ag=0|o(),w=0|NB(2097151&RA|0,0,2097151&KA|0,0),gg=0|o(),i=0|NB(2097151&fI|0,0,2097151&d|0,0),c=0|o(),e=0|NB(2097151&MI|0,0,2097151&EA|0,0),Bg=0|o(),F=0|NB(2097151&pA|0,0,2097151&M|0,0),K=0|o(),xA=0|NB(2097151&O|0,0,2097151&yI|0,0),UA=0|o(),NI=0|NB(2097151&Y|0,0,2097151&jA|0,0),RI=0|o(),JI=0|NB(2097151&S|0,0,2097151&J|0,0),vI=0|o(),YI=0|NB(2097151&wI|0,0,2097151&QI|0,0),LI=0|o(),PI=0|NB(2097151&HA|0,0,2097151&KA|0,0),KI=0|o(),qI=0|NB(2097151&RA|0,0,2097151&d|0,0),XI=0|o(),K=0|bC(0|(UA=0|bC(0|(RI=0|bC(0|(vI=0|bC(0|(LI=0|bC(0|(KI=0|bC(0|(XI=0|bC(0|(TI=0|bC(0|NB(2097151&fI|0,0,2097151&EA|0,0),0|(jI=0|o()),0|(TI=0|NB(2097151&MI|0,0,2097151&qA|0,0)),0|o())),0|o(),0|qI,0|XI)),0|o(),0|PI,0|KI)),0|o(),0|YI,0|LI)),0|o(),0|JI,0|vI)),0|o(),0|NI,0|RI)),0|o(),0|xA,0|UA)),0|o(),0|F,0|K),F=0|o(),UA=0|NB(2097151&PA|0,0,2097151&M|0,0),xA=0|o(),RI=0|NB(2097151&pA|0,0,2097151&yI|0,0),NI=0|o(),vI=0|NB(2097151&O|0,0,2097151&jA|0,0),JI=0|o(),LI=0|NB(2097151&Y|0,0,2097151&J|0,0),YI=0|o(),KI=0|NB(2097151&S|0,0,2097151&QI|0,0),PI=0|o(),XI=0|NB(2097151&wI|0,0,2097151&KA|0,0),qI=0|o(),TI=0|NB(2097151&HA|0,0,2097151&d|0,0),jI=0|o(),f=0|NB(2097151&RA|0,0,2097151&EA|0,0),VI=0|o(),Q=0|NB(2097151&fI|0,0,2097151&qA|0,0),r=0|o(),t=0|NB(2097151&MI|0,0,2097151&Z|0,0),WI=0|o(),aI=0|NB(2097151&uI|0,0,2097151&M|0,0),tI=0|o(),R=0|NB(2097151&PA|0,0,2097151&yI|0,0),G=0|o(),MA=0|NB(2097151&pA|0,0,2097151&jA|0,0),bA=0|o(),kA=0|NB(2097151&O|0,0,2097151&J|0,0),H=0|o(),U=0|NB(2097151&Y|0,0,2097151&QI|0,0),JA=0|o(),FI=0|NB(2097151&S|0,0,2097151&KA|0,0),CA=0|o(),bI=0|NB(2097151&wI|0,0,2097151&d|0,0),mI=0|o(),HI=0|NB(2097151&HA|0,0,2097151&EA|0,0),kI=0|o(),SI=0|NB(2097151&RA|0,0,2097151&qA|0,0),dI=0|o(),tI=0|bC(0|(G=0|bC(0|(H=0|bC(0|(bA=0|bC(0|(JA=0|bC(0|(CA=0|bC(0|(mI=0|bC(0|(kI=0|bC(0|(dI=0|bC(0|(GI=0|bC(0|(xI=0|NB(2097151&fI|0,0,2097151&Z|0,0)),0|o(),0|(GI=0|NB(2097151&MI|0,0,2097151&AA|0,0)),0|o())),0|o(),0|SI,0|dI)),0|o(),0|HI,0|kI)),0|o(),0|bI,0|mI)),0|o(),0|FI,0|CA)),0|o(),0|U,0|JA)),0|o(),0|MA,0|bA)),0|o(),0|kA,0|H)),0|o(),0|R,0|G)),0|o(),0|aI,0|tI),aI=0|o(),M=0|NB(0|tA,0|aA,2097151&M|0,0),G=0|o(),R=0|NB(2097151&uI|0,0,2097151&yI|0,0),H=0|o(),kA=0|NB(2097151&PA|0,0,2097151&jA|0,0),bA=0|o(),MA=0|NB(2097151&pA|0,0,2097151&J|0,0),JA=0|o(),U=0|NB(2097151&O|0,0,2097151&QI|0,0),CA=0|o(),FI=0|NB(2097151&Y|0,0,2097151&KA|0,0),mI=0|o(),bI=0|NB(2097151&S|0,0,2097151&d|0,0),kI=0|o(),HI=0|NB(2097151&wI|0,0,2097151&EA|0,0),dI=0|o(),SI=0|NB(2097151&HA|0,0,2097151&qA|0,0),GI=0|o(),p=0|NB(2097151&RA|0,0,2097151&Z|0,0),xI=0|o(),a=0|NB(2097151&fI|0,0,2097151&AA|0,0),C=0|o(),MI=0|NB(2097151&MI|0,0,0|QA,0|rA),UI=0|o(),yI=0|NB(0|tA,0|aA,2097151&yI|0,0),hI=0|o(),oA=0|NB(2097151&uI|0,0,2097151&jA|0,0),TA=0|o(),sI=0|NB(2097151&PA|0,0,2097151&J|0,0),m=0|o(),T=0|NB(2097151&pA|0,0,2097151&QI|0,0),SA=0|o(),GA=0|NB(2097151&O|0,0,2097151&KA|0,0),nI=0|o(),NA=0|NB(2097151&Y|0,0,2097151&d|0,0),V=0|o(),$A=0|NB(2097151&S|0,0,2097151&EA|0,0),vA=0|o(),eI=0|NB(2097151&wI|0,0,2097151&qA|0,0),AI=0|o(),pI=0|NB(2097151&HA|0,0,2097151&Z|0,0),oI=0|o(),hI=0|bC(0|(TA=0|bC(0|(m=0|bC(0|(nI=0|bC(0|(SA=0|bC(0|(V=0|bC(0|(vA=0|bC(0|(AI=0|bC(0|(oI=0|bC(0|(fI=0|bC(0|(XA=0|NB(2097151&RA|0,0,2097151&AA|0,0)),0|(YA=0|o()),0|(fI=0|NB(2097151&fI|0,0,0|QA,0|rA)),0|o())),0|o(),0|pI,0|oI)),0|o(),0|eI,0|AI)),0|o(),0|$A,0|vA)),0|o(),0|NA,0|V)),0|o(),0|T,0|SA)),0|o(),0|GA,0|nI)),0|o(),0|sI,0|m)),0|o(),0|oA,0|TA)),0|o(),0|yI,0|hI),yI=0|o(),jA=0|NB(0|tA,0|aA,2097151&jA|0,0),TA=0|o(),oA=0|NB(2097151&uI|0,0,2097151&J|0,0),m=0|o(),sI=0|NB(2097151&PA|0,0,2097151&QI|0,0),nI=0|o(),GA=0|NB(2097151&pA|0,0,2097151&KA|0,0),SA=0|o(),T=0|NB(2097151&O|0,0,2097151&d|0,0),V=0|o(),NA=0|NB(2097151&Y|0,0,2097151&EA|0,0),vA=0|o(),$A=0|NB(2097151&S|0,0,2097151&qA|0,0),AI=0|o(),eI=0|NB(2097151&wI|0,0,2097151&Z|0,0),oI=0|o(),pI=0|NB(2097151&HA|0,0,2097151&AA|0,0),fI=0|o(),RA=0|NB(2097151&RA|0,0,0|QA,0|rA),YA=0|o(),J=0|NB(0|tA,0|aA,2097151&J|0,0),XA=0|o(),_I=0|NB(2097151&uI|0,0,2097151&QI|0,0),rI=0|o(),iA=0|NB(2097151&PA|0,0,2097151&KA|0,0),EI=0|o(),b=0|NB(2097151&pA|0,0,2097151&d|0,0),D=0|o(),x=0|NB(2097151&O|0,0,2097151&EA|0,0),IA=0|o(),z=0|NB(2097151&Y|0,0,2097151&qA|0,0),_A=0|o(),dA=0|NB(2097151&S|0,0,2097151&Z|0,0),W=0|o(),XA=0|bC(0|(rI=0|bC(0|(EI=0|bC(0|(IA=0|bC(0|(D=0|bC(0|(_A=0|bC(0|(W=0|bC(0|(HA=0|bC(0|(DI=0|NB(2097151&wI|0,0,2097151&AA|0,0)),0|(lI=0|o()),0|(HA=0|NB(2097151&HA|0,0,0|QA,0|rA)),0|o())),0|o(),0|dA,0|W)),0|o(),0|z,0|_A)),0|o(),0|b,0|D)),0|o(),0|x,0|IA)),0|o(),0|iA,0|EI)),0|o(),0|_I,0|rI)),0|o(),0|J,0|XA),J=0|o(),QI=0|NB(0|tA,0|aA,2097151&QI|0,0),rI=0|o(),_I=0|NB(2097151&uI|0,0,2097151&KA|0,0),EI=0|o(),iA=0|NB(2097151&PA|0,0,2097151&d|0,0),IA=0|o(),x=0|NB(2097151&pA|0,0,2097151&EA|0,0),D=0|o(),b=0|NB(2097151&O|0,0,2097151&qA|0,0),_A=0|o(),z=0|NB(2097151&Y|0,0,2097151&Z|0,0),W=0|o(),dA=0|NB(2097151&S|0,0,2097151&AA|0,0),HA=0|o(),wI=0|NB(2097151&wI|0,0,0|QA,0|rA),lI=0|o(),KA=0|NB(0|tA,0|aA,2097151&KA|0,0),DI=0|o(),gI=0|NB(2097151&uI|0,0,2097151&d|0,0),k=0|o(),BI=0|NB(2097151&PA|0,0,2097151&EA|0,0),II=0|o(),$=0|NB(2097151&pA|0,0,2097151&qA|0,0),u=0|o(),BA=0|NB(2097151&O|0,0,2097151&Z|0,0),VA=0|o(),DI=0|bC(0|(k=0|bC(0|(II=0|bC(0|(VA=0|bC(0|(u=0|bC(0|(S=0|bC(0|(nA=0|NB(2097151&Y|0,0,2097151&AA|0,0)),0|(gA=0|o()),0|(S=0|NB(2097151&S|0,0,0|QA,0|rA)),0|o())),0|o(),0|$,0|u)),0|o(),0|BA,0|VA)),0|o(),0|BI,0|II)),0|o(),0|gI,0|k)),0|o(),0|KA,0|DI),KA=0|o(),d=0|NB(0|tA,0|aA,2097151&d|0,0),k=0|o(),gI=0|NB(2097151&uI|0,0,2097151&EA|0,0),II=0|o(),BI=0|NB(2097151&PA|0,0,2097151&qA|0,0),VA=0|o(),BA=0|NB(2097151&pA|0,0,2097151&Z|0,0),u=0|o(),$=0|NB(2097151&O|0,0,2097151&AA|0,0),S=0|o(),Y=0|NB(2097151&Y|0,0,0|QA,0|rA),gA=0|o(),EA=0|NB(0|tA,0|aA,2097151&EA|0,0),nA=0|o(),mA=0|NB(2097151&uI|0,0,2097151&qA|0,0),LA=0|o(),cI=0|NB(2097151&PA|0,0,2097151&Z|0,0),FA=0|o(),fA=0|NB(2097151&pA|0,0,2097151&AA|0,0),iI=0|o(),nA=0|bC(0|(LA=0|bC(0|(FA=0|bC(0|(iI=0|bC(0|(O=0|NB(2097151&O|0,0,0|QA,0|rA)),0|o(),0|fA,0|iI)),0|o(),0|cI,0|FA)),0|o(),0|mA,0|LA)),0|o(),0|EA,0|nA),EA=0|o(),qA=0|NB(0|tA,0|aA,2097151&qA|0,0),LA=0|o(),mA=0|NB(2097151&uI|0,0,2097151&Z|0,0),FA=0|o(),cI=0|NB(2097151&PA|0,0,2097151&AA|0,0),iI=0|o(),pA=0|NB(2097151&pA|0,0,0|QA,0|rA),fA=0|o(),Z=0|NB(0|tA,0|aA,2097151&Z|0,0),O=0|o(),O=0|bC(0|(PA=0|bC(0|NB(2097151&uI|0,0,2097151&AA|0,0),0|(X=0|o()),0|(PA=0|NB(2097151&PA|0,0,0|QA,0|rA)),0|o())),0|o(),0|Z,0|O),Z=0|o(),uI=0|bC(0|(AA=0|NB(0|tA,0|aA,2097151&AA|0,0)),0|(PA=0|o()),0|(uI=0|NB(2097151&uI|0,0,0|QA,0|rA)),0|o()),PA=0|o(),rA=0|NB(0|tA,0|aA,0|QA,0|rA),QA=0|o(),AA=0|bC(0|j,0|v,0|(AA=0|CC(0|(aA=0|bC(0|wA,0|lA,1048576,0)),0|(tA=0|o()),21)),0|o()),v=0|o(),tA=0|FC(0|wA,0|lA,-2097152&aA|0,2047&tA|0),aA=0|o(),j=0|CC(0|(lA=0|bC(0|DA,0|uA,1048576,0)),0|(wA=0|o()),21),X=0|o(),X=0|bC(0|(sA=0|bC(0|(I=0|bC(0|(Qg=0|bC(0|h,0|y,0|s,0|Qg)),0|o(),0|L,0|I)),0|o(),0|N,0|sA)),0|o(),0|j,0|X),j=0|o(),I=0|KB(0|(sA=0|bC(0|hA,0|yA,1048576,0)),0|(N=0|o()),21),L=0|o(),L=0|bC(0|(P=0|bC(0|(zA=0|bC(0|(Cg=0|bC(0|(tg=0|bC(0|(rg=0|bC(0|n,0|E,0|_,0|rg)),0|o(),0|l,0|tg)),0|o(),0|ag,0|Cg)),0|o(),0|WA,0|zA)),0|o(),0|q,0|P)),0|o(),0|I,0|L),I=0|o(),zA=0|KB(0|(P=0|bC(0|g,0|eA,1048576,0)),0|(q=0|o()),21),WA=0|o(),WA=0|bC(0|(cA=0|bC(0|(ZA=0|bC(0|(zI=0|bC(0|(OI=0|bC(0|(Ag=0|bC(0|(gg=0|bC(0|(Bg=0|bC(0|i,0|c,0|e,0|Bg)),0|o(),0|w,0|gg)),0|o(),0|Ig,0|Ag)),0|o(),0|$I,0|OI)),0|o(),0|ZI,0|zI)),0|o(),0|OA,0|ZA)),0|o(),0|CI,0|cA)),0|o(),0|zA,0|WA),zA=0|o(),ZA=0|KB(0|(cA=0|bC(0|K,0|F,1048576,0)),0|(CI=0|o()),21),OA=0|o(),OA=0|bC(0|(xA=0|bC(0|(JI=0|bC(0|(NI=0|bC(0|(YI=0|bC(0|(PI=0|bC(0|(qI=0|bC(0|(jI=0|bC(0|(VI=0|bC(0|(WI=0|bC(0|Q,0|r,0|t,0|WI)),0|o(),0|f,0|VI)),0|o(),0|TI,0|jI)),0|o(),0|XI,0|qI)),0|o(),0|KI,0|PI)),0|o(),0|LI,0|YI)),0|o(),0|RI,0|NI)),0|o(),0|vI,0|JI)),0|o(),0|UA,0|xA)),0|o(),0|ZA,0|OA),ZA=0|o(),CI=0|FC(0|K,0|F,-2097152&cA|0,0|CI),cA=0|o(),xA=0|KB(0|(F=0|bC(0|tI,0|aI,1048576,0)),0|(K=0|o()),21),UA=0|o(),UA=0|bC(0|(G=0|bC(0|(H=0|bC(0|(bA=0|bC(0|(CA=0|bC(0|(JA=0|bC(0|(mI=0|bC(0|(kI=0|bC(0|(dI=0|bC(0|(GI=0|bC(0|(xI=0|bC(0|(UI=0|bC(0|a,0|C,0|MI,0|UI)),0|o(),0|p,0|xI)),0|o(),0|SI,0|GI)),0|o(),0|HI,0|dI)),0|o(),0|bI,0|kI)),0|o(),0|FI,0|mI)),0|o(),0|MA,0|JA)),0|o(),0|U,0|CA)),0|o(),0|kA,0|bA)),0|o(),0|R,0|H)),0|o(),0|M,0|G)),0|o(),0|xA,0|UA),xA=0|o(),H=0|KB(0|(G=0|bC(0|hI,0|yI,1048576,0)),0|(M=0|o()),21),R=0|o(),R=0|bC(0|(TA=0|bC(0|(m=0|bC(0|(nI=0|bC(0|(V=0|bC(0|(SA=0|bC(0|(vA=0|bC(0|(AI=0|bC(0|(oI=0|bC(0|(YA=0|bC(0|pI,0|fI,0|RA,0|YA)),0|o(),0|eI,0|oI)),0|o(),0|$A,0|AI)),0|o(),0|NA,0|vA)),0|o(),0|GA,0|SA)),0|o(),0|T,0|V)),0|o(),0|sI,0|nI)),0|o(),0|oA,0|m)),0|o(),0|jA,0|TA)),0|o(),0|H,0|R),H=0|o(),m=0|KB(0|(TA=0|bC(0|XA,0|J,1048576,0)),0|(jA=0|o()),21),oA=0|o(),oA=0|bC(0|(rI=0|bC(0|(EI=0|bC(0|(IA=0|bC(0|(_A=0|bC(0|(D=0|bC(0|(W=0|bC(0|(lI=0|bC(0|dA,0|HA,0|wI,0|lI)),0|o(),0|z,0|W)),0|o(),0|x,0|D)),0|o(),0|b,0|_A)),0|o(),0|iA,0|IA)),0|o(),0|_I,0|EI)),0|o(),0|QI,0|rI)),0|o(),0|m,0|oA),m=0|o(),EI=0|KB(0|(rI=0|bC(0|DI,0|KA,1048576,0)),0|(QI=0|o()),21),_I=0|o(),_I=0|bC(0|(k=0|bC(0|(II=0|bC(0|(VA=0|bC(0|(S=0|bC(0|(gA=0|bC(0|BA,0|u,0|Y,0|gA)),0|o(),0|$,0|S)),0|o(),0|BI,0|VA)),0|o(),0|gI,0|II)),0|o(),0|d,0|k)),0|o(),0|EI,0|_I),EI=0|o(),II=0|KB(0|(k=0|bC(0|nA,0|EA,1048576,0)),0|(d=0|o()),21),gI=0|o(),gI=0|bC(0|(LA=0|bC(0|(FA=0|bC(0|(fA=0|bC(0|cI,0|iI,0|pA,0|fA)),0|o(),0|mA,0|FA)),0|o(),0|qA,0|LA)),0|o(),0|II,0|gI),II=0|o(),d=0|FC(0|nA,0|EA,-2097152&k|0,0|d),k=0|o(),LA=0|bC(0|uI,0|PA,0|(LA=0|KB(0|(EA=0|bC(0|O,0|Z,1048576,0)),0|(nA=0|o()),21)),0|o()),PA=0|o(),nA=0|FC(0|O,0|Z,-2097152&EA|0,0|nA),EA=0|o(),uI=0|KB(0|(Z=0|bC(0|rA,0|QA,1048576,0)),0|(O=0|o()),21),qA=0|o(),O=0|FC(0|rA,0|QA,-2097152&Z|0,0|O),Z=0|o(),FA=0|CC(0|(QA=0|bC(0|AA,0|v,1048576,0)),0|(rA=0|o()),21),mA=0|o(),rA=0|FC(0|AA,0|v,-2097152&QA|0,8191&rA|0),QA=0|o(),fA=0|KB(0|(v=0|bC(0|X,0|j,1048576,0)),0|(AA=0|o()),21),pA=0|o(),AA=0|FC(0|X,0|j,-2097152&v|0,0|AA),v=0|o(),iI=0|KB(0|(j=0|bC(0|L,0|I,1048576,0)),0|(X=0|o()),21),cI=0|o(),X=0|FC(0|L,0|I,-2097152&j|0,0|X),j=0|o(),VA=0|bC(0|CI,0|cA,0|(VA=0|KB(0|(I=0|bC(0|WA,0|zA,1048576,0)),0|(L=0|o()),21)),0|o()),cA=0|o(),L=0|FC(0|WA,0|zA,-2097152&I|0,0|L),I=0|o(),CI=0|KB(0|(zA=0|bC(0|OA,0|ZA,1048576,0)),0|(WA=0|o()),21),BI=0|o(),gA=0|KB(0|(S=0|bC(0|UA,0|xA,1048576,0)),0|($=0|o()),21),Y=0|o(),IA=0|KB(0|(u=0|bC(0|R,0|H,1048576,0)),0|(BA=0|o()),21),iA=0|o(),D=0|KB(0|(_A=0|bC(0|oA,0|m,1048576,0)),0|(b=0|o()),21),x=0|o(),k=0|bC(0|(lI=0|KB(0|(W=0|bC(0|_I,0|EI,1048576,0)),0|(z=0|o()),21)),0|o(),0|d,0|k),d=0|o(),z=0|FC(0|_I,0|EI,-2097152&W|0,0|z),W=0|o(),EA=0|bC(0|(lI=0|KB(0|(EI=0|bC(0|gI,0|II,1048576,0)),0|(_I=0|o()),21)),0|o(),0|nA,0|EA),nA=0|o(),_I=0|FC(0|gI,0|II,-2097152&EI|0,0|_I),EI=0|o(),Z=0|bC(0|(lI=0|KB(0|(II=0|bC(0|LA,0|PA,1048576,0)),0|(gI=0|o()),21)),0|o(),0|O,0|Z),O=0|o(),gI=0|FC(0|LA,0|PA,-2097152&II|0,0|gI),II=0|o(),PA=0|NB(0|uI,0|qA,666643,0),LA=0|o(),lI=0|NB(0|uI,0|qA,470296,0),wI=0|o(),HA=0|NB(0|uI,0|qA,654183,0),dA=0|o(),nI=0|NB(0|uI,0|qA,-997805,-1),sI=0|o(),V=0|NB(0|uI,0|qA,136657,0),T=0|o(),x=0|bC(0|(QI=0|FC(0|(qA=0|bC(0|DI,0|KA,0|(qA=0|NB(0|uI,0|qA,-683901,-1)),0|o())),0|o(),-2097152&rI|0,0|QI)),0|o(),0|D,0|x),D=0|o(),QI=0|NB(0|Z,0|O,666643,0),rI=0|o(),qA=0|NB(0|Z,0|O,470296,0),KA=0|o(),DI=0|NB(0|Z,0|O,654183,0),uI=0|o(),SA=0|NB(0|Z,0|O,-997805,-1),GA=0|o(),vA=0|NB(0|Z,0|O,136657,0),NA=0|o(),O=0|NB(0|Z,0|O,-683901,-1),Z=0|o(),AI=0|NB(0|gI,0|II,666643,0),$A=0|o(),oI=0|NB(0|gI,0|II,470296,0),eI=0|o(),YA=0|NB(0|gI,0|II,654183,0),RA=0|o(),fI=0|NB(0|gI,0|II,-997805,-1),pI=0|o(),bA=0|NB(0|gI,0|II,136657,0),kA=0|o(),II=0|NB(0|gI,0|II,-683901,-1),gI=0|o(),iA=0|bC(0|(jA=0|FC(0|(gI=0|bC(0|(NA=0|bC(0|(sI=0|bC(0|XA,0|J,0|nI,0|sI)),0|o(),0|vA,0|NA)),0|o(),0|II,0|gI)),0|o(),-2097152&TA|0,0|jA)),0|o(),0|IA,0|iA),IA=0|o(),jA=0|bC(0|VA,0|cA,0|(jA=0|NB(0|EA,0|nA,666643,0)),0|o()),cA=0|o(),VA=0|NB(0|EA,0|nA,470296,0),TA=0|o(),gI=0|NB(0|EA,0|nA,654183,0),II=0|o(),NA=0|NB(0|EA,0|nA,-997805,-1),vA=0|o(),sI=0|NB(0|EA,0|nA,136657,0),nI=0|o(),nA=0|NB(0|EA,0|nA,-683901,-1),EA=0|o(),J=0|bC(0|L,0|I,0|(J=0|NB(0|_I,0|EI,666643,0)),0|o()),I=0|o(),L=0|bC(0|jA,0|cA,0|(L=0|NB(0|_I,0|EI,470296,0)),0|o()),cA=0|o(),jA=0|NB(0|_I,0|EI,654183,0),XA=0|o(),CA=0|NB(0|_I,0|EI,-997805,-1),U=0|o(),JA=0|NB(0|_I,0|EI,136657,0),MA=0|o(),EI=0|NB(0|_I,0|EI,-683901,-1),_I=0|o(),Y=0|bC(0|(M=0|FC(0|(_I=0|bC(0|(nI=0|bC(0|(yI=0|bC(0|(pI=0|bC(0|(wI=0|bC(0|DI,0|uI,0|lI,0|wI)),0|o(),0|fI,0|pI)),0|o(),0|hI,0|yI)),0|o(),0|sI,0|nI)),0|o(),0|EI,0|_I)),0|o(),-2097152&G|0,0|M)),0|o(),0|gA,0|Y),gA=0|o(),M=0|NB(0|k,0|d,666643,0),G=0|o(),G=0|bC(0|(q=0|FC(0|(eA=0|bC(0|iI,0|cI,0|g,0|eA)),0|o(),-2097152&P|0,0|q)),0|o(),0|M,0|G),M=0|o(),q=0|bC(0|J,0|I,0|(q=0|NB(0|k,0|d,470296,0)),0|o()),I=0|o(),J=0|bC(0|L,0|cA,0|(J=0|NB(0|k,0|d,654183,0)),0|o()),cA=0|o(),L=0|NB(0|k,0|d,-997805,-1),P=0|o(),eA=0|NB(0|k,0|d,136657,0),g=0|o(),g=0|bC(0|(K=0|FC(0|(U=0|bC(0|(II=0|bC(0|(BI=0|bC(0|(aI=0|bC(0|(rI=0|bC(0|oI,0|eI,0|QI,0|rI)),0|o(),0|tI,0|aI)),0|o(),0|CI,0|BI)),0|o(),0|gI,0|II)),0|o(),0|CA,0|U)),0|o(),-2097152&F|0,0|K)),0|o(),0|eA,0|g),eA=0|o(),d=0|NB(0|k,0|d,-683901,-1),k=0|o(),U=0|bC(0|q,0|I,0|(U=0|KB(0|(K=0|bC(0|G,0|M,1048576,0)),0|(F=0|o()),21)),0|o()),I=0|o(),F=0|FC(0|G,0|M,-2097152&K|0,0|F),K=0|o(),q=0|KB(0|(M=0|bC(0|J,0|cA,1048576,0)),0|(G=0|o()),21),CA=0|o(),CA=0|bC(0|(P=0|bC(0|(XA=0|bC(0|(TA=0|bC(0|(WA=0|FC(0|(ZA=0|bC(0|AI,0|$A,0|OA,0|ZA)),0|o(),-2097152&zA|0,0|WA)),0|o(),0|VA,0|TA)),0|o(),0|jA,0|XA)),0|o(),0|L,0|P)),0|o(),0|q,0|CA),q=0|o(),G=0|FC(0|J,0|cA,-2097152&M|0,0|G),M=0|o(),P=0|KB(0|(cA=0|bC(0|g,0|eA,1048576,0)),0|(J=0|o()),21),L=0|o(),L=0|bC(0|($=0|FC(0|(k=0|bC(0|(xA=0|bC(0|(MA=0|bC(0|(vA=0|bC(0|(RA=0|bC(0|(LA=0|bC(0|qA,0|KA,0|PA,0|LA)),0|o(),0|YA,0|RA)),0|o(),0|NA,0|vA)),0|o(),0|JA,0|MA)),0|o(),0|UA,0|xA)),0|o(),0|d,0|k)),0|o(),-2097152&S|0,0|$)),0|o(),0|P,0|L),P=0|o(),k=0|KB(0|($=0|bC(0|Y,0|gA,1048576,0)),0|(S=0|o()),21),d=0|o(),d=0|bC(0|(BA=0|FC(0|(H=0|bC(0|(EA=0|bC(0|(kA=0|bC(0|(dA=0|bC(0|SA,0|GA,0|HA,0|dA)),0|o(),0|bA,0|kA)),0|o(),0|nA,0|EA)),0|o(),0|R,0|H)),0|o(),-2097152&u|0,0|BA)),0|o(),0|k,0|d),k=0|o(),S=0|FC(0|Y,0|gA,-2097152&$|0,0|S),$=0|o(),BA=0|KB(0|(gA=0|bC(0|iA,0|IA,1048576,0)),0|(Y=0|o()),21),u=0|o(),u=0|bC(0|(b=0|FC(0|(m=0|bC(0|(T=0|bC(0|O,0|Z,0|V,0|T)),0|o(),0|oA,0|m)),0|o(),-2097152&_A|0,0|b)),0|o(),0|BA,0|u),BA=0|o(),Y=0|FC(0|iA,0|IA,-2097152&gA|0,0|Y),gA=0|o(),W=0|bC(0|(b=0|KB(0|(IA=0|bC(0|x,0|D,1048576,0)),0|(iA=0|o()),21)),0|o(),0|z,0|W),z=0|o(),iA=0|FC(0|x,0|D,-2097152&IA|0,0|iA),IA=0|o(),b=0|bC(0|G,0|M,0|(b=0|KB(0|(D=0|bC(0|U,0|I,1048576,0)),0|(x=0|o()),21)),0|o()),M=0|o(),x=0|FC(0|U,0|I,-2097152&D|0,0|x),D=0|o(),G=0|KB(0|(I=0|bC(0|CA,0|q,1048576,0)),0|(U=0|o()),21),_A=0|o(),U=0|FC(0|CA,0|q,-2097152&I|0,0|U),I=0|o(),$=0|bC(0|(m=0|KB(0|(q=0|bC(0|L,0|P,1048576,0)),0|(CA=0|o()),21)),0|o(),0|S,0|$),S=0|o(),CA=0|FC(0|L,0|P,-2097152&q|0,0|CA),q=0|o(),gA=0|bC(0|(m=0|KB(0|(P=0|bC(0|d,0|k,1048576,0)),0|(L=0|o()),21)),0|o(),0|Y,0|gA),Y=0|o(),L=0|FC(0|d,0|k,-2097152&P|0,0|L),P=0|o(),IA=0|bC(0|(m=0|KB(0|(k=0|bC(0|u,0|BA,1048576,0)),0|(d=0|o()),21)),0|o(),0|iA,0|IA),iA=0|o(),d=0|FC(0|u,0|BA,-2097152&k|0,0|d),k=0|o(),BA=0|bC(0|X,0|j,0|(BA=0|NB(0|W,0|z,666643,0)),0|o()),j=0|o(),X=0|bC(0|F,0|K,0|(X=0|NB(0|W,0|z,470296,0)),0|o()),K=0|o(),F=0|bC(0|x,0|D,0|(F=0|NB(0|W,0|z,654183,0)),0|o()),D=0|o(),x=0|bC(0|b,0|M,0|(x=0|NB(0|W,0|z,-997805,-1)),0|o()),M=0|o(),b=0|bC(0|U,0|I,0|(b=0|NB(0|W,0|z,136657,0)),0|o()),I=0|o(),z=0|NB(0|W,0|z,-683901,-1),W=0|o(),J=0|FC(0|(W=0|bC(0|(eA=0|bC(0|G,0|_A,0|g,0|eA)),0|o(),0|z,0|W)),0|o(),-2097152&cA|0,0|J),cA=0|o(),W=0|NB(0|IA,0|iA,666643,0),z=0|o(),eA=0|bC(0|BA,0|j,0|(eA=0|NB(0|IA,0|iA,470296,0)),0|o()),j=0|o(),BA=0|bC(0|X,0|K,0|(BA=0|NB(0|IA,0|iA,654183,0)),0|o()),K=0|o(),X=0|bC(0|F,0|D,0|(X=0|NB(0|IA,0|iA,-997805,-1)),0|o()),D=0|o(),F=0|bC(0|x,0|M,0|(F=0|NB(0|IA,0|iA,136657,0)),0|o()),M=0|o(),iA=0|bC(0|b,0|I,0|(iA=0|NB(0|IA,0|iA,-683901,-1)),0|o()),I=0|o(),b=0|bC(0|AA,0|v,0|(b=0|NB(0|d,0|k,666643,0)),0|o()),v=0|o(),AA=0|NB(0|d,0|k,470296,0),IA=0|o(),x=0|bC(0|eA,0|j,0|(x=0|NB(0|d,0|k,654183,0)),0|o()),j=0|o(),eA=0|bC(0|BA,0|K,0|(eA=0|NB(0|d,0|k,-997805,-1)),0|o()),K=0|o(),BA=0|bC(0|X,0|D,0|(BA=0|NB(0|d,0|k,136657,0)),0|o()),D=0|o(),k=0|bC(0|F,0|M,0|(k=0|NB(0|d,0|k,-683901,-1)),0|o()),M=0|o(),F=0|NB(0|gA,0|Y,666643,0),d=0|o(),X=0|NB(0|gA,0|Y,470296,0),g=0|o(),_A=0|NB(0|gA,0|Y,654183,0),G=0|o(),U=0|NB(0|gA,0|Y,-997805,-1),u=0|o(),m=0|bC(0|eA,0|K,0|(m=0|NB(0|gA,0|Y,136657,0)),0|o()),K=0|o(),Y=0|bC(0|BA,0|D,0|(Y=0|NB(0|gA,0|Y,-683901,-1)),0|o()),D=0|o(),BA=0|NB(0|L,0|P,666643,0),gA=0|o(),eA=0|NB(0|L,0|P,470296,0),oA=0|o(),T=0|NB(0|L,0|P,654183,0),V=0|o(),Z=0|NB(0|L,0|P,-997805,-1),O=0|o(),H=0|NB(0|L,0|P,136657,0),R=0|o(),P=0|bC(0|m,0|K,0|(P=0|NB(0|L,0|P,-683901,-1)),0|o()),K=0|o(),aA=0|bC(0|(m=0|NB(0|$,0|S,666643,0)),0|o(),0|tA,0|aA),tA=0|o(),m=0|NB(0|$,0|S,470296,0),L=0|o(),EA=0|NB(0|$,0|S,654183,0),nA=0|o(),oA=0|bC(0|(d=0|bC(0|(nA=0|bC(0|(wA=0|FC(0|(uA=0|bC(0|FA,0|mA,0|DA,0|uA)),0|o(),-2097152&lA|0,8191&wA|0)),0|o(),0|EA,0|nA)),0|o(),0|F,0|d)),0|o(),0|eA,0|oA),eA=0|o(),d=0|NB(0|$,0|S,-997805,-1),F=0|o(),nA=0|NB(0|$,0|S,136657,0),EA=0|o(),O=0|bC(0|(G=0|bC(0|(EA=0|bC(0|(IA=0|bC(0|(z=0|bC(0|(N=0|FC(0|(yA=0|bC(0|fA,0|pA,0|hA,0|yA)),0|o(),-2097152&sA|0,0|N)),0|o(),0|W,0|z)),0|o(),0|AA,0|IA)),0|o(),0|nA,0|EA)),0|o(),0|_A,0|G)),0|o(),0|Z,0|O),Z=0|o(),S=0|NB(0|$,0|S,-683901,-1),$=0|o(),EA=0|KB(0|(G=0|bC(0|aA,0|tA,1048576,0)),0|(_A=0|o()),21),nA=0|o(),nA=0|bC(0|(gA=0|bC(0|(L=0|bC(0|rA,0|QA,0|m,0|L)),0|o(),0|BA,0|gA)),0|o(),0|EA,0|nA),EA=0|o(),_A=0|FC(0|aA,0|tA,-2097152&G|0,0|_A),G=0|o(),gA=0|KB(0|(tA=0|bC(0|oA,0|eA,1048576,0)),0|(aA=0|o()),21),BA=0|o(),BA=0|bC(0|(V=0|bC(0|(g=0|bC(0|(F=0|bC(0|b,0|v,0|d,0|F)),0|o(),0|X,0|g)),0|o(),0|T,0|V)),0|o(),0|gA,0|BA),gA=0|o(),g=0|KB(0|(V=0|bC(0|O,0|Z,1048576,0)),0|(T=0|o()),21),X=0|o(),X=0|bC(0|(R=0|bC(0|(u=0|bC(0|($=0|bC(0|x,0|j,0|S,0|$)),0|o(),0|U,0|u)),0|o(),0|H,0|R)),0|o(),0|g,0|X),g=0|o(),u=0|bC(0|Y,0|D,0|(u=0|KB(0|(R=0|bC(0|P,0|K,1048576,0)),0|(H=0|o()),21)),0|o()),D=0|o(),H=0|FC(0|P,0|K,-2097152&R|0,0|H),R=0|o(),Y=0|bC(0|iA,0|I,0|(Y=0|KB(0|(K=0|bC(0|k,0|M,1048576,0)),0|(P=0|o()),21)),0|o()),I=0|o(),P=0|FC(0|k,0|M,-2097152&K|0,0|P),K=0|o(),iA=0|bC(0|CA,0|q,0|(iA=0|KB(0|(M=0|bC(0|J,0|cA,1048576,0)),0|(k=0|o()),21)),0|o()),q=0|o(),k=0|FC(0|J,0|cA,-2097152&M|0,0|k),M=0|o(),CA=0|KB(0|(cA=0|bC(0|nA,0|EA,1048576,0)),0|(J=0|o()),21),U=0|o(),j=0|KB(0|($=0|bC(0|BA,0|gA,1048576,0)),0|(S=0|o()),21),x=0|o(),v=0|bC(0|H,0|R,0|(v=0|KB(0|(F=0|bC(0|X,0|g,1048576,0)),0|(d=0|o()),21)),0|o()),R=0|o(),L=0|bC(0|P,0|K,0|(L=0|KB(0|(H=0|bC(0|u,0|D,1048576,0)),0|(b=0|o()),21)),0|o()),K=0|o(),b=0|FC(0|u,0|D,-2097152&H|0,0|b),H=0|o(),P=0|bC(0|k,0|M,0|(P=0|KB(0|(D=0|bC(0|Y,0|I,1048576,0)),0|(u=0|o()),21)),0|o()),M=0|o(),u=0|FC(0|Y,0|I,-2097152&D|0,0|u),D=0|o(),k=0|KB(0|(I=0|bC(0|iA,0|q,1048576,0)),0|(Y=0|o()),21),m=0|o(),Y=0|FC(0|iA,0|q,-2097152&I|0,0|Y),I=0|o(),q=0|bC(0|_A,0|G,0|(q=0|NB(0|k,0|m,666643,0)),0|o()),G=0|o(),_A=0|NB(0|k,0|m,470296,0),iA=0|o(),QA=0|NB(0|k,0|m,654183,0),rA=0|o(),IA=0|NB(0|k,0|m,-997805,-1),AA=0|o(),z=0|NB(0|k,0|m,136657,0),W=0|o(),m=0|NB(0|k,0|m,-683901,-1),k=0|o(),G=0|KB(0|q,0|G,21),N=0|o(),G=0|KB(0|(N=0|bC(0|(J=0|FC(0|(iA=0|bC(0|nA,0|EA,0|_A,0|iA)),0|o(),-2097152&cA|0,0|J)),0|o(),0|G,0|N)),0|o(),21),J=0|o(),G=0|KB(0|(J=0|bC(0|(U=0|bC(0|(aA=0|FC(0|(rA=0|bC(0|oA,0|eA,0|QA,0|rA)),0|o(),-2097152&tA|0,0|aA)),0|o(),0|CA,0|U)),0|o(),0|G,0|J)),0|o(),21),U=0|o(),G=0|KB(0|(U=0|bC(0|(S=0|FC(0|(AA=0|bC(0|BA,0|gA,0|IA,0|AA)),0|o(),-2097152&$|0,0|S)),0|o(),0|G,0|U)),0|o(),21),S=0|o(),G=0|KB(0|(S=0|bC(0|(x=0|bC(0|(T=0|FC(0|(W=0|bC(0|O,0|Z,0|z,0|W)),0|o(),-2097152&V|0,0|T)),0|o(),0|j,0|x)),0|o(),0|G,0|S)),0|o(),21),x=0|o(),q=0|bC(0|(P=0|NB(0|(Y=0|KB(0|(I=0|bC(0|(M=0|KB(0|(u=0|bC(0|P,0|M,0|(u=0|KB(0|(D=0|bC(0|(K=0|KB(0|(b=0|bC(0|L,0|K,0|(b=0|KB(0|(H=0|bC(0|(R=0|KB(0|(G=0|bC(0|v,0|R,0|(G=0|KB(0|(x=0|bC(0|(d=0|FC(0|(k=0|bC(0|X,0|g,0|m,0|k)),0|o(),-2097152&F|0,0|d)),0|o(),0|G,0|x)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|b,0|H)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|u,0|D)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|Y,0|I)),0|o(),21)),0|(M=0|o()),666643,0)),0|o(),2097151&q|0,0),P=0|o(),N=0|bC(0|(K=0|NB(0|Y,0|M,470296,0)),0|o(),2097151&N|0,0),K=0|o(),J=0|bC(0|(L=0|NB(0|Y,0|M,654183,0)),0|o(),2097151&J|0,0),L=0|o(),U=0|bC(0|(R=0|NB(0|Y,0|M,-997805,-1)),0|o(),2097151&U|0,0),R=0|o(),S=0|bC(0|(v=0|NB(0|Y,0|M,136657,0)),0|o(),2097151&S|0,0),v=0|o(),I=0|bC(0|(g=0|KB(0|(u=0|bC(0|(m=0|KB(0|(D=0|bC(0|(k=0|KB(0|(b=0|bC(0|(F=0|KB(0|(H=0|bC(0|(d=0|KB(0|(G=0|bC(0|(x=0|KB(0|(S=0|bC(0|(x=0|bC(0|(M=0|NB(0|Y,0|M,-683901,-1)),0|o(),2097151&x|0,0)),0|(M=0|o()),0|(S=0|KB(0|(U=0|bC(0|S,0|v,0|(U=0|KB(0|(J=0|bC(0|U,0|R,0|(J=0|KB(0|(N=0|bC(0|J,0|L,0|(N=0|KB(0|(Y=0|bC(0|N,0|K,0|(Y=0|KB(0|q,0|P,21)),0|o())),0|(K=0|o()),21)),0|o())),0|(L=0|o()),21)),0|o())),0|(R=0|o()),21)),0|o())),0|(v=0|o()),21)),0|o())),0|(M=0|o()),21)),0|o(),2097151&G|0,0)),0|(x=0|o()),21)),0|o(),2097151&H|0,0)),0|(d=0|o()),21)),0|o(),2097151&b|0,0)),0|(F=0|o()),21)),0|o(),2097151&D|0,0)),0|(k=0|o()),21)),0|o(),2097151&u|0,0)),0|(m=0|o()),21)),0|o(),2097151&I|0,0),g=0|o(),B[A>>0]=q,X=0|CC(0|q,0|P,8),o(),B[A+1>>0]=X,P=0|CC(0|q,0|P,16),o(),q=0|$B(2097151&Y|0,0,5),o(),B[A+2>>0]=q|31&P,P=0|CC(0|Y,0|K,3),o(),B[A+3>>0]=P,K=0|CC(0|Y,0|K,11),o(),B[A+4>>0]=K,Y=0|CC(2097151&Y|0,0,19),K=0|o(),P=0|$B(2097151&N|0,0,2),o(),B[A+5>>0]=P|Y,L=0|CC(0|N,0|L,6),o(),B[A+6>>0]=L,N=0|CC(2097151&N|0,0,14),L=0|o(),Y=0|$B(2097151&J|0,0,7),o(),B[A+7>>0]=Y|N,N=0|CC(0|J,0|R,1),o(),B[A+8>>0]=N,R=0|CC(0|J,0|R,9),o(),B[A+9>>0]=R,J=0|CC(2097151&J|0,0,17),R=0|o(),N=0|$B(2097151&U|0,0,4),o(),B[A+10>>0]=N|J,J=0|CC(0|U,0|v,4),o(),B[A+11>>0]=J,v=0|CC(0|U,0|v,12),o(),B[A+12>>0]=v,U=0|CC(2097151&U|0,0,20),v=0|o(),J=0|$B(2097151&S|0,0,1),o(),B[A+13>>0]=J|U,M=0|CC(0|S,0|M,7),o(),B[A+14>>0]=M,S=0|CC(2097151&S|0,0,15),M=0|o(),U=0|$B(2097151&G|0,0,6),o(),B[A+15>>0]=U|S,S=0|CC(0|G,0|x,2),o(),B[A+16>>0]=S,x=0|CC(0|G,0|x,10),o(),B[A+17>>0]=x,G=0|CC(2097151&G|0,0,18),x=0|o(),S=0|$B(0|H,0|d,3),o(),B[A+18>>0]=S|G,G=0|CC(0|H,0|d,5),o(),B[A+19>>0]=G,d=0|CC(0|H,0|d,13),o(),B[A+20>>0]=d,B[A+21>>0]=b,d=0|CC(0|b,0|F,8),o(),B[A+22>>0]=d,F=0|CC(0|b,0|F,16),o(),b=0|$B(2097151&D|0,0,5),o(),B[A+23>>0]=b|31&F,F=0|CC(0|D,0|k,3),o(),B[A+24>>0]=F,k=0|CC(0|D,0|k,11),o(),B[A+25>>0]=k,D=0|CC(2097151&D|0,0,19),k=0|o(),F=0|$B(2097151&u|0,0,2),o(),B[A+26>>0]=F|D,m=0|CC(0|u,0|m,6),o(),B[A+27>>0]=m,u=0|CC(2097151&u|0,0,14),m=0|o(),D=0|$B(0|I,0|g,7),o(),B[A+28>>0]=D|u,u=0|CC(0|I,0|g,1),o(),B[A+29>>0]=u,u=0|CC(0|I,0|g,9),o(),B[A+30>>0]=u,g=0|KB(0|I,0|g,17),o(),B[A+31>>0]=g}function l(A,I,g,B){A|=0,B|=0;var C=0,t=0,r=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0,Y=0,L=0,P=0,K=0,q=0;!function(A,I){A|=0,I|=0;var g=0,B=0,C=0,t=0;g=0;do{t=0|FI(I+(g<<3)|0),C=0|o(),a[(B=A+(g<<3)|0)>>2]=t,a[B+4>>2]=C,g=g+1|0}while(16!=(0|g))}(g|=0,I|=0),C=A,t=(I=B)+64|0;do{a[I>>2]=a[C>>2],I=I+4|0,C=C+4|0}while((0|I)<(0|t));I=0|a[g>>2],C=0|a[g+4>>2],f=0;do{if(y=0|bB(D=0|a[B+32>>2],Q=0|a[B+32+4>>2],14),_=0|o(),b=0|bB(D,Q,18),_=(0|o())^_,L=0|bB(D,Q,41),_^=0|o(),M=0|a[B+40>>2],r=0|a[B+40+4>>2],p=0|a[B+48>>2],t=0|a[B+48+4>>2],e=0|a[(v=32976+(f<<3)|0)>>2],v=0|a[v+4>>2],E=0|a[B+56>>2],u=0|a[B+56+4>>2],v=0|bC(0|(u=0|bC(0|(v=0|bC(0|(v=0|bC(0|(_=0|bC(0|I,0|C,b^y^L|0,0|_)),0|o(),0|e,0|v)),0|o(),(p^M)&D^p|0,(t^r)&Q^t|0)),0|o(),0|E,0|u)),0|(E=0|o()),0|a[B+24>>2],0|a[B+24+4>>2]),e=0|o(),a[B+24>>2]=v,a[B+24+4>>2]=e,y=0|bB(_=0|a[B>>2],L=0|a[B+4>>2],28),I=0|o(),b=0|bB(_,L,34),I=(0|o())^I,x=0|bB(_,L,39),I^=0|o(),i=0|a[B+8>>2],Y=0|a[B+8+4>>2],c=0|a[B+16>>2],R=0|a[B+16+4>>2],E=0|bC(0|(E=0|bC(b^y^x|0,0|I,0|u,0|E)),0|o(),(c|i)&_|c&i|0,(R|Y)&L|R&Y|0),u=0|o(),a[B+56>>2]=E,a[B+56+4>>2]=u,I=0|bB(v,e,14),x=0|o(),y=0|bB(v,e,18),x=(0|o())^x,b=0|bB(v,e,41),x^=0|o(),n=0|a[g+((s=1|f)<<3)>>2],C=0|a[g+(s<<3)+4>>2],h=0|a[32976+(s<<3)>>2],d=0|a[32976+(s<<3)+4>>2],R=0|bC(0|(d=0|bC(0|(C=0|bC(0|(x=0|bC(0|(t=0|bC(v&(M^D)^M|0,e&(r^Q)^r|0,0|p,0|t)),0|o(),y^I^b|0,0|x)),0|o(),0|n,0|C)),0|o(),0|h,0|d)),0|(h=0|o()),0|c,0|R),c=0|o(),a[B+16>>2]=R,a[B+16+4>>2]=c,C=0|bB(E,u,28),n=0|o(),x=0|bB(E,u,34),n=(0|o())^n,b=0|bB(E,u,39),n^=0|o(),n=0|bC(0|(h=0|bC(0|d,0|h,E&(i|_)|i&_|0,u&(Y|L)|Y&L|0)),0|o(),x^C^b|0,0|n),b=0|o(),a[B+48>>2]=n,a[B+48+4>>2]=b,C=0|bB(R,c,14),x=0|o(),h=0|bB(R,c,18),x=(0|o())^x,d=0|bB(R,c,41),x^=0|o(),y=0|a[g+((I=2|f)<<3)>>2],t=0|a[g+(I<<3)+4>>2],p=0|a[32976+(I<<3)>>2],H=0|a[32976+(I<<3)+4>>2],Y=0|bC(0|(H=0|bC(0|(t=0|bC(0|(x=0|bC(0|(r=0|bC(R&(v^D)^D|0,c&(e^Q)^Q|0,0|M,0|r)),0|o(),h^C^d|0,0|x)),0|o(),0|y,0|t)),0|o(),0|p,0|H)),0|(p=0|o()),0|i,0|Y),i=0|o(),a[B+8>>2]=Y,a[B+8+4>>2]=i,t=0|bB(n,b,28),y=0|o(),x=0|bB(n,b,34),y=(0|o())^y,d=0|bB(n,b,39),y^=0|o(),y=0|bC(0|(p=0|bC(0|H,0|p,n&(E|_)|E&_|0,b&(u|L)|u&L|0)),0|o(),x^t^d|0,0|y),d=0|o(),a[B+40>>2]=y,a[B+40+4>>2]=d,t=0|bB(Y,i,14),x=0|o(),p=0|bB(Y,i,18),x=(0|o())^x,H=0|bB(Y,i,41),x^=0|o(),h=0|a[g+((C=3|f)<<3)>>2],r=0|a[g+(C<<3)+4>>2],M=0|a[32976+(C<<3)>>2],w=0|a[32976+(C<<3)+4>>2],L=0|bC(0|(w=0|bC(0|(r=0|bC(0|(x=0|bC(0|(Q=0|bC(Y&(R^v)^v|0,i&(c^e)^e|0,0|D,0|Q)),0|o(),p^t^H|0,0|x)),0|o(),0|h,0|r)),0|o(),0|M,0|w)),0|(M=0|o()),0|_,0|L),_=0|o(),a[B>>2]=L,a[B+4>>2]=_,r=0|bB(y,d,28),h=0|o(),x=0|bB(y,d,34),h=(0|o())^h,H=0|bB(y,d,39),h^=0|o(),h=0|bC(0|(M=0|bC(0|w,0|M,y&(n|E)|n&E|0,d&(b|u)|b&u|0)),0|o(),x^r^H|0,0|h),H=0|o(),a[B+32>>2]=h,a[B+32+4>>2]=H,r=0|bB(L,_,14),x=0|o(),M=0|bB(L,_,18),x=(0|o())^x,w=0|bB(L,_,41),x^=0|o(),p=0|a[g+((t=4|f)<<3)>>2],Q=0|a[g+(t<<3)+4>>2],D=0|a[32976+(t<<3)>>2],J=0|a[32976+(t<<3)+4>>2],u=0|bC(0|(J=0|bC(0|(Q=0|bC(0|(x=0|bC(0|(e=0|bC(L&(Y^R)^R|0,_&(i^c)^c|0,0|v,0|e)),0|o(),M^r^w|0,0|x)),0|o(),0|p,0|Q)),0|o(),0|D,0|J)),0|(D=0|o()),0|E,0|u),E=0|o(),a[B+56>>2]=u,a[B+56+4>>2]=E,Q=0|bB(h,H,28),p=0|o(),x=0|bB(h,H,34),p=(0|o())^p,w=0|bB(h,H,39),p^=0|o(),p=0|bC(0|(D=0|bC(0|J,0|D,h&(y|n)|y&n|0,H&(d|b)|d&b|0)),0|o(),x^Q^w|0,0|p),w=0|o(),a[B+24>>2]=p,a[B+24+4>>2]=w,Q=0|bB(u,E,14),x=0|o(),D=0|bB(u,E,18),x=(0|o())^x,J=0|bB(u,E,41),x^=0|o(),M=0|a[g+((r=5|f)<<3)>>2],e=0|a[g+(r<<3)+4>>2],v=0|a[32976+(r<<3)>>2],G=0|a[32976+(r<<3)+4>>2],b=0|bC(0|(G=0|bC(0|(e=0|bC(0|(x=0|bC(0|(c=0|bC(u&(L^Y)^Y|0,E&(_^i)^i|0,0|R,0|c)),0|o(),D^Q^J|0,0|x)),0|o(),0|M,0|e)),0|o(),0|v,0|G)),0|(v=0|o()),0|n,0|b),n=0|o(),a[B+48>>2]=b,a[B+48+4>>2]=n,e=0|bB(p,w,28),M=0|o(),x=0|bB(p,w,34),M=(0|o())^M,J=0|bB(p,w,39),M^=0|o(),M=0|bC(0|(v=0|bC(0|G,0|v,p&(h|y)|h&y|0,w&(H|d)|H&d|0)),0|o(),x^e^J|0,0|M),J=0|o(),a[B+16>>2]=M,a[B+16+4>>2]=J,e=0|bB(b,n,14),x=0|o(),v=0|bB(b,n,18),x=(0|o())^x,G=0|bB(b,n,41),x^=0|o(),D=0|a[g+((Q=6|f)<<3)>>2],c=0|a[g+(Q<<3)+4>>2],R=0|a[32976+(Q<<3)>>2],N=0|a[32976+(Q<<3)+4>>2],d=0|bC(0|(N=0|bC(0|(c=0|bC(0|(x=0|bC(0|(i=0|bC(b&(u^L)^L|0,n&(E^_)^_|0,0|Y,0|i)),0|o(),v^e^G|0,0|x)),0|o(),0|D,0|c)),0|o(),0|R,0|N)),0|(R=0|o()),0|y,0|d),y=0|o(),a[B+40>>2]=d,a[B+40+4>>2]=y,c=0|bB(M,J,28),D=0|o(),x=0|bB(M,J,34),D=(0|o())^D,G=0|bB(M,J,39),D^=0|o(),D=0|bC(0|(R=0|bC(0|N,0|R,M&(p|h)|p&h|0,J&(w|H)|w&H|0)),0|o(),x^c^G|0,0|D),G=0|o(),a[B+8>>2]=D,a[B+8+4>>2]=G,c=0|bB(d,y,14),x=0|o(),R=0|bB(d,y,18),x=(0|o())^x,N=0|bB(d,y,41),x^=0|o(),v=0|a[g+((e=7|f)<<3)>>2],i=0|a[g+(e<<3)+4>>2],Y=0|a[32976+(e<<3)>>2],P=0|a[32976+(e<<3)+4>>2],H=0|bC(0|(P=0|bC(0|(i=0|bC(0|(x=0|bC(0|(_=0|bC(d&(b^u)^u|0,y&(n^E)^E|0,0|L,0|_)),0|o(),R^c^N|0,0|x)),0|o(),0|v,0|i)),0|o(),0|Y,0|P)),0|(Y=0|o()),0|h,0|H),h=0|o(),a[B+32>>2]=H,a[B+32+4>>2]=h,i=0|bB(D,G,28),v=0|o(),x=0|bB(D,G,34),v=(0|o())^v,N=0|bB(D,G,39),v^=0|o(),v=0|bC(0|(Y=0|bC(0|P,0|Y,D&(M|p)|M&p|0,G&(J|w)|J&w|0)),0|o(),x^i^N|0,0|v),N=0|o(),a[B>>2]=v,a[B+4>>2]=N,i=0|bB(H,h,14),x=0|o(),Y=0|bB(H,h,18),x=(0|o())^x,P=0|bB(H,h,41),x^=0|o(),R=0|a[g+((c=8|f)<<3)>>2],_=0|a[g+(c<<3)+4>>2],L=0|a[32976+(c<<3)>>2],K=0|a[32976+(c<<3)+4>>2],w=0|bC(0|(K=0|bC(0|(_=0|bC(0|(x=0|bC(0|(E=0|bC(H&(d^b)^b|0,h&(y^n)^n|0,0|u,0|E)),0|o(),Y^i^P|0,0|x)),0|o(),0|R,0|_)),0|o(),0|L,0|K)),0|(L=0|o()),0|p,0|w),p=0|o(),a[B+24>>2]=w,a[B+24+4>>2]=p,_=0|bB(v,N,28),R=0|o(),x=0|bB(v,N,34),R=(0|o())^R,P=0|bB(v,N,39),R^=0|o(),R=0|bC(0|(L=0|bC(0|K,0|L,v&(D|M)|D&M|0,N&(G|J)|G&J|0)),0|o(),x^_^P|0,0|R),P=0|o(),a[B+56>>2]=R,a[B+56+4>>2]=P,_=0|bB(w,p,14),x=0|o(),L=0|bB(w,p,18),x=(0|o())^x,K=0|bB(w,p,41),x^=0|o(),Y=0|a[g+((i=9|f)<<3)>>2],E=0|a[g+(i<<3)+4>>2],u=0|a[32976+(i<<3)>>2],q=0|a[32976+(i<<3)+4>>2],J=0|bC(0|(q=0|bC(0|(E=0|bC(0|(x=0|bC(0|(n=0|bC(w&(H^d)^d|0,p&(h^y)^y|0,0|b,0|n)),0|o(),L^_^K|0,0|x)),0|o(),0|Y,0|E)),0|o(),0|u,0|q)),0|(u=0|o()),0|M,0|J),M=0|o(),a[B+16>>2]=J,a[B+16+4>>2]=M,E=0|bB(R,P,28),Y=0|o(),x=0|bB(R,P,34),Y=(0|o())^Y,K=0|bB(R,P,39),Y^=0|o(),Y=0|bC(0|(u=0|bC(0|q,0|u,R&(v|D)|v&D|0,P&(N|G)|N&G|0)),0|o(),x^E^K|0,0|Y),K=0|o(),a[B+48>>2]=Y,a[B+48+4>>2]=K,E=0|bB(J,M,14),x=0|o(),u=0|bB(J,M,18),x=(0|o())^x,q=0|bB(J,M,41),x^=0|o(),L=0|a[g+((_=10|f)<<3)>>2],n=0|a[g+(_<<3)+4>>2],b=0|a[32976+(_<<3)>>2],l=0|a[32976+(_<<3)+4>>2],G=0|bC(0|(l=0|bC(0|(n=0|bC(0|(x=0|bC(0|(y=0|bC(J&(w^H)^H|0,M&(p^h)^h|0,0|d,0|y)),0|o(),u^E^q|0,0|x)),0|o(),0|L,0|n)),0|o(),0|b,0|l)),0|(b=0|o()),0|D,0|G),D=0|o(),a[B+8>>2]=G,a[B+8+4>>2]=D,n=0|bB(Y,K,28),L=0|o(),x=0|bB(Y,K,34),L=(0|o())^L,q=0|bB(Y,K,39),L^=0|o(),L=0|bC(0|(b=0|bC(0|l,0|b,Y&(R|v)|R&v|0,K&(P|N)|P&N|0)),0|o(),x^n^q|0,0|L),q=0|o(),a[B+40>>2]=L,a[B+40+4>>2]=q,n=0|bB(G,D,14),x=0|o(),b=0|bB(G,D,18),x=(0|o())^x,l=0|bB(G,D,41),x^=0|o(),u=0|a[g+((E=11|f)<<3)>>2],y=0|a[g+(E<<3)+4>>2],d=0|a[32976+(E<<3)>>2],m=0|a[32976+(E<<3)+4>>2],N=0|bC(0|(m=0|bC(0|(y=0|bC(0|(x=0|bC(0|(h=0|bC(G&(J^w)^w|0,D&(M^p)^p|0,0|H,0|h)),0|o(),b^n^l|0,0|x)),0|o(),0|u,0|y)),0|o(),0|d,0|m)),0|(d=0|o()),0|v,0|N),v=0|o(),a[B>>2]=N,a[B+4>>2]=v,y=0|bB(L,q,28),u=0|o(),x=0|bB(L,q,34),u=(0|o())^u,l=0|bB(L,q,39),u^=0|o(),u=0|bC(0|(d=0|bC(0|m,0|d,L&(Y|R)|Y&R|0,q&(K|P)|K&P|0)),0|o(),x^y^l|0,0|u),l=0|o(),a[B+32>>2]=u,a[B+32+4>>2]=l,y=0|bB(N,v,14),x=0|o(),d=0|bB(N,v,18),x=(0|o())^x,m=0|bB(N,v,41),x^=0|o(),b=0|a[g+((n=12|f)<<3)>>2],h=0|a[g+(n<<3)+4>>2],H=0|a[32976+(n<<3)>>2],F=0|a[32976+(n<<3)+4>>2],P=0|bC(0|(F=0|bC(0|(h=0|bC(0|(x=0|bC(0|(p=0|bC(N&(G^J)^J|0,v&(D^M)^M|0,0|w,0|p)),0|o(),d^y^m|0,0|x)),0|o(),0|b,0|h)),0|o(),0|H,0|F)),0|(H=0|o()),0|R,0|P),R=0|o(),a[B+56>>2]=P,a[B+56+4>>2]=R,h=0|bB(u,l,28),b=0|o(),x=0|bB(u,l,34),b=(0|o())^b,m=0|bB(u,l,39),b^=0|o(),b=0|bC(0|(H=0|bC(0|F,0|H,u&(L|Y)|L&Y|0,l&(q|K)|q&K|0)),0|o(),x^h^m|0,0|b),m=0|o(),a[B+24>>2]=b,a[B+24+4>>2]=m,h=0|bB(P,R,14),x=0|o(),H=0|bB(P,R,18),x=(0|o())^x,F=0|bB(P,R,41),x^=0|o(),d=0|a[g+((y=13|f)<<3)>>2],p=0|a[g+(y<<3)+4>>2],w=0|a[32976+(y<<3)>>2],k=0|a[32976+(y<<3)+4>>2],K=0|bC(0|(k=0|bC(0|(p=0|bC(0|(x=0|bC(0|(M=0|bC(P&(N^G)^G|0,R&(v^D)^D|0,0|J,0|M)),0|o(),H^h^F|0,0|x)),0|o(),0|d,0|p)),0|o(),0|w,0|k)),0|(w=0|o()),0|Y,0|K),Y=0|o(),a[B+48>>2]=K,a[B+48+4>>2]=Y,p=0|bB(b,m,28),d=0|o(),x=0|bB(b,m,34),d=(0|o())^d,F=0|bB(b,m,39),d^=0|o(),d=0|bC(0|(w=0|bC(0|k,0|w,b&(u|L)|u&L|0,m&(l|q)|l&q|0)),0|o(),x^p^F|0,0|d),F=0|o(),a[B+16>>2]=d,a[B+16+4>>2]=F,p=0|bB(K,Y,14),x=0|o(),w=0|bB(K,Y,18),x=(0|o())^x,k=0|bB(K,Y,41),x^=0|o(),H=0|a[g+((h=14|f)<<3)>>2],M=0|a[g+(h<<3)+4>>2],J=0|a[32976+(h<<3)>>2],U=0|a[32976+(h<<3)+4>>2],q=0|bC(0|(U=0|bC(0|(M=0|bC(0|(x=0|bC(0|(D=0|bC(K&(P^N)^N|0,Y&(R^v)^v|0,0|G,0|D)),0|o(),w^p^k|0,0|x)),0|o(),0|H,0|M)),0|o(),0|J,0|U)),0|(J=0|o()),0|L,0|q),L=0|o(),a[B+40>>2]=q,a[B+40+4>>2]=L,M=0|bB(d,F,28),H=0|o(),x=0|bB(d,F,34),H=(0|o())^H,k=0|bB(d,F,39),H^=0|o(),H=0|bC(0|(J=0|bC(0|U,0|J,d&(b|u)|b&u|0,F&(m|l)|m&l|0)),0|o(),x^M^k|0,0|H),k=0|o(),a[B+8>>2]=H,a[B+8+4>>2]=k,M=0|bB(q,L,14),x=0|o(),J=0|bB(q,L,18),x=(0|o())^x,U=0|bB(q,L,41),x^=0|o(),w=0|a[g+((p=15|f)<<3)>>2],D=0|a[g+(p<<3)+4>>2],G=0|a[32976+(p<<3)>>2],S=0|a[32976+(p<<3)+4>>2],l=0|bC(0|(S=0|bC(0|(D=0|bC(0|(x=0|bC(0|(v=0|bC(q&(K^P)^P|0,L&(Y^R)^R|0,0|N,0|v)),0|o(),J^M^U|0,0|x)),0|o(),0|w,0|D)),0|o(),0|G,0|S)),0|(G=0|o()),0|u,0|l),u=0|o(),a[B+32>>2]=l,a[B+32+4>>2]=u,u=0|bB(H,k,28),l=0|o(),D=0|bB(H,k,34),l=(0|o())^l,w=0|bB(H,k,39),l^=0|o(),l=0|bC(0|(m=0|bC(0|S,0|G,H&(d|b)|d&b|0,k&(F|m)|F&m|0)),0|o(),D^u^w|0,0|l),w=0|o(),a[B>>2]=l,a[B+4>>2]=w,64==(0|f))break;d=0|bB(K=0|a[g+(h<<3)>>2],q=0|a[g+(h<<3)+4>>2],19),R=0|o(),D=0|bB(K,q,61),m=0|o(),m=0|bC((N=0|CC(0|K,0|q,6))^d^D|0,0|(m=(0|o())^R^m),0|(R=0|a[g+(i<<3)>>2]),0|(H=0|a[g+(i<<3)+4>>2])),D=0|o(),M=0|bB(d=0|a[g+(s<<3)>>2],N=0|a[g+(s<<3)+4>>2],1),l=0|o(),Y=0|bB(d,N,8),v=0|o(),J=0|CC(0|d,0|N,7),v=(0|o())^l^v,v=0|bC(0|(l=0|bC(0|m,0|D,0|a[(l=g+(f<<3)|0)>>2],0|a[l+4>>2])),0|o(),J^M^Y|0,0|v),Y=0|o(),a[(M=g+((f=f+16|0)<<3)|0)>>2]=v,a[M+4>>2]=Y,l=0|bB(M=0|a[g+(p<<3)>>2],J=0|a[g+(p<<3)+4>>2],19),D=0|o(),m=0|bB(M,J,61),F=0|o(),w=0|CC(0|M,0|J,6),F=(0|o())^D^F,D=0|a[g+(s+9<<3)>>2],L=0|a[g+(s+9<<3)+4>>2],u=0|bB(k=0|a[g+(s+1<<3)>>2],G=0|a[g+(s+1<<3)+4>>2],1),x=0|o(),b=0|bB(k,G,8),S=0|o(),U=0|CC(0|k,0|G,7),S=(0|o())^x^S,S=0|bC(0|(F=0|bC(0|(N=0|bC(0|D,0|L,0|d,0|N)),0|o(),w^l^m|0,0|F)),0|o(),U^u^b|0,0|S),b=0|o(),a[g+(s+16<<3)>>2]=S,a[g+(s+16<<3)+4>>2]=b,u=0|bB(v,Y,19),U=0|o(),F=0|bB(v,Y,61),s=0|o(),s=0|bC((Y=0|CC(0|v,0|Y,6))^u^F|0,0|(s=(0|o())^U^s),0|(U=0|a[g+(E<<3)>>2]),0|(v=0|a[g+(E<<3)+4>>2])),F=0|o(),m=0|bB(u=0|a[g+(C<<3)>>2],Y=0|a[g+(C<<3)+4>>2],1),l=0|o(),w=0|bB(u,Y,8),N=0|o(),d=0|CC(0|u,0|Y,7),N=(0|o())^l^N,N=0|bC(0|(G=0|bC(0|s,0|F,0|k,0|G)),0|o(),d^m^w|0,0|N),w=0|o(),a[g+(I+16<<3)>>2]=N,a[g+(I+16<<3)+4>>2]=w,m=0|bB(S,b,19),d=0|o(),G=0|bB(S,b,61),k=0|o(),b=0|CC(0|S,0|b,6),k=(0|o())^d^k,d=0|a[g+(C+9<<3)>>2],S=0|a[g+(C+9<<3)+4>>2],s=0|bB(F=0|a[g+(C+1<<3)>>2],I=0|a[g+(C+1<<3)+4>>2],1),l=0|o(),L=0|bB(F,I,8),D=0|o(),x=0|CC(0|F,0|I,7),D=(0|o())^l^D,D=0|bC(0|(k=0|bC(0|(Y=0|bC(0|d,0|S,0|u,0|Y)),0|o(),b^m^G|0,0|k)),0|o(),x^s^L|0,0|D),L=0|o(),a[g+(C+16<<3)>>2]=D,a[g+(C+16<<3)+4>>2]=L,s=0|bB(N,w,19),x=0|o(),k=0|bB(N,w,61),G=0|o(),G=0|bC((w=0|CC(0|N,0|w,6))^s^k|0,0|(G=(0|o())^x^G),0|(x=0|a[g+(y<<3)>>2]),0|(N=0|a[g+(y<<3)+4>>2])),k=0|o(),m=0|bB(s=0|a[g+(r<<3)>>2],w=0|a[g+(r<<3)+4>>2],1),b=0|o(),Y=0|bB(s,w,8),u=0|o(),S=0|CC(0|s,0|w,7),u=(0|o())^b^u,u=0|bC(0|(I=0|bC(0|G,0|k,0|F,0|I)),0|o(),S^m^Y|0,0|u),Y=0|o(),a[g+(t+16<<3)>>2]=u,a[g+(t+16<<3)+4>>2]=Y,m=0|bB(D,L,19),S=0|o(),I=0|bB(D,L,61),F=0|o(),L=0|CC(0|D,0|L,6),F=(0|o())^S^F,S=0|a[g+(r+9<<3)>>2],D=0|a[g+(r+9<<3)+4>>2],b=0|bB(k=0|a[g+(r+1<<3)>>2],G=0|a[g+(r+1<<3)+4>>2],1),d=0|o(),l=0|bB(k,G,8),P=0|o(),C=0|CC(0|k,0|G,7),P=(0|o())^d^P,P=0|bC(0|(F=0|bC(0|(w=0|bC(0|S,0|D,0|s,0|w)),0|o(),L^m^I|0,0|F)),0|o(),C^b^l|0,0|P),l=0|o(),a[g+(r+16<<3)>>2]=P,a[g+(r+16<<3)+4>>2]=l,b=0|bB(u,Y,19),C=0|o(),F=0|bB(u,Y,61),I=0|o(),I=0|bC((Y=0|CC(0|u,0|Y,6))^b^F|0,(0|o())^C^I|0,0|M,0|J),C=0|o(),Y=0|bB(F=0|a[g+(e<<3)>>2],b=0|a[g+(e<<3)+4>>2],1),u=0|o(),m=0|bB(F,b,8),L=0|o(),w=0|CC(0|F,0|b,7),L=(0|o())^u^L,L=0|bC(0|(G=0|bC(0|I,0|C,0|k,0|G)),0|o(),w^Y^m|0,0|L),m=0|o(),a[g+(Q+16<<3)>>2]=L,a[g+(Q+16<<3)+4>>2]=m,Y=0|bB(P,l,19),w=0|o(),G=0|bB(P,l,61),k=0|o(),l=0|CC(0|P,0|l,6),k=(0|o())^w^k,w=0|a[g+(e+9<<3)>>2],P=0|a[g+(e+9<<3)+4>>2],u=0|bB(C=0|a[g+(e+1<<3)>>2],I=0|a[g+(e+1<<3)+4>>2],1),s=0|o(),D=0|bB(C,I,8),S=0|o(),d=0|CC(0|C,0|I,7),S=(0|o())^s^S,S=0|bC(0|(k=0|bC(0|(b=0|bC(0|w,0|P,0|F,0|b)),0|o(),l^Y^G|0,0|k)),0|o(),d^u^D|0,0|S),D=0|o(),a[g+(e+16<<3)>>2]=S,a[g+(e+16<<3)+4>>2]=D,u=0|bB(L,m,19),d=0|o(),k=0|bB(L,m,61),G=0|o(),G=0|bC((m=0|CC(0|L,0|m,6))^u^k|0,0|(G=(0|o())^d^G),0|a[g+(c+9<<3)>>2],0|a[g+(c+9<<3)+4>>2]),k=0|o(),u=0|bB(R,H,1),m=0|o(),d=0|bB(R,H,8),L=0|o(),Y=0|CC(0|R,0|H,7),L=m^(0|o())^L,L=0|bC(0|(I=0|bC(0|G,0|k,0|C,0|I)),0|o(),u^Y^d|0,0|L),d=0|o(),a[g+(c+16<<3)>>2]=L,a[g+(c+16<<3)+4>>2]=d,Y=0|bB(S,D,19),u=0|o(),I=0|bB(S,D,61),C=0|o(),D=0|CC(0|S,0|D,6),C=(0|o())^u^C,u=0|a[g+(i+9<<3)>>2],S=0|a[g+(i+9<<3)+4>>2],m=0|bB(k=0|a[g+(i+1<<3)>>2],G=0|a[g+(i+1<<3)+4>>2],1),l=0|o(),b=0|bB(k,G,8),F=0|o(),P=0|CC(0|k,0|G,7),F=(0|o())^l^F,F=0|bC(0|(C=0|bC(0|(H=0|bC(0|u,0|S,0|R,0|H)),0|o(),D^Y^I|0,0|C)),0|o(),P^m^b|0,0|F),b=0|o(),a[g+(i+16<<3)>>2]=F,a[g+(i+16<<3)+4>>2]=b,m=0|bB(L,d,19),P=0|o(),C=0|bB(L,d,61),I=0|o(),I=0|bC((d=0|CC(0|L,0|d,6))^m^C|0,0|(I=(0|o())^P^I),0|a[g+(_+9<<3)>>2],0|a[g+(_+9<<3)+4>>2]),C=0|o(),m=0|bB(U,v,1),d=0|o(),P=0|bB(U,v,8),L=0|o(),Y=0|CC(0|U,0|v,7),L=d^(0|o())^L,L=0|bC(0|(G=0|bC(0|I,0|C,0|k,0|G)),0|o(),m^Y^P|0,0|L),P=0|o(),a[g+(_+16<<3)>>2]=L,a[g+(_+16<<3)+4>>2]=P,Y=0|bB(F,b,19),m=0|o(),G=0|bB(F,b,61),k=0|o(),b=0|CC(0|F,0|b,6),k=(0|o())^m^k,m=0|a[g+(E+9<<3)>>2],F=0|a[g+(E+9<<3)+4>>2],d=0|bB(C=0|a[g+(E+1<<3)>>2],I=0|a[g+(E+1<<3)+4>>2],1),D=0|o(),H=0|bB(C,I,8),R=0|o(),S=0|CC(0|C,0|I,7),R=(0|o())^D^R,R=0|bC(0|(k=0|bC(0|(v=0|bC(0|m,0|F,0|U,0|v)),0|o(),b^Y^G|0,0|k)),0|o(),S^d^H|0,0|R),H=0|o(),a[g+(E+16<<3)>>2]=R,a[g+(E+16<<3)+4>>2]=H,d=0|bB(L,P,19),S=0|o(),k=0|bB(L,P,61),G=0|o(),G=0|bC((P=0|CC(0|L,0|P,6))^d^k|0,0|(G=(0|o())^S^G),0|a[g+(n+9<<3)>>2],0|a[g+(n+9<<3)+4>>2]),k=0|o(),d=0|bB(x,N,1),P=0|o(),S=0|bB(x,N,8),L=0|o(),Y=0|CC(0|x,0|N,7),L=P^(0|o())^L,L=0|bC(0|(I=0|bC(0|G,0|k,0|C,0|I)),0|o(),d^Y^S|0,0|L),S=0|o(),a[g+(n+16<<3)>>2]=L,a[g+(n+16<<3)+4>>2]=S,Y=0|bB(R,H,19),d=0|o(),I=0|bB(R,H,61),C=0|o(),H=0|CC(0|R,0|H,6),C=(0|o())^d^C,d=0|a[g+(y+9<<3)>>2],R=0|a[g+(y+9<<3)+4>>2],P=0|bB(k=0|a[g+(y+1<<3)>>2],G=0|a[g+(y+1<<3)+4>>2],1),b=0|o(),v=0|bB(k,G,8),U=0|o(),G=0|CC(0|k,0|G,7),U=(0|o())^b^U,U=0|bC(0|(C=0|bC(0|(N=0|bC(0|d,0|R,0|x,0|N)),0|o(),H^Y^I|0,0|C)),0|o(),G^P^v|0,0|U),v=0|o(),a[g+(y+16<<3)>>2]=U,a[g+(y+16<<3)+4>>2]=v,P=0|bB(L,S,19),G=0|o(),C=0|bB(L,S,61),I=0|o(),S=0|CC(0|L,0|S,6),I=(0|o())^G^I,G=0|a[g+(h+9<<3)>>2],L=0|a[g+(h+9<<3)+4>>2],Y=0|bB(M,J,1),H=0|o(),N=0|bB(M,J,8),x=0|o(),R=0|CC(0|M,0|J,7),x=H^(0|o())^x,x=0|bC(0|(I=0|bC(0|(q=0|bC(0|G,0|L,0|K,0|q)),0|o(),S^P^C|0,0|I)),0|o(),Y^R^N|0,0|x),N=0|o(),a[g+(h+16<<3)>>2]=x,a[g+(h+16<<3)+4>>2]=N,N=0|bB(U,v,19),x=0|o(),R=0|bB(U,v,61),Y=0|o(),v=0|CC(0|U,0|v,6),Y=(0|o())^x^Y,x=0|a[g+(p+9<<3)>>2],U=0|a[g+(p+9<<3)+4>>2],P=0|bB(I=0|a[g+(p+1<<3)>>2],C=0|a[g+(p+1<<3)+4>>2],1),S=0|o(),q=0|bB(I,C,8),K=0|o(),L=0|CC(0|I,0|C,7),K=(0|o())^S^K,K=0|bC(0|(Y=0|bC(0|(J=0|bC(0|x,0|U,0|M,0|J)),0|o(),v^N^R|0,0|Y)),0|o(),L^P^q|0,0|K),q=0|o(),a[g+(p+16<<3)>>2]=K,a[g+(p+16<<3)+4>>2]=q}while(f>>>0<80);I=0;do{P=B+(I<<3)|0,P=0|bC(0|a[(q=A+(I<<3)|0)>>2],0|a[q+4>>2],0|a[P>>2],0|a[P+4>>2]),K=0|o(),a[q>>2]=P,a[q+4>>2]=K,I=I+1|0}while(8!=(0|I))}function u(A){A|=0;var I,g=0,B=0,C=0,t=0,r=0,Q=0,e=0,o=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,p=0,f=0,w=0,l=0,u=0;I=h,n=h=h+63&-64,h=h+16|0;do{if(A>>>0<245){if(E=A>>>0<11?16:A+11&-8,(i=0|a[8887])>>>(E>>>3)&3|0)return A=0|a[8+(B=35588+((i>>>(E>>>3)&1^1)+(E>>>3)<<1<<2)|0)>>2],(0|(g=0|a[A+8>>2]))==(0|B)?a[8887]=i&~(1<<(i>>>(E>>>3)&1^1)+(E>>>3)):(a[g+12>>2]=B,a[B+8>>2]=g),u=(i>>>(E>>>3)&1^1)+(E>>>3)<<3,a[A+4>>2]=3|u,a[A+u+4>>2]=1|a[A+u+4>>2],h=I,0|A+8;if(E>>>0>(_=0|a[8889])>>>0){if(i>>>(E>>>3)|0)return C=0|a[35588+((t=((C=(((A=i>>>(E>>>3)<<(E>>>3)&(2<<(E>>>3)|0-(2<<(E>>>3))))&0-A)-1|0)>>>(((A&0-A)-1|0)>>>12&16))>>>5&8|((A&0-A)-1|0)>>>12&16|C>>>(C>>>5&8)>>>2&4|(t=C>>>(C>>>5&8)>>>(C>>>(C>>>5&8)>>>2&4))>>>1&2|t>>>(t>>>1&2)>>>1&1)+(t>>>(t>>>1&2)>>>(t>>>(t>>>1&2)>>>1&1))|0)<<1<<2)+8>>2],(0|(A=0|a[C+8>>2]))==(35588+(t<<1<<2)|0)?(a[8887]=i&~(1<<t),A=i&~(1<<t)):(a[A+12>>2]=35588+(t<<1<<2),a[35588+(t<<1<<2)+8>>2]=A,A=i),a[C+4>>2]=3|E,a[C+E+4>>2]=(t<<3)-E|1,a[C+(t<<3)>>2]=(t<<3)-E,0|_&&(B=0|a[8892],A&1<<(_>>>3)?(A=35588+(_>>>3<<1<<2)+8|0,g=0|a[35588+(_>>>3<<1<<2)+8>>2]):(a[8887]=A|1<<(_>>>3),A=35588+(_>>>3<<1<<2)+8|0,g=35588+(_>>>3<<1<<2)|0),a[A>>2]=B,a[g+12>>2]=B,a[B+8>>2]=g,a[B+12>>2]=35588+(_>>>3<<1<<2)),a[8889]=(t<<3)-E,a[8892]=C+E,h=I,0|C+8;if(Q=0|a[8888]){for(c=0|a[35852+(((o=((Q&0-Q)-1|0)>>>(((Q&0-Q)-1|0)>>>12&16))>>>5&8|((Q&0-Q)-1|0)>>>12&16|o>>>(o>>>5&8)>>>2&4|(c=o>>>(o>>>5&8)>>>(o>>>(o>>>5&8)>>>2&4))>>>1&2|c>>>(c>>>1&2)>>>1&1)+(c>>>(c>>>1&2)>>>(c>>>(c>>>1&2)>>>1&1))<<2)>>2],o=(-8&a[c+4>>2])-E|0,g=c;(A=0|a[g+16>>2])||(A=0|a[g+20>>2]);)o=(e=(g=(-8&a[A+4>>2])-E|0)>>>0<o>>>0)?g:o,g=A,c=e?A:c;if((e=c+E|0)>>>0>c>>>0){t=0|a[c+24>>2],A=0|a[c+12>>2];do{if((0|A)==(0|c)){if(!(A=0|a[(g=c+20|0)>>2])&&!(A=0|a[(g=c+16|0)>>2])){g=0;break}for(;;)if(B=0|a[(C=A+20|0)>>2])A=B,g=C;else{if(!(B=0|a[(C=A+16|0)>>2]))break;A=B,g=C}a[g>>2]=0,g=A}else g=0|a[c+8>>2],a[g+12>>2]=A,a[A+8>>2]=g,g=A}while(0);do{if(0|t){if(A=0|a[c+28>>2],(0|c)==(0|a[35852+(A<<2)>>2])){if(a[35852+(A<<2)>>2]=g,!g){a[8888]=Q&~(1<<A);break}}else if(a[((0|a[t+16>>2])==(0|c)?t+16|0:t+20|0)>>2]=g,!g)break;a[g+24>>2]=t,0|(A=0|a[c+16>>2])&&(a[g+16>>2]=A,a[A+24>>2]=g),0|(A=0|a[c+20>>2])&&(a[g+20>>2]=A,a[A+24>>2]=g)}}while(0);return o>>>0<16?(u=o+E|0,a[c+4>>2]=3|u,a[(u=c+u+4|0)>>2]=1|a[u>>2]):(a[c+4>>2]=3|E,a[e+4>>2]=1|o,a[e+o>>2]=o,0|_&&(B=0|a[8892],1<<(_>>>3)&i?(A=35588+(_>>>3<<1<<2)+8|0,g=0|a[35588+(_>>>3<<1<<2)+8>>2]):(a[8887]=1<<(_>>>3)|i,A=35588+(_>>>3<<1<<2)+8|0,g=35588+(_>>>3<<1<<2)|0),a[A>>2]=B,a[g+12>>2]=B,a[B+8>>2]=g,a[B+12>>2]=35588+(_>>>3<<1<<2)),a[8889]=o,a[8892]=e),h=I,0|c+8}}}}else if(A>>>0<=4294967231){if(E=A+11&-8,C=0|a[8888]){o=(A+11|0)>>>8?E>>>0>16777215?31:E>>>(7+(o=14-((520192+(o=(A+11|0)>>>8<<((1048320+((A+11|0)>>>8)|0)>>>16&8))|0)>>>16&4|(1048320+((A+11|0)>>>8)|0)>>>16&8|(245760+(o<<((o+520192|0)>>>16&4))|0)>>>16&2)+(o<<((o+520192|0)>>>16&4)<<((245760+(o<<((o+520192|0)>>>16&4))|0)>>>16&2)>>>15)|0)|0)&1|o<<1:0,A=0|a[35852+(o<<2)>>2];A:do{if(A)for(B=0-E|0,g=0,e=E<<(31==(0|o)?0:25-(o>>>1)|0),Q=0;;){if((t=(-8&a[A+4>>2])-E|0)>>>0<B>>>0){if(!t){B=0,g=A,p=65;break A}B=t,Q=A}if(g=0==(0|(p=0|a[A+20>>2]))|(0|p)==(0|(A=0|a[A+16+(e>>>31<<2)>>2]))?g:p,!A){A=Q,p=61;break}e<<=1}else B=0-E|0,g=0,A=0,p=61}while(0);if(61==(0|p)){if(0==(0|g)&0==(0|A)){if(!(((A=2<<o)|0-A)&C))break;g=0|a[35852+(((_=((A|0-A)&C&0-((A|0-A)&C))-1|0)>>>(_>>>12&16)>>>5&8|_>>>12&16|(A=_>>>(_>>>12&16)>>>(_>>>(_>>>12&16)>>>5&8))>>>2&4|A>>>(A>>>2&4)>>>1&2|(g=A>>>(A>>>2&4)>>>(A>>>(A>>>2&4)>>>1&2))>>>1&1)+(g>>>(g>>>1&1))<<2)>>2],A=0}g?p=65:(Q=B,e=A)}if(65==(0|p))for(;;){if(B=(t=(_=(-8&a[g+4>>2])-E|0)>>>0<B>>>0)?_:B,t=t?g:A,(A=0|a[g+16>>2])||(A=0|a[g+20>>2]),!A){Q=B,e=t;break}g=A,A=t}if(0!=(0|e)&&Q>>>0<((0|a[8889])-E|0)>>>0&&(c=e+E|0)>>>0>e>>>0){r=0|a[e+24>>2],A=0|a[e+12>>2];do{if((0|A)==(0|e)){if(!(A=0|a[(g=e+20|0)>>2])&&!(A=0|a[(g=e+16|0)>>2])){A=0;break}for(;;)if(B=0|a[(t=A+20|0)>>2])A=B,g=t;else{if(!(B=0|a[(t=A+16|0)>>2]))break;A=B,g=t}a[g>>2]=0}else u=0|a[e+8>>2],a[u+12>>2]=A,a[A+8>>2]=u}while(0);do{if(r){if(g=0|a[e+28>>2],(0|e)==(0|a[35852+(g<<2)>>2])){if(a[35852+(g<<2)>>2]=A,!A){a[8888]=C&~(1<<g),C&=~(1<<g);break}}else if(a[((0|a[r+16>>2])==(0|e)?r+16|0:r+20|0)>>2]=A,!A)break;a[A+24>>2]=r,0|(g=0|a[e+16>>2])&&(a[A+16>>2]=g,a[g+24>>2]=A),(g=0|a[e+20>>2])&&(a[A+20>>2]=g,a[g+24>>2]=A)}}while(0);A:do{if(Q>>>0<16)u=Q+E|0,a[e+4>>2]=3|u,a[(u=e+u+4|0)>>2]=1|a[u>>2];else{if(a[e+4>>2]=3|E,a[c+4>>2]=1|Q,a[c+Q>>2]=Q,B=Q>>>3,Q>>>0<256){(A=0|a[8887])&1<<B?(A=35588+(B<<1<<2)+8|0,g=0|a[35588+(B<<1<<2)+8>>2]):(a[8887]=A|1<<B,A=35588+(B<<1<<2)+8|0,g=35588+(B<<1<<2)|0),a[A>>2]=c,a[g+12>>2]=c,a[c+8>>2]=g,a[c+12>>2]=35588+(B<<1<<2);break}if(A=35852+((B=(A=Q>>>8)?Q>>>0>16777215?31:Q>>>(7+(B=14-((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4|(A+1048320|0)>>>16&8|(245760+(B=A<<((A+1048320|0)>>>16&8)<<((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4))|0)>>>16&2)+(B<<((B+245760|0)>>>16&2)>>>15)|0)|0)&1|B<<1:0)<<2)|0,a[c+28>>2]=B,a[c+16+4>>2]=0,a[c+16>>2]=0,!(C&(g=1<<B))){a[8888]=C|g,a[A>>2]=c,a[c+24>>2]=A,a[c+12>>2]=c,a[c+8>>2]=c;break}A=0|a[A>>2];I:do{if((-8&a[A+4>>2]|0)!=(0|Q)){for(C=Q<<(31==(0|B)?0:25-(B>>>1)|0);g=0|a[(B=A+16+(C>>>31<<2)|0)>>2];){if((-8&a[g+4>>2]|0)==(0|Q)){A=g;break I}C<<=1,A=g}a[B>>2]=c,a[c+24>>2]=A,a[c+12>>2]=c,a[c+8>>2]=c;break A}}while(0);u=0|a[(l=A+8|0)>>2],a[u+12>>2]=c,a[l>>2]=c,a[c+8>>2]=u,a[c+12>>2]=A,a[c+24>>2]=0}}while(0);return h=I,0|e+8}}}else E=-1}while(0);if((B=0|a[8889])>>>0>=E>>>0)return g=B-E|0,A=0|a[8892],g>>>0>15?(u=A+E|0,a[8892]=u,a[8889]=g,a[u+4>>2]=1|g,a[A+B>>2]=g,a[A+4>>2]=3|E):(a[8889]=0,a[8892]=0,a[A+4>>2]=3|B,a[A+B+4>>2]=1|a[A+B+4>>2]),h=I,0|A+8;if((t=0|a[8890])>>>0>E>>>0)return w=t-E|0,a[8890]=w,l=(u=0|a[8893])+E|0,a[8893]=l,a[l+4>>2]=1|w,a[u+4>>2]=3|E,h=I,0|u+8;if(0|a[9005]?A=0|a[9007]:(a[9007]=4096,a[9006]=4096,a[9008]=-1,a[9009]=-1,a[9010]=0,a[8998]=0,a[9005]=-16&n^1431655768,A=4096),Q=E+48|0,((c=A+(e=E+47|0)|0)&(o=0-A|0))>>>0<=E>>>0)return h=I,0;if(0|(A=0|a[8997])&&(((n=0|a[8995])+(c&o)|0)>>>0<=n>>>0||(n+(c&o)|0)>>>0>A>>>0))return h=I,0;A:do{if(4&a[8998])A=0,p=143;else{g=0|a[8893];I:do{if(g){for(B=35996;!((A=0|a[B>>2])>>>0<=g>>>0&&(A+(0|a[(y=B+4|0)>>2])|0)>>>0>g>>>0);){if(!(A=0|a[B+8>>2])){p=128;break I}B=A}if((c-t&o)>>>0<2147483647)if((0|(A=0|AB(c-t&o)))==((0|a[B>>2])+(0|a[y>>2])|0)){if(-1!=(0|A)){Q=A,r=c-t&o,p=145;break A}A=c-t&o}else C=A,B=c-t&o,p=136;else A=0}else p=128}while(0);do{if(128==(0|p))if(-1!=(0|(g=0|AB(0)))&&(r=(0==((r=0|a[9006])-1&g|0)?0:(r+-1+g&0-r)-g|0)+(c&o)|0,s=0|a[8995],r>>>0>E>>>0&r>>>0<2147483647)){if(0|(y=0|a[8997])&&(r+s|0)>>>0<=s>>>0|(r+s|0)>>>0>y>>>0){A=0;break}if((0|(A=0|AB(r)))==(0|g)){Q=g,p=145;break A}C=A,B=r,p=136}else A=0}while(0);do{if(136==(0|p)){if(g=0-B|0,!(Q>>>0>B>>>0&B>>>0<2147483647&-1!=(0|C))){if(-1==(0|C)){A=0;break}Q=C,r=B,p=145;break A}if((A=e-B+(A=0|a[9007])&0-A)>>>0>=2147483647){Q=C,r=B,p=145;break A}if(-1==(0|AB(A))){AB(g),A=0;break}Q=C,r=A+B|0,p=145;break A}}while(0);a[8998]=4|a[8998],p=143}}while(0);if(143==(0|p)&&(c&o)>>>0<2147483647&&!(-1==(0|(f=0|AB(c&o)))|1^(l=((w=0|AB(0))-f|0)>>>0>(E+40|0)>>>0)|f>>>0<w>>>0&-1!=(0|f)&-1!=(0|w)^1)&&(Q=f,r=l?w-f|0:A,p=145),145==(0|p)){A=(0|a[8995])+r|0,a[8995]=A,A>>>0>(0|a[8996])>>>0&&(a[8996]=A),o=0|a[8893];A:do{if(o){for(t=35996;;){if((0|Q)==((A=0|a[t>>2])+(g=0|a[(C=t+4|0)>>2])|0)){p=154;break}if(!(B=0|a[t+8>>2]))break;t=B}if(154==(0|p)&&0==(8&a[t+12>>2]|0)&&Q>>>0>o>>>0&A>>>0<=o>>>0){a[C>>2]=g+r,u=(0|a[8890])+r|0,l=0==(o+8&7|0)?0:0-(o+8)&7,a[8893]=o+l,a[8890]=u-l,a[o+l+4>>2]=u-l|1,a[o+u+4>>2]=40,a[8894]=a[9009];break}for(Q>>>0<(0|a[8891])>>>0&&(a[8891]=Q),B=Q+r|0,g=35996;;){if((0|a[g>>2])==(0|B)){p=162;break}if(!(A=0|a[g+8>>2]))break;g=A}if(162==(0|p)&&0==(8&a[g+12>>2]|0)){a[g>>2]=Q,a[(i=g+4|0)>>2]=(0|a[i>>2])+r,c=(i=Q+(0==(7&(i=Q+8|0)|0)?0:0-i&7)|0)+E|0,e=(A=B+(0==(B+8&7|0)?0:0-(B+8)&7)|0)-i-E|0,a[i+4>>2]=3|E;I:do{if((0|o)==(0|A))u=(0|a[8890])+e|0,a[8890]=u,a[8893]=c,a[c+4>>2]=1|u;else{if((0|a[8892])==(0|A)){u=(0|a[8889])+e|0,a[8889]=u,a[8892]=c,a[c+4>>2]=1|u,a[c+u>>2]=u;break}if(1==(3&(Q=0|a[A+4>>2])|0)){g:do{if(Q>>>0<256){if(g=0|a[A+8>>2],(0|(B=0|a[A+12>>2]))==(0|g)){a[8887]=a[8887]&~(1<<(Q>>>3));break}a[g+12>>2]=B,a[B+8>>2]=g;break}r=0|a[A+24>>2],g=0|a[A+12>>2];do{if((0|g)==(0|A)){if(g=0|a[A+16+4>>2])B=A+16+4|0;else{if(!(g=0|a[A+16>>2])){g=0;break}B=A+16|0}for(;;)if(C=0|a[(t=g+20|0)>>2])g=C,B=t;else{if(!(C=0|a[(t=g+16|0)>>2]))break;g=C,B=t}a[B>>2]=0}else u=0|a[A+8>>2],a[u+12>>2]=g,a[g+8>>2]=u}while(0);if(!r)break;B=0|a[A+28>>2];do{if((0|a[35852+(B<<2)>>2])==(0|A)){if(a[35852+(B<<2)>>2]=g,0|g)break;a[8888]=a[8888]&~(1<<B);break g}if(a[((0|a[r+16>>2])==(0|A)?r+16|0:r+20|0)>>2]=g,!g)break g}while(0);if(a[g+24>>2]=r,0|(B=0|a[A+16>>2])&&(a[g+16>>2]=B,a[B+24>>2]=g),!(B=0|a[A+16+4>>2]))break;a[g+20>>2]=B,a[B+24>>2]=g}while(0);A=A+(-8&Q)|0,t=(-8&Q)+e|0}else t=e;if(a[(B=A+4|0)>>2]=-2&a[B>>2],a[c+4>>2]=1|t,a[c+t>>2]=t,B=t>>>3,t>>>0<256){(A=0|a[8887])&1<<B?(A=35588+(B<<1<<2)+8|0,g=0|a[35588+(B<<1<<2)+8>>2]):(a[8887]=A|1<<B,A=35588+(B<<1<<2)+8|0,g=35588+(B<<1<<2)|0),a[A>>2]=c,a[g+12>>2]=c,a[c+8>>2]=g,a[c+12>>2]=35588+(B<<1<<2);break}A=t>>>8;do{if(A){if(t>>>0>16777215){C=31;break}C=t>>>(7+(C=14-((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4|(A+1048320|0)>>>16&8|(245760+(C=A<<((A+1048320|0)>>>16&8)<<((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4))|0)>>>16&2)+(C<<((C+245760|0)>>>16&2)>>>15)|0)|0)&1|C<<1}else C=0}while(0);if(g=35852+(C<<2)|0,a[c+28>>2]=C,a[c+16+4>>2]=0,a[c+16>>2]=0,!((A=0|a[8888])&(B=1<<C))){a[8888]=A|B,a[g>>2]=c,a[c+24>>2]=g,a[c+12>>2]=c,a[c+8>>2]=c;break}A=0|a[g>>2];g:do{if((-8&a[A+4>>2]|0)!=(0|t)){for(C=t<<(31==(0|C)?0:25-(C>>>1)|0);g=0|a[(B=A+16+(C>>>31<<2)|0)>>2];){if((-8&a[g+4>>2]|0)==(0|t)){A=g;break g}C<<=1,A=g}a[B>>2]=c,a[c+24>>2]=A,a[c+12>>2]=c,a[c+8>>2]=c;break I}}while(0);u=0|a[(l=A+8|0)>>2],a[u+12>>2]=c,a[l>>2]=c,a[c+8>>2]=u,a[c+12>>2]=A,a[c+24>>2]=0}}while(0);return h=I,0|i+8}for(g=35996;!((A=0|a[g>>2])>>>0<=o>>>0&&(u=A+(0|a[g+4>>2])|0)>>>0>o>>>0);)g=0|a[g+8>>2];t=(t=u+-47+(0==(u+-47+8&7|0)?0:0-(u+-47+8)&7)|0)>>>0<(o+16|0)>>>0?o:t,A=r+-40|0,l=Q+(w=0==(7&(w=Q+8|0)|0)?0:0-w&7)|0,a[8893]=l,a[8890]=A-w,a[l+4>>2]=A-w|1,a[Q+A+4>>2]=40,a[8894]=a[9009],a[t+4>>2]=27,a[t+8>>2]=a[8999],a[t+8+4>>2]=a[9e3],a[t+8+8>>2]=a[9001],a[t+8+12>>2]=a[9002],a[8999]=Q,a[9e3]=r,a[9002]=0,a[9001]=t+8,A=t+24|0;do{l=A,a[(A=A+4|0)>>2]=7}while((l+8|0)>>>0<u>>>0);if((0|t)!=(0|o)){if(a[t+4>>2]=-2&a[t+4>>2],a[o+4>>2]=t-o|1,a[t>>2]=t-o,(t-o|0)>>>0<256){B=35588+((t-o|0)>>>3<<1<<2)|0,(A=0|a[8887])&1<<((t-o|0)>>>3)?(A=B+8|0,g=0|a[B+8>>2]):(a[8887]=A|1<<((t-o|0)>>>3),A=B+8|0,g=B),a[A>>2]=o,a[g+12>>2]=o,a[o+8>>2]=g,a[o+12>>2]=B;break}if(g=35852+((C=(t-o|0)>>>8?(t-o|0)>>>0>16777215?31:(t-o|0)>>>(7+(C=14-((520192+(C=(t-o|0)>>>8<<((1048320+((t-o|0)>>>8)|0)>>>16&8))|0)>>>16&4|(1048320+((t-o|0)>>>8)|0)>>>16&8|(245760+(C<<((C+520192|0)>>>16&4))|0)>>>16&2)+(C<<((C+520192|0)>>>16&4)<<((245760+(C<<((C+520192|0)>>>16&4))|0)>>>16&2)>>>15)|0)|0)&1|C<<1:0)<<2)|0,a[o+28>>2]=C,a[o+20>>2]=0,a[o+16>>2]=0,!((A=0|a[8888])&(B=1<<C))){a[8888]=A|B,a[g>>2]=o,a[o+24>>2]=g,a[o+12>>2]=o,a[o+8>>2]=o;break}A=0|a[g>>2];I:do{if((-8&a[A+4>>2]|0)!=(t-o|0)){for(C=t-o<<(31==(0|C)?0:25-(C>>>1)|0);g=0|a[(B=A+16+(C>>>31<<2)|0)>>2];){if((-8&a[g+4>>2]|0)==(t-o|0)){A=g;break I}C<<=1,A=g}a[B>>2]=o,a[o+24>>2]=A,a[o+12>>2]=o,a[o+8>>2]=o;break A}}while(0);u=0|a[(l=A+8|0)>>2],a[u+12>>2]=o,a[l>>2]=o,a[o+8>>2]=u,a[o+12>>2]=A,a[o+24>>2]=0}}else 0==(0|(u=0|a[8891]))|Q>>>0<u>>>0&&(a[8891]=Q),a[8999]=Q,a[9e3]=r,a[9002]=0,a[8896]=a[9005],a[8895]=-1,a[8900]=35588,a[8899]=35588,a[8902]=35596,a[8901]=35596,a[8904]=35604,a[8903]=35604,a[8906]=35612,a[8905]=35612,a[8908]=35620,a[8907]=35620,a[8910]=35628,a[8909]=35628,a[8912]=35636,a[8911]=35636,a[8914]=35644,a[8913]=35644,a[8916]=35652,a[8915]=35652,a[8918]=35660,a[8917]=35660,a[8920]=35668,a[8919]=35668,a[8922]=35676,a[8921]=35676,a[8924]=35684,a[8923]=35684,a[8926]=35692,a[8925]=35692,a[8928]=35700,a[8927]=35700,a[8930]=35708,a[8929]=35708,a[8932]=35716,a[8931]=35716,a[8934]=35724,a[8933]=35724,a[8936]=35732,a[8935]=35732,a[8938]=35740,a[8937]=35740,a[8940]=35748,a[8939]=35748,a[8942]=35756,a[8941]=35756,a[8944]=35764,a[8943]=35764,a[8946]=35772,a[8945]=35772,a[8948]=35780,a[8947]=35780,a[8950]=35788,a[8949]=35788,a[8952]=35796,a[8951]=35796,a[8954]=35804,a[8953]=35804,a[8956]=35812,a[8955]=35812,a[8958]=35820,a[8957]=35820,a[8960]=35828,a[8959]=35828,a[8962]=35836,a[8961]=35836,u=r+-40|0,l=Q+(w=0==(7&(w=Q+8|0)|0)?0:0-w&7)|0,a[8893]=l,a[8890]=u-w,a[l+4>>2]=u-w|1,a[Q+u+4>>2]=40,a[8894]=a[9009]}while(0);if((A=0|a[8890])>>>0>E>>>0)return w=A-E|0,a[8890]=w,l=(u=0|a[8893])+E|0,a[8893]=l,a[l+4>>2]=1|w,a[u+4>>2]=3|E,h=I,0|u+8}return a[8886]=48,h=I,0}function D(A){var I,g,C,a,t=0,r=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0,Y=0,L=0,P=0,K=0,q=0,X=0,j=0,T=0,V=0,W=0,z=0,Z=0,O=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,aA=0,tA=0,rA=0,QA=0,eA=0,oA=0,cA=0,iA=0,_A=0,EA=0,nA=0,sA=0,yA=0;X=0|JB(0|B[(A|=0)>>0],0|B[A+1>>0],0|B[A+2>>0]),o(),V=0|CC(0|(V=0|dg(A+2|0)),0|o(),5),o(),J=0|CC(0|(J=0|JB(0|B[A+5>>0],0|B[A+6>>0],0|B[A+7>>0])),0|o(),2),o(),y=0|CC(0|(y=0|dg(A+7|0)),0|o(),7),o(),j=0|CC(0|(j=0|dg(A+10|0)),0|o(),4),o(),O=0|CC(0|(O=0|JB(0|B[A+13>>0],0|B[A+14>>0],0|B[A+15>>0])),0|o(),1),o(),F=0|CC(0|(F=0|dg(A+15|0)),0|o(),6),o(),eA=0|CC(0|(eA=0|JB(0|B[A+18>>0],0|B[A+19>>0],0|B[A+20>>0])),0|o(),3),o(),_A=0|JB(0|B[A+21>>0],0|B[A+22>>0],0|B[A+23>>0]),o(),tA=0|CC(0|(tA=0|dg(A+23|0)),0|o(),5),o(),iA=0|CC(0|(iA=0|JB(0|B[A+26>>0],0|B[A+27>>0],0|B[A+28>>0])),0|o(),2),o(),gA=0|CC(0|(gA=0|dg(A+28|0)),0|o(),7),o(),sA=0|CC(0|(sA=0|dg(A+31|0)),0|o(),4),o(),H=0|CC(0|(H=0|JB(0|B[A+34>>0],0|B[A+35>>0],0|B[A+36>>0])),0|o(),1),o(),K=0|CC(0|(K=0|dg(A+36|0)),0|o(),6),o(),l=0|CC(0|(l=0|JB(0|B[A+39>>0],0|B[A+40>>0],0|B[A+41>>0])),0|o(),3),o(),Q=0|JB(0|B[A+42>>0],0|B[A+43>>0],0|B[A+44>>0]),o(),L=0|CC(0|(L=0|dg(A+44|0)),0|o(),5),o(),CA=0|CC(0|(CA=0|JB(0|B[A+47>>0],0|B[A+48>>0],0|B[A+49>>0])),0|o(),2),o(),yA=0|CC(0|(yA=0|dg(A+49|0)),0|o(),7),o(),n=0|CC(0|(n=0|dg(A+52|0)),0|o(),4),o(),b=0|CC(0|(b=0|JB(0|B[A+55>>0],0|B[A+56>>0],0|B[A+57>>0])),0|o(),1),o(),x=0|CC(0|(x=0|dg(A+57|0)),0|o(),6),o(),_=0|NB(0|(T=0|CC(0|(T=0|dg(A+60|0)),0|o(),3)),0|(e=0|o()),666643,0),w=0|o(),cA=0|NB(0|T,0|e,470296,0),u=0|o(),G=0|NB(0|T,0|e,654183,0),c=0|o(),k=0|NB(0|T,0|e,-997805,-1),E=0|o(),l=0|bC(0|(t=0|NB(0|T,0|e,136657,0)),0|o(),2097151&l|0,0),t=0|o(),Q=0|bC(0|(e=0|NB(0|T,0|e,-683901,-1)),0|o(),2097151&Q|0,0),e=0|o(),T=0|NB(2097151&x|0,0,666643,0),P=0|o(),m=0|NB(2097151&x|0,0,470296,0),IA=0|o(),U=0|NB(2097151&x|0,0,654183,0),r=0|o(),z=0|NB(2097151&x|0,0,-997805,-1),W=0|o(),q=0|NB(2097151&x|0,0,136657,0),f=0|o(),x=0|bC(0|l,0|t,0|(x=0|NB(2097151&x|0,0,-683901,-1)),0|o()),t=0|o(),l=0|NB(2097151&b|0,0,666643,0),Z=0|o(),d=0|NB(2097151&b|0,0,470296,0),BA=0|o(),Y=0|NB(2097151&b|0,0,654183,0),i=0|o(),EA=0|NB(2097151&b|0,0,-997805,-1),oA=0|o(),AA=0|NB(2097151&b|0,0,136657,0),M=0|o(),f=0|bC(0|(E=0|bC(0|(K=0|bC(0|(b=0|NB(2097151&b|0,0,-683901,-1)),0|o(),2097151&K|0,0)),0|o(),0|k,0|E)),0|o(),0|q,0|f),q=0|o(),E=0|NB(2097151&n|0,0,666643,0),k=0|o(),K=0|NB(2097151&n|0,0,470296,0),b=0|o(),h=0|NB(2097151&n|0,0,654183,0),$=0|o(),v=0|NB(2097151&n|0,0,-997805,-1),N=0|o(),a=0|NB(2097151&n|0,0,136657,0),nA=0|o(),n=0|NB(2097151&n|0,0,-683901,-1),s=0|o(),p=0|NB(2097151&yA|0,0,666643,0),S=0|o(),rA=0|NB(2097151&yA|0,0,470296,0),QA=0|o(),g=0|NB(2097151&yA|0,0,654183,0),aA=0|o(),C=0|NB(2097151&yA|0,0,-997805,-1),R=0|o(),I=0|NB(2097151&yA|0,0,136657,0),D=0|o(),r=0|bC(0|(u=0|bC(0|(oA=0|bC(0|(nA=0|bC(0|(sA=0|bC(0|(yA=0|NB(2097151&yA|0,0,-683901,-1)),0|o(),2097151&sA|0,0)),0|o(),0|a,0|nA)),0|o(),0|EA,0|oA)),0|o(),0|cA,0|u)),0|o(),0|U,0|r),U=0|o(),F=0|bC(0|(u=0|NB(2097151&CA|0,0,666643,0)),0|o(),2097151&F|0,0),u=0|o(),cA=0|NB(2097151&CA|0,0,470296,0),oA=0|o(),k=0|bC(0|(QA=0|bC(0|(_A=0|bC(0|(EA=0|NB(2097151&CA|0,0,654183,0)),0|o(),2097151&_A|0,0)),0|o(),0|rA,0|QA)),0|o(),0|E,0|k),E=0|o(),QA=0|NB(2097151&CA|0,0,-997805,-1),rA=0|o(),P=0|bC(0|(BA=0|bC(0|($=0|bC(0|(R=0|bC(0|(iA=0|bC(0|(_A=0|NB(2097151&CA|0,0,136657,0)),0|o(),2097151&iA|0,0)),0|o(),0|C,0|R)),0|o(),0|h,0|$)),0|o(),0|d,0|BA)),0|o(),0|T,0|P),T=0|o(),CA=0|NB(2097151&CA|0,0,-683901,-1),BA=0|o(),h=0|CC(0|(d=0|bC(0|F,0|u,1048576,0)),0|($=0|o()),21),R=0|o(),R=0|bC(0|(S=0|bC(0|(eA=0|bC(0|cA,0|oA,2097151&eA|0,0)),0|o(),0|p,0|S)),0|o(),0|h,0|R),h=0|o(),$=0|FC(0|F,0|u,-2097152&d|0,2047&$|0),d=0|o(),S=0|CC(0|(u=0|bC(0|k,0|E,1048576,0)),0|(F=0|o()),21),p=0|o(),p=0|bC(0|(Z=0|bC(0|(b=0|bC(0|(aA=0|bC(0|(tA=0|bC(0|QA,0|rA,2097151&tA|0,0)),0|o(),0|g,0|aA)),0|o(),0|K,0|b)),0|o(),0|l,0|Z)),0|o(),0|S,0|p),S=0|o(),b=0|KB(0|(Z=0|bC(0|P,0|T,1048576,0)),0|(l=0|o()),21),K=0|o(),K=0|bC(0|(IA=0|bC(0|(w=0|bC(0|(i=0|bC(0|(N=0|bC(0|(D=0|bC(0|(gA=0|bC(0|CA,0|BA,2097151&gA|0,0)),0|o(),0|I,0|D)),0|o(),0|v,0|N)),0|o(),0|Y,0|i)),0|o(),0|_,0|w)),0|o(),0|m,0|IA)),0|o(),0|b,0|K),b=0|o(),w=0|KB(0|(IA=0|bC(0|r,0|U,1048576,0)),0|(m=0|o()),21),_=0|o(),_=0|bC(0|(W=0|bC(0|(c=0|bC(0|(M=0|bC(0|(H=0|bC(0|n,0|s,2097151&H|0,0)),0|o(),0|AA,0|M)),0|o(),0|G,0|c)),0|o(),0|z,0|W)),0|o(),0|w,0|_),w=0|o(),m=0|FC(0|r,0|U,-2097152&IA|0,0|m),IA=0|o(),W=0|bC(0|x,0|t,0|(W=0|KB(0|(U=0|bC(0|f,0|q,1048576,0)),0|(r=0|o()),21)),0|o()),t=0|o(),r=0|FC(0|f,0|q,-2097152&U|0,0|r),U=0|o(),L=0|bC(0|(x=0|KB(0|(q=0|bC(0|Q,0|e,1048576,0)),0|(f=0|o()),21)),0|o(),2097151&L|0,0),x=0|o(),f=0|FC(0|Q,0|e,-2097152&q|0,0|f),q=0|o(),z=0|CC(0|(e=0|bC(0|R,0|h,1048576,0)),0|(Q=0|o()),21),c=0|o(),Q=0|FC(0|R,0|h,-2097152&e|0,0|Q),e=0|o(),G=0|KB(0|(h=0|bC(0|p,0|S,1048576,0)),0|(R=0|o()),21),M=0|o(),IA=0|bC(0|(s=0|KB(0|(AA=0|bC(0|K,0|b,1048576,0)),0|(H=0|o()),21)),0|o(),0|m,0|IA),m=0|o(),H=0|FC(0|K,0|b,-2097152&AA|0,0|H),AA=0|o(),U=0|bC(0|(s=0|KB(0|(b=0|bC(0|_,0|w,1048576,0)),0|(K=0|o()),21)),0|o(),0|r,0|U),r=0|o(),K=0|FC(0|_,0|w,-2097152&b|0,0|K),b=0|o(),q=0|bC(0|(s=0|KB(0|(w=0|bC(0|W,0|t,1048576,0)),0|(_=0|o()),21)),0|o(),0|f,0|q),f=0|o(),_=0|FC(0|W,0|t,-2097152&w|0,0|_),w=0|o(),O=0|bC(0|(t=0|NB(0|L,0|x,666643,0)),0|o(),2097151&O|0,0),t=0|o(),W=0|bC(0|$,0|d,0|(W=0|NB(0|L,0|x,470296,0)),0|o()),d=0|o(),$=0|bC(0|Q,0|e,0|($=0|NB(0|L,0|x,654183,0)),0|o()),e=0|o(),Q=0|NB(0|L,0|x,-997805,-1),s=0|o(),n=0|NB(0|L,0|x,136657,0),i=0|o(),l=0|FC(0|(M=0|bC(0|(T=0|bC(0|(x=0|NB(0|L,0|x,-683901,-1)),0|o(),0|P,0|T)),0|o(),0|G,0|M)),0|o(),-2097152&Z|0,0|l),Z=0|o(),j=0|bC(0|(M=0|NB(0|q,0|f,666643,0)),0|o(),2097151&j|0,0),M=0|o(),G=0|bC(0|O,0|t,0|(G=0|NB(0|q,0|f,470296,0)),0|o()),t=0|o(),O=0|bC(0|W,0|d,0|(O=0|NB(0|q,0|f,654183,0)),0|o()),d=0|o(),W=0|bC(0|$,0|e,0|(W=0|NB(0|q,0|f,-997805,-1)),0|o()),e=0|o(),$=0|NB(0|q,0|f,136657,0),T=0|o(),f=0|NB(0|q,0|f,-683901,-1),q=0|o(),y=0|bC(0|(P=0|NB(0|_,0|w,666643,0)),0|o(),2097151&y|0,0),P=0|o(),x=0|bC(0|j,0|M,0|(x=0|NB(0|_,0|w,470296,0)),0|o()),M=0|o(),j=0|bC(0|G,0|t,0|(j=0|NB(0|_,0|w,654183,0)),0|o()),t=0|o(),G=0|bC(0|O,0|d,0|(G=0|NB(0|_,0|w,-997805,-1)),0|o()),d=0|o(),O=0|bC(0|W,0|e,0|(O=0|NB(0|_,0|w,136657,0)),0|o()),e=0|o(),w=0|NB(0|_,0|w,-683901,-1),_=0|o(),_=0|bC(0|(T=0|bC(0|(s=0|bC(0|(F=0|FC(0|(E=0|bC(0|z,0|c,0|k,0|E)),0|o(),-2097152&u|0,0|F)),0|o(),0|Q,0|s)),0|o(),0|$,0|T)),0|o(),0|w,0|_),w=0|o(),J=0|bC(0|(T=0|NB(0|U,0|r,666643,0)),0|o(),2097151&J|0,0),T=0|o(),$=0|bC(0|y,0|P,0|($=0|NB(0|U,0|r,470296,0)),0|o()),P=0|o(),y=0|bC(0|x,0|M,0|(y=0|NB(0|U,0|r,654183,0)),0|o()),M=0|o(),x=0|bC(0|j,0|t,0|(x=0|NB(0|U,0|r,-997805,-1)),0|o()),t=0|o(),j=0|bC(0|G,0|d,0|(j=0|NB(0|U,0|r,136657,0)),0|o()),d=0|o(),r=0|bC(0|O,0|e,0|(r=0|NB(0|U,0|r,-683901,-1)),0|o()),e=0|o(),V=0|bC(0|(O=0|NB(0|K,0|b,666643,0)),0|o(),2097151&V|0,0),O=0|o(),U=0|bC(0|J,0|T,0|(U=0|NB(0|K,0|b,470296,0)),0|o()),T=0|o(),J=0|bC(0|$,0|P,0|(J=0|NB(0|K,0|b,654183,0)),0|o()),P=0|o(),$=0|bC(0|y,0|M,0|($=0|NB(0|K,0|b,-997805,-1)),0|o()),M=0|o(),y=0|bC(0|x,0|t,0|(y=0|NB(0|K,0|b,136657,0)),0|o()),t=0|o(),b=0|bC(0|j,0|d,0|(b=0|NB(0|K,0|b,-683901,-1)),0|o()),d=0|o(),X=0|bC(0|(j=0|NB(0|IA,0|m,666643,0)),0|o(),2097151&X|0,0),j=0|o(),K=0|bC(0|V,0|O,0|(K=0|NB(0|IA,0|m,470296,0)),0|o()),O=0|o(),V=0|bC(0|U,0|T,0|(V=0|NB(0|IA,0|m,654183,0)),0|o()),T=0|o(),U=0|bC(0|J,0|P,0|(U=0|NB(0|IA,0|m,-997805,-1)),0|o()),P=0|o(),J=0|bC(0|$,0|M,0|(J=0|NB(0|IA,0|m,136657,0)),0|o()),M=0|o(),m=0|bC(0|y,0|t,0|(m=0|NB(0|IA,0|m,-683901,-1)),0|o()),t=0|o(),$=0|bC(0|K,0|O,0|($=0|KB(0|(y=0|bC(0|X,0|j,1048576,0)),0|(IA=0|o()),21)),0|o()),O=0|o(),IA=0|FC(0|X,0|j,-2097152&y|0,0|IA),y=0|o(),K=0|bC(0|U,0|P,0|(K=0|KB(0|(j=0|bC(0|V,0|T,1048576,0)),0|(X=0|o()),21)),0|o()),P=0|o(),G=0|bC(0|m,0|t,0|(G=0|KB(0|(U=0|bC(0|J,0|M,1048576,0)),0|(x=0|o()),21)),0|o()),t=0|o(),Q=0|bC(0|r,0|e,0|(Q=0|KB(0|(m=0|bC(0|b,0|d,1048576,0)),0|(s=0|o()),21)),0|o()),e=0|o(),s=0|FC(0|b,0|d,-2097152&m|0,0|s),m=0|o(),r=0|KB(0|(d=0|bC(0|_,0|w,1048576,0)),0|(b=0|o()),21),F=0|o(),F=0|bC(0|(q=0|bC(0|(R=0|FC(0|(S=0|bC(0|n,0|i,0|p,0|S)),0|o(),-2097152&h|0,0|R)),0|o(),0|f,0|q)),0|o(),0|r,0|F),r=0|o(),b=0|FC(0|_,0|w,-2097152&d|0,0|b),d=0|o(),AA=0|bC(0|(q=0|KB(0|(w=0|bC(0|l,0|Z,1048576,0)),0|(_=0|o()),21)),0|o(),0|H,0|AA),H=0|o(),_=0|FC(0|l,0|Z,-2097152&w|0,0|_),w=0|o(),q=0|KB(0|(Z=0|bC(0|$,0|O,1048576,0)),0|(l=0|o()),21),f=0|o(),S=0|KB(0|(R=0|bC(0|K,0|P,1048576,0)),0|(h=0|o()),21),p=0|o(),u=0|bC(0|s,0|m,0|(u=0|KB(0|(i=0|bC(0|G,0|t,1048576,0)),0|(n=0|o()),21)),0|o()),m=0|o(),k=0|bC(0|b,0|d,0|(k=0|KB(0|(s=0|bC(0|Q,0|e,1048576,0)),0|(E=0|o()),21)),0|o()),d=0|o(),E=0|FC(0|Q,0|e,-2097152&s|0,0|E),s=0|o(),b=0|bC(0|_,0|w,0|(b=0|KB(0|(e=0|bC(0|F,0|r,1048576,0)),0|(Q=0|o()),21)),0|o()),w=0|o(),Q=0|FC(0|F,0|r,-2097152&e|0,0|Q),e=0|o(),_=0|KB(0|(r=0|bC(0|AA,0|H,1048576,0)),0|(F=0|o()),21),c=0|o(),F=0|FC(0|AA,0|H,-2097152&r|0,0|F),r=0|o(),H=0|bC(0|IA,0|y,0|(H=0|NB(0|_,0|c,666643,0)),0|o()),y=0|o(),IA=0|NB(0|_,0|c,470296,0),AA=0|o(),z=0|NB(0|_,0|c,654183,0),W=0|o(),L=0|NB(0|_,0|c,-997805,-1),Y=0|o(),N=0|NB(0|_,0|c,136657,0),v=0|o(),c=0|NB(0|_,0|c,-683901,-1),_=0|o(),y=0|KB(0|H,0|y,21),D=0|o(),y=0|KB(0|(D=0|bC(0|(l=0|FC(0|(O=0|bC(0|IA,0|AA,0|$,0|O)),0|o(),-2097152&Z|0,0|l)),0|o(),0|y,0|D)),0|o(),21),l=0|o(),y=0|KB(0|(l=0|bC(0|(f=0|bC(0|(X=0|FC(0|(T=0|bC(0|z,0|W,0|V,0|T)),0|o(),-2097152&j|0,0|X)),0|o(),0|q,0|f)),0|o(),0|y,0|l)),0|o(),21),f=0|o(),y=0|KB(0|(f=0|bC(0|(h=0|FC(0|(Y=0|bC(0|K,0|P,0|L,0|Y)),0|o(),-2097152&R|0,0|h)),0|o(),0|y,0|f)),0|o(),21),h=0|o(),y=0|KB(0|(h=0|bC(0|(p=0|bC(0|(x=0|FC(0|(M=0|bC(0|N,0|v,0|J,0|M)),0|o(),-2097152&U|0,0|x)),0|o(),0|S,0|p)),0|o(),0|y,0|h)),0|o(),21),p=0|o(),H=0|bC(0|(b=0|NB(0|(F=0|KB(0|(r=0|bC(0|(w=0|KB(0|(Q=0|bC(0|b,0|w,0|(Q=0|KB(0|(e=0|bC(0|(d=0|KB(0|(E=0|bC(0|k,0|d,0|(E=0|KB(0|(s=0|bC(0|(m=0|KB(0|(y=0|bC(0|u,0|m,0|(y=0|KB(0|(p=0|bC(0|(n=0|FC(0|(_=0|bC(0|G,0|t,0|c,0|_)),0|o(),-2097152&i|0,0|n)),0|o(),0|y,0|p)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|E,0|s)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|Q,0|e)),0|o(),21)),0|o())),0|o(),21)),0|o(),0|F,0|r)),0|o(),21)),0|(w=0|o()),666643,0)),0|o(),2097151&H|0,0),b=0|o(),D=0|bC(0|(d=0|NB(0|F,0|w,470296,0)),0|o(),2097151&D|0,0),d=0|o(),l=0|bC(0|(k=0|NB(0|F,0|w,654183,0)),0|o(),2097151&l|0,0),k=0|o(),f=0|bC(0|(m=0|NB(0|F,0|w,-997805,-1)),0|o(),2097151&f|0,0),m=0|o(),h=0|bC(0|(u=0|NB(0|F,0|w,136657,0)),0|o(),2097151&h|0,0),u=0|o(),r=0|bC(0|(t=0|KB(0|(Q=0|bC(0|(c=0|KB(0|(e=0|bC(0|(_=0|KB(0|(E=0|bC(0|(i=0|KB(0|(s=0|bC(0|(n=0|KB(0|(y=0|bC(0|(p=0|KB(0|(h=0|bC(0|(p=0|bC(0|(w=0|NB(0|F,0|w,-683901,-1)),0|o(),2097151&p|0,0)),0|(w=0|o()),0|(h=0|KB(0|(f=0|bC(0|h,0|u,0|(f=0|KB(0|(l=0|bC(0|f,0|m,0|(l=0|KB(0|(D=0|bC(0|l,0|k,0|(D=0|KB(0|(F=0|bC(0|D,0|d,0|(F=0|KB(0|H,0|b,21)),0|o())),0|(d=0|o()),21)),0|o())),0|(k=0|o()),21)),0|o())),0|(m=0|o()),21)),0|o())),0|(u=0|o()),21)),0|o())),0|(w=0|o()),21)),0|o(),2097151&y|0,0)),0|(p=0|o()),21)),0|o(),2097151&s|0,0)),0|(n=0|o()),21)),0|o(),2097151&E|0,0)),0|(i=0|o()),21)),0|o(),2097151&e|0,0)),0|(_=0|o()),21)),0|o(),2097151&Q|0,0)),0|(c=0|o()),21)),0|o(),2097151&r|0,0),t=0|o(),B[A>>0]=H,G=0|CC(0|H,0|b,8),o(),B[A+1>>0]=G,b=0|CC(0|H,0|b,16),o(),H=0|$B(2097151&F|0,0,5),o(),B[A+2>>0]=H|31&b,b=0|CC(0|F,0|d,3),o(),B[A+3>>0]=b,d=0|CC(0|F,0|d,11),o(),B[A+4>>0]=d,F=0|CC(2097151&F|0,0,19),d=0|o(),b=0|$B(2097151&D|0,0,2),o(),B[A+5>>0]=b|F,k=0|CC(0|D,0|k,6),o(),B[A+6>>0]=k,D=0|CC(2097151&D|0,0,14),k=0|o(),F=0|$B(2097151&l|0,0,7),o(),B[A+7>>0]=F|D,D=0|CC(0|l,0|m,1),o(),B[A+8>>0]=D,m=0|CC(0|l,0|m,9),o(),B[A+9>>0]=m,l=0|CC(2097151&l|0,0,17),m=0|o(),D=0|$B(2097151&f|0,0,4),o(),B[A+10>>0]=D|l,l=0|CC(0|f,0|u,4),o(),B[A+11>>0]=l,u=0|CC(0|f,0|u,12),o(),B[A+12>>0]=u,f=0|CC(2097151&f|0,0,20),u=0|o(),l=0|$B(2097151&h|0,0,1),o(),B[A+13>>0]=l|f,w=0|CC(0|h,0|w,7),o(),B[A+14>>0]=w,h=0|CC(2097151&h|0,0,15),w=0|o(),f=0|$B(2097151&y|0,0,6),o(),B[A+15>>0]=f|h,h=0|CC(0|y,0|p,2),o(),B[A+16>>0]=h,p=0|CC(0|y,0|p,10),o(),B[A+17>>0]=p,y=0|CC(2097151&y|0,0,18),p=0|o(),h=0|$B(0|s,0|n,3),o(),B[A+18>>0]=h|y,y=0|CC(0|s,0|n,5),o(),B[A+19>>0]=y,n=0|CC(0|s,0|n,13),o(),B[A+20>>0]=n,B[A+21>>0]=E,n=0|CC(0|E,0|i,8),o(),B[A+22>>0]=n,i=0|CC(0|E,0|i,16),o(),E=0|$B(2097151&e|0,0,5),o(),B[A+23>>0]=E|31&i,i=0|CC(0|e,0|_,3),o(),B[A+24>>0]=i,_=0|CC(0|e,0|_,11),o(),B[A+25>>0]=_,e=0|CC(2097151&e|0,0,19),_=0|o(),i=0|$B(2097151&Q|0,0,2),o(),B[A+26>>0]=i|e,c=0|CC(0|Q,0|c,6),o(),B[A+27>>0]=c,Q=0|CC(2097151&Q|0,0,14),c=0|o(),e=0|$B(0|r,0|t,7),o(),B[A+28>>0]=e|Q,Q=0|CC(0|r,0|t,1),o(),B[A+29>>0]=Q,Q=0|CC(0|r,0|t,9),o(),B[A+30>>0]=Q,t=0|KB(0|r,0|t,17),o(),B[A+31>>0]=t}function m(A,I,g){A|=0,g|=0;var B,C,t,r,Q,e,c,i,_,E,n,s,y,h,p,f,w,l,u,D,m,F,k,b,d,H,G,S,x,U,M,J,v,N,R,Y,L,P,K,q,X,j,T,V,W,z,Z,O,$,AA,IA,gA,BA,CA,aA,tA,rA,QA,eA,oA,cA,iA,_A,EA,nA,sA,yA,hA,pA,fA,wA,lA,uA,DA,mA,FA,kA,bA,dA,HA,GA,SA,xA,UA,MA,JA,vA,NA,RA,YA=0,LA=0,PA=0,KA=0,qA=0,XA=0,jA=0,TA=0,VA=0,WA=0,zA=0,ZA=0,OA=0,$A=0,AI=0,II=0,gI=0,BI=0,CI=0,aI=0,tI=0,rI=0,QI=0,eI=0,oI=0,cI=0,iI=0,_I=0,EI=0,nI=0,sI=0,yI=0,hI=0,pI=0,fI=0,wI=0,lI=0,uI=0,DI=0,mI=0,FI=0,kI=0,bI=0,dI=0,HI=0,GI=0,SI=0,xI=0,UI=0,MI=0,JI=0,vI=0,NI=0,RI=0,YI=0,LI=0,PI=0,KI=0,qI=0,XI=0,jI=0,TI=0,VI=0,WI=0,zI=0,ZI=0,OI=0,$I=0,Ag=0,Ig=0,gg=0,Bg=0,Cg=0,ag=0,tg=0,rg=0,Qg=0,eg=0,og=0,cg=0,ig=0,_g=0,Eg=0,ng=0,sg=0,yg=0,hg=0,pg=0,fg=0,wg=0,lg=0,ug=0,Dg=0,mg=0,Fg=0,kg=0,bg=0,dg=0,Hg=0,Gg=0,Sg=0,xg=0,Ug=0,Mg=0,Jg=0,vg=0,Ng=0,Rg=0,Yg=0,Lg=0;AI=0|a[(I|=0)>>2],TA=0|a[I+4>>2],XA=0|a[I+8>>2],OA=0|a[I+12>>2],SI=0|a[I+16>>2],ZA=0|a[I+20>>2],tg=0|a[I+24>>2],YA=0|a[I+28>>2],lI=0|a[I+32>>2],iI=0|a[I+36>>2],eI=0|a[g>>2],Lg=0|a[g+4>>2],ug=0|a[g+8>>2],Bg=0|a[g+12>>2],NI=0|a[g+16>>2],kg=0|a[g+20>>2],eg=0|a[g+24>>2],KI=0|a[g+28>>2],uI=0|a[g+32>>2],RA=0|a[g+36>>2],vA=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),Yg=0|o(),dA=0|NB(0|Lg,((0|Lg)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),bA=0|o(),gA=0|NB(0|ug,((0|ug)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),Cg=0|o(),v=0|NB(0|Bg,((0|Bg)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),RI=0|o(),lA=0|NB(0|NI,((0|NI)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),dg=0|o(),QA=0|NB(0|kg,((0|kg)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),cg=0|o(),K=0|NB(0|eg,((0|eg)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),XI=0|o(),D=0|NB(0|KI,((0|KI)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),mI=0|o(),E=0|NB(0|uI,((0|uI)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),_I=0|o(),AI=0|NB(0|RA,((0|RA)<0)<<31>>31|0,0|AI,((0|AI)<0)<<31>>31|0),$A=0|o(),Dg=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|TA,((0|TA)<0)<<31>>31|0),mg=0|o(),aA=0|NB(0|Lg,((0|Lg)<0)<<31>>31|0,TA<<1|0,((TA<<1|0)<0)<<31>>31|0),CA=0|o(),N=0|NB(0|ug,((0|ug)<0)<<31>>31|0,0|TA,((0|TA)<0)<<31>>31|0),YI=0|o(),uA=0|NB(0|Bg,((0|Bg)<0)<<31>>31|0,TA<<1|0,((TA<<1|0)<0)<<31>>31|0),Hg=0|o(),eA=0|NB(0|NI,((0|NI)<0)<<31>>31|0,0|TA,((0|TA)<0)<<31>>31|0),ig=0|o(),q=0|NB(0|kg,((0|kg)<0)<<31>>31|0,TA<<1|0,((TA<<1|0)<0)<<31>>31|0),jI=0|o(),m=0|NB(0|eg,((0|eg)<0)<<31>>31|0,0|TA,((0|TA)<0)<<31>>31|0),FI=0|o(),n=0|NB(0|KI,((0|KI)<0)<<31>>31|0,TA<<1|0,((TA<<1|0)<0)<<31>>31|0),EI=0|o(),B=0|NB(0|uI,((0|uI)<0)<<31>>31|0,0|TA,((0|TA)<0)<<31>>31|0),II=0|o(),TA=0|NB(19*RA|0,0|(cI=((19*RA|0)<0)<<31>>31),TA<<1|0,((TA<<1|0)<0)<<31>>31|0),I=0|o(),BA=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|XA,((0|XA)<0)<<31>>31|0),ag=0|o(),L=0|NB(0|Lg,((0|Lg)<0)<<31>>31|0,0|XA,((0|XA)<0)<<31>>31|0),Y=0|o(),DA=0|NB(0|ug,((0|ug)<0)<<31>>31|0,0|XA,((0|XA)<0)<<31>>31|0),Gg=0|o(),oA=0|NB(0|Bg,((0|Bg)<0)<<31>>31|0,0|XA,((0|XA)<0)<<31>>31|0),_g=0|o(),X=0|NB(0|NI,((0|NI)<0)<<31>>31|0,0|XA,((0|XA)<0)<<31>>31|0),TI=0|o(),F=0|NB(0|kg,((0|kg)<0)<<31>>31|0,0|XA,((0|XA)<0)<<31>>31|0),kI=0|o(),s=0|NB(0|eg,((0|eg)<0)<<31>>31|0,0|XA,((0|XA)<0)<<31>>31|0),nI=0|o(),C=0|NB(0|KI,((0|KI)<0)<<31>>31|0,0|XA,((0|XA)<0)<<31>>31|0),gI=0|o(),HA=0|NB(19*uI|0,0|(DI=((19*uI|0)<0)<<31>>31),0|XA,((0|XA)<0)<<31>>31|0),xg=0|o(),XA=0|NB(19*RA|0,0|cI,0|XA,((0|XA)<0)<<31>>31|0),jA=0|o(),R=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|OA,((0|OA)<0)<<31>>31|0),LI=0|o(),kA=0|NB(0|Lg,((0|Lg)<0)<<31>>31|0,OA<<1|0,((OA<<1|0)<0)<<31>>31|0),FA=0|o(),cA=0|NB(0|ug,((0|ug)<0)<<31>>31|0,0|OA,((0|OA)<0)<<31>>31|0),Eg=0|o(),j=0|NB(0|Bg,((0|Bg)<0)<<31>>31|0,OA<<1|0,((OA<<1|0)<0)<<31>>31|0),VI=0|o(),k=0|NB(0|NI,((0|NI)<0)<<31>>31|0,0|OA,((0|OA)<0)<<31>>31|0),bI=0|o(),y=0|NB(0|kg,((0|kg)<0)<<31>>31|0,OA<<1|0,((OA<<1|0)<0)<<31>>31|0),sI=0|o(),t=0|NB(0|eg,((0|eg)<0)<<31>>31|0,0|OA,((0|OA)<0)<<31>>31|0),BI=0|o(),GA=0|NB(19*KI|0,0|(qI=((19*KI|0)<0)<<31>>31),OA<<1|0,((OA<<1|0)<0)<<31>>31|0),Ug=0|o(),nA=0|NB(19*uI|0,0|DI,0|OA,((0|OA)<0)<<31>>31|0),sg=0|o(),OA=0|NB(19*RA|0,0|cI,OA<<1|0,((OA<<1|0)<0)<<31>>31|0),qA=0|o(),mA=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),Sg=0|o(),EA=0|NB(0|Lg,((0|Lg)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),_A=0|o(),T=0|NB(0|ug,((0|ug)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),WI=0|o(),b=0|NB(0|Bg,((0|Bg)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),dI=0|o(),h=0|NB(0|NI,((0|NI)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),yI=0|o(),r=0|NB(0|kg,((0|kg)<0)<<31>>31|0,0|SI,((0|SI)<0)<<31>>31|0),CI=0|o(),SA=0|NB(19*eg|0,0|(og=((19*eg|0)<0)<<31>>31),0|SI,((0|SI)<0)<<31>>31|0),Mg=0|o(),sA=0|NB(19*KI|0,0|qI,0|SI,((0|SI)<0)<<31>>31|0),yg=0|o(),Z=0|NB(19*uI|0,0|DI,0|SI,((0|SI)<0)<<31>>31|0),ZI=0|o(),SI=0|NB(19*RA|0,0|cI,0|SI,((0|SI)<0)<<31>>31|0),PA=0|o(),iA=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|ZA,((0|ZA)<0)<<31>>31|0),ng=0|o(),z=0|NB(0|Lg,((0|Lg)<0)<<31>>31|0,ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),W=0|o(),d=0|NB(0|ug,((0|ug)<0)<<31>>31|0,0|ZA,((0|ZA)<0)<<31>>31|0),HI=0|o(),p=0|NB(0|Bg,((0|Bg)<0)<<31>>31|0,ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),hI=0|o(),Q=0|NB(0|NI,((0|NI)<0)<<31>>31|0,0|ZA,((0|ZA)<0)<<31>>31|0),aI=0|o(),xA=0|NB(19*kg|0,0|(bg=((19*kg|0)<0)<<31>>31),ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),Jg=0|o(),yA=0|NB(19*eg|0,0|og,0|ZA,((0|ZA)<0)<<31>>31|0),hg=0|o(),O=0|NB(19*KI|0,0|qI,ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),OI=0|o(),x=0|NB(19*uI|0,0|DI,0|ZA,((0|ZA)<0)<<31>>31|0),xI=0|o(),ZA=0|NB(19*RA|0,0|cI,ZA<<1|0,((ZA<<1|0)<0)<<31>>31|0),LA=0|o(),V=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|tg,((0|tg)<0)<<31>>31|0),zI=0|o(),S=0|NB(0|Lg,((0|Lg)<0)<<31>>31|0,0|tg,((0|tg)<0)<<31>>31|0),G=0|o(),f=0|NB(0|ug,((0|ug)<0)<<31>>31|0,0|tg,((0|tg)<0)<<31>>31|0),pI=0|o(),e=0|NB(0|Bg,((0|Bg)<0)<<31>>31|0,0|tg,((0|tg)<0)<<31>>31|0),tI=0|o(),UA=0|NB(19*NI|0,((19*NI|0)<0)<<31>>31|0,0|tg,((0|tg)<0)<<31>>31|0),vg=0|o(),hA=0|NB(19*kg|0,0|bg,0|tg,((0|tg)<0)<<31>>31|0),pg=0|o(),$=0|NB(19*eg|0,0|og,0|tg,((0|tg)<0)<<31>>31|0),$I=0|o(),U=0|NB(19*KI|0,0|qI,0|tg,((0|tg)<0)<<31>>31|0),UI=0|o(),VA=0|NB(19*uI|0,0|DI,0|tg,((0|tg)<0)<<31>>31|0),WA=0|o(),tg=0|NB(19*RA|0,0|cI,0|tg,((0|tg)<0)<<31>>31|0),KA=0|o(),H=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|YA,((0|YA)<0)<<31>>31|0),GI=0|o(),u=0|NB(0|Lg,((0|Lg)<0)<<31>>31|0,YA<<1|0,((YA<<1|0)<0)<<31>>31|0),l=0|o(),c=0|NB(0|ug,((0|ug)<0)<<31>>31|0,0|YA,((0|YA)<0)<<31>>31|0),rI=0|o(),MA=0|NB(19*Bg|0,((19*Bg|0)<0)<<31>>31|0,YA<<1|0,((YA<<1|0)<0)<<31>>31|0),Ng=0|o(),pA=0|NB(19*NI|0,((19*NI|0)<0)<<31>>31|0,0|YA,((0|YA)<0)<<31>>31|0),fg=0|o(),AA=0|NB(19*kg|0,0|bg,YA<<1|0,((YA<<1|0)<0)<<31>>31|0),Ag=0|o(),M=0|NB(19*eg|0,0|og,0|YA,((0|YA)<0)<<31>>31|0),MI=0|o(),oI=0|NB(19*KI|0,0|qI,YA<<1|0,((YA<<1|0)<0)<<31>>31|0),zA=0|o(),tA=0|NB(19*uI|0,0|DI,0|YA,((0|YA)<0)<<31>>31|0),rg=0|o(),g=0|NB(19*RA|0,0|cI,YA<<1|0,((YA<<1|0)<0)<<31>>31|0),YA=0|o(),w=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|lI,((0|lI)<0)<<31>>31|0),fI=0|o(),_=0|NB(0|Lg,((0|Lg)<0)<<31>>31|0,0|lI,((0|lI)<0)<<31>>31|0),i=0|o(),JA=0|NB(19*ug|0,((19*ug|0)<0)<<31>>31|0,0|lI,((0|lI)<0)<<31>>31|0),Rg=0|o(),fA=0|NB(19*Bg|0,((19*Bg|0)<0)<<31>>31|0,0|lI,((0|lI)<0)<<31>>31|0),wg=0|o(),IA=0|NB(19*NI|0,((19*NI|0)<0)<<31>>31|0,0|lI,((0|lI)<0)<<31>>31|0),Ig=0|o(),J=0|NB(19*kg|0,0|bg,0|lI,((0|lI)<0)<<31>>31|0),JI=0|o(),wA=0|NB(19*eg|0,0|og,0|lI,((0|lI)<0)<<31>>31|0),Fg=0|o(),rA=0|NB(19*KI|0,0|qI,0|lI,((0|lI)<0)<<31>>31|0),Qg=0|o(),P=0|NB(19*uI|0,0|DI,0|lI,((0|lI)<0)<<31>>31|0),PI=0|o(),lI=0|NB(19*RA|0,0|cI,0|lI,((0|lI)<0)<<31>>31|0),wI=0|o(),eI=0|NB(0|eI,((0|eI)<0)<<31>>31|0,0|iI,((0|iI)<0)<<31>>31|0),QI=0|o(),Lg=0|NB(19*Lg|0,((19*Lg|0)<0)<<31>>31|0,iI<<1|0,((iI<<1|0)<0)<<31>>31|0),NA=0|o(),ug=0|NB(19*ug|0,((19*ug|0)<0)<<31>>31|0,0|iI,((0|iI)<0)<<31>>31|0),lg=0|o(),Bg=0|NB(19*Bg|0,((19*Bg|0)<0)<<31>>31|0,iI<<1|0,((iI<<1|0)<0)<<31>>31|0),gg=0|o(),NI=0|NB(19*NI|0,((19*NI|0)<0)<<31>>31|0,0|iI,((0|iI)<0)<<31>>31|0),vI=0|o(),bg=0|NB(19*kg|0,0|bg,iI<<1|0,((iI<<1|0)<0)<<31>>31|0),kg=0|o(),og=0|NB(19*eg|0,0|og,0|iI,((0|iI)<0)<<31>>31|0),eg=0|o(),qI=0|NB(19*KI|0,0|qI,iI<<1|0,((iI<<1|0)<0)<<31>>31|0),KI=0|o(),DI=0|NB(19*uI|0,0|DI,0|iI,((0|iI)<0)<<31>>31|0),uI=0|o(),iI=0|NB(19*RA|0,0|cI,iI<<1|0,((iI<<1|0)<0)<<31>>31|0),cI=0|o(),I=0|bC(0|(xg=0|bC(0|(Ug=0|bC(0|(Mg=0|bC(0|(Jg=0|bC(0|(vg=0|bC(0|(Ng=0|bC(0|(Rg=0|bC(0|(Yg=0|bC(0|Lg,0|NA,0|vA,0|Yg)),0|o(),0|JA,0|Rg)),0|o(),0|MA,0|Ng)),0|o(),0|UA,0|vg)),0|o(),0|xA,0|Jg)),0|o(),0|SA,0|Mg)),0|o(),0|GA,0|Ug)),0|o(),0|HA,0|xg)),0|o(),0|TA,0|I),TA=0|o(),mg=0|bC(0|dA,0|bA,0|Dg,0|mg),Dg=0|o(),LA=0|bC(0|(WA=0|bC(0|(zA=0|bC(0|(Fg=0|bC(0|(kg=0|bC(0|(dg=0|bC(0|(Hg=0|bC(0|(Gg=0|bC(0|(Sg=0|bC(0|kA,0|FA,0|mA,0|Sg)),0|o(),0|DA,0|Gg)),0|o(),0|uA,0|Hg)),0|o(),0|lA,0|dg)),0|o(),0|bg,0|kg)),0|o(),0|wA,0|Fg)),0|o(),0|oI,0|zA)),0|o(),0|VA,0|WA)),0|o(),0|ZA,0|LA),ZA=0|o(),zA=0|KB(0|(WA=0|bC(0|I,0|TA,33554432,0)),0|(VA=0|o()),26),oI=0|o(),oI=0|bC(0|(jA=0|bC(0|(sg=0|bC(0|(yg=0|bC(0|(hg=0|bC(0|(pg=0|bC(0|(fg=0|bC(0|(wg=0|bC(0|(lg=0|bC(0|mg,0|Dg,0|ug,0|lg)),0|o(),0|fA,0|wg)),0|o(),0|pA,0|fg)),0|o(),0|hA,0|pg)),0|o(),0|yA,0|hg)),0|o(),0|sA,0|yg)),0|o(),0|nA,0|sg)),0|o(),0|XA,0|jA)),0|o(),0|zA,0|oI),zA=0|o(),VA=0|FC(0|I,0|TA,-67108864&WA|0,0|VA),WA=0|o(),jA=0|KB(0|(TA=0|bC(0|LA,0|ZA,33554432,0)),0|(I=0|o()),26),XA=0|o(),XA=0|bC(0|(KA=0|bC(0|(rg=0|bC(0|(Qg=0|bC(0|(eg=0|bC(0|(cg=0|bC(0|(ig=0|bC(0|(_g=0|bC(0|(Eg=0|bC(0|(ng=0|bC(0|EA,0|_A,0|iA,0|ng)),0|o(),0|cA,0|Eg)),0|o(),0|oA,0|_g)),0|o(),0|eA,0|ig)),0|o(),0|QA,0|cg)),0|o(),0|og,0|eg)),0|o(),0|rA,0|Qg)),0|o(),0|tA,0|rg)),0|o(),0|tg,0|KA)),0|o(),0|jA,0|XA),jA=0|o(),I=0|FC(0|LA,0|ZA,-67108864&TA|0,0|I),TA=0|o(),LA=0|KB(0|(ZA=0|bC(0|oI,0|zA,16777216,0)),0|o(),25),KA=0|o(),KA=0|bC(0|(qA=0|bC(0|(ZI=0|bC(0|(OI=0|bC(0|($I=0|bC(0|(Ag=0|bC(0|(Ig=0|bC(0|(gg=0|bC(0|(Cg=0|bC(0|(ag=0|bC(0|aA,0|CA,0|BA,0|ag)),0|o(),0|gA,0|Cg)),0|o(),0|Bg,0|gg)),0|o(),0|IA,0|Ig)),0|o(),0|AA,0|Ag)),0|o(),0|$,0|$I)),0|o(),0|O,0|OI)),0|o(),0|Z,0|ZI)),0|o(),0|OA,0|qA)),0|o(),0|LA,0|KA),LA=0|o(),ZA=0|FC(0|oI,0|zA,-33554432&ZA|0,0),zA=0|o(),qA=0|KB(0|(oI=0|bC(0|XA,0|jA,16777216,0)),0|o(),25),OA=0|o(),OA=0|bC(0|(YA=0|bC(0|(PI=0|bC(0|(KI=0|bC(0|(XI=0|bC(0|(jI=0|bC(0|(TI=0|bC(0|(VI=0|bC(0|(WI=0|bC(0|(zI=0|bC(0|z,0|W,0|V,0|zI)),0|o(),0|T,0|WI)),0|o(),0|j,0|VI)),0|o(),0|X,0|TI)),0|o(),0|q,0|jI)),0|o(),0|K,0|XI)),0|o(),0|qI,0|KI)),0|o(),0|P,0|PI)),0|o(),0|g,0|YA)),0|o(),0|qA,0|OA),qA=0|o(),oI=0|FC(0|XA,0|jA,-33554432&oI|0,0),jA=0|o(),YA=0|KB(0|(XA=0|bC(0|KA,0|LA,33554432,0)),0|o(),26),g=0|o(),g=0|bC(0|(PA=0|bC(0|(xI=0|bC(0|(UI=0|bC(0|(MI=0|bC(0|(JI=0|bC(0|(vI=0|bC(0|(RI=0|bC(0|(YI=0|bC(0|(LI=0|bC(0|L,0|Y,0|R,0|LI)),0|o(),0|N,0|YI)),0|o(),0|v,0|RI)),0|o(),0|NI,0|vI)),0|o(),0|J,0|JI)),0|o(),0|M,0|MI)),0|o(),0|U,0|UI)),0|o(),0|x,0|xI)),0|o(),0|SI,0|PA)),0|o(),0|YA,0|g),YA=0|o(),XA=0|FC(0|KA,0|LA,-67108864&XA|0,0),o(),KA=0|KB(0|(LA=0|bC(0|OA,0|qA,33554432,0)),0|o(),26),PA=0|o(),PA=0|bC(0|(wI=0|bC(0|(uI=0|bC(0|(mI=0|bC(0|(FI=0|bC(0|(kI=0|bC(0|(bI=0|bC(0|(dI=0|bC(0|(HI=0|bC(0|(GI=0|bC(0|S,0|G,0|H,0|GI)),0|o(),0|d,0|HI)),0|o(),0|b,0|dI)),0|o(),0|k,0|bI)),0|o(),0|F,0|kI)),0|o(),0|m,0|FI)),0|o(),0|D,0|mI)),0|o(),0|DI,0|uI)),0|o(),0|lI,0|wI)),0|o(),0|KA,0|PA),KA=0|o(),LA=0|FC(0|OA,0|qA,-67108864&LA|0,0),o(),TA=0|bC(0|(OA=0|KB(0|(qA=0|bC(0|g,0|YA,16777216,0)),0|o(),25)),0|o(),0|I,0|TA),I=0|o(),qA=0|FC(0|g,0|YA,-33554432&qA|0,0),o(),g=0|KB(0|(YA=0|bC(0|PA,0|KA,16777216,0)),0|o(),25),OA=0|o(),OA=0|bC(0|(cI=0|bC(0|(_I=0|bC(0|(EI=0|bC(0|(nI=0|bC(0|(sI=0|bC(0|(yI=0|bC(0|(hI=0|bC(0|(pI=0|bC(0|(fI=0|bC(0|u,0|l,0|w,0|fI)),0|o(),0|f,0|pI)),0|o(),0|p,0|hI)),0|o(),0|h,0|yI)),0|o(),0|y,0|sI)),0|o(),0|s,0|nI)),0|o(),0|n,0|EI)),0|o(),0|E,0|_I)),0|o(),0|iI,0|cI)),0|o(),0|g,0|OA),g=0|o(),YA=0|FC(0|PA,0|KA,-33554432&YA|0,0),o(),PA=0|bC(0|oI,0|jA,0|(PA=0|CC(0|(KA=0|bC(0|TA,0|I,33554432,0)),0|o(),26)),0|o()),o(),KA=0|FC(0|TA,0|I,-67108864&KA|0,0),o(),TA=0|KB(0|(I=0|bC(0|OA,0|g,33554432,0)),0|o(),26),jA=0|o(),jA=0|bC(0|($A=0|bC(0|(II=0|bC(0|(gI=0|bC(0|(BI=0|bC(0|(CI=0|bC(0|(aI=0|bC(0|(tI=0|bC(0|(rI=0|bC(0|(QI=0|bC(0|_,0|i,0|eI,0|QI)),0|o(),0|c,0|rI)),0|o(),0|e,0|tI)),0|o(),0|Q,0|aI)),0|o(),0|r,0|CI)),0|o(),0|t,0|BI)),0|o(),0|C,0|gI)),0|o(),0|B,0|II)),0|o(),0|AI,0|$A)),0|o(),0|TA,0|jA),TA=0|o(),I=0|FC(0|OA,0|g,-67108864&I|0,0),o(),WA=0|bC(0|(OA=0|NB(0|(OA=0|KB(0|(g=0|bC(0|jA,0|TA,16777216,0)),0|o(),25)),0|o(),19,0)),0|o(),0|VA,0|WA),VA=0|o(),g=0|FC(0|jA,0|TA,-33554432&g|0,0),o(),jA=0|bC(0|ZA,0|zA,0|(jA=0|CC(0|(TA=0|bC(0|WA,0|VA,33554432,0)),0|o(),26)),0|o()),o(),TA=0|FC(0|WA,0|VA,-67108864&TA|0,0),o(),a[A>>2]=TA,a[A+4>>2]=jA,a[A+8>>2]=XA,a[A+12>>2]=qA,a[A+16>>2]=KA,a[A+20>>2]=PA,a[A+24>>2]=LA,a[A+28>>2]=YA,a[A+32>>2]=I,a[A+36>>2]=g}function F(A,I,g){A|=0,g|=0;var B,C,t=0,r=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0;B=h,C=h=h+63&-64,h=h+2048|0,da(C+1024|0,I|=0),Pg(C+1024|0,A),da(C,C+1024|0),Pg(C,g),A=0;do{r=0|a[C+1024+((4|(I=A<<4))<<3)>>2],Q=0|a[C+1024+((4|I)<<3)+4>>2],M=0|kg(0|a[C+1024+(I<<3)>>2],0|a[C+1024+(I<<3)+4>>2],r,Q),R=0|o(),H=0|bB(a[C+1024+((12|I)<<3)>>2]^M,a[C+1024+((12|I)<<3)+4>>2]^R,32),D=0|o(),D=0|bB((R=0|kg(M,R,Q=0|bB((w=0|kg(0|a[C+1024+((8|I)<<3)>>2],0|a[C+1024+((8|I)<<3)+4>>2],H,D))^r,(f=0|o())^Q,24),r=0|o()))^H,(M=0|o())^D,16),H=0|o(),a[C+1024+((12|I)<<3)>>2]=D,a[C+1024+((12|I)<<3)+4>>2]=H,f=0|kg(w,f,D,H),w=0|o(),a[C+1024+((8|I)<<3)>>2]=f,a[C+1024+((8|I)<<3)+4>>2]=w,r=0|bB(f^Q,w^r,63),Q=0|o(),a[C+1024+((4|I)<<3)>>2]=r,a[C+1024+((4|I)<<3)+4>>2]=Q,x=0|a[C+1024+((5|I)<<3)>>2],U=0|a[C+1024+((5|I)<<3)+4>>2],k=0|kg(0|a[C+1024+((1|I)<<3)>>2],0|a[C+1024+((1|I)<<3)+4>>2],x,U),G=0|o(),l=0|bB(a[C+1024+((13|I)<<3)>>2]^k,a[C+1024+((13|I)<<3)+4>>2]^G,32),n=0|o(),c=0|kg(i=0|kg(0|a[C+1024+((9|I)<<3)>>2],0|a[C+1024+((9|I)<<3)+4>>2],l,n),c=0|o(),n=0|bB((G=0|kg(k,G,U=0|bB(i^x,c^U,24),x=0|o()))^l,(k=0|o())^n,16),l=0|o()),i=0|o(),a[C+1024+((9|I)<<3)>>2]=c,a[C+1024+((9|I)<<3)+4>>2]=i,x=0|bB(c^U,i^x,63),U=0|o(),m=0|a[C+1024+((6|I)<<3)>>2],F=0|a[C+1024+((6|I)<<3)+4>>2],p=0|kg(0|a[C+1024+((2|I)<<3)>>2],0|a[C+1024+((2|I)<<3)+4>>2],m,F),u=0|o(),_=0|bB(a[C+1024+((14|I)<<3)>>2]^p,a[C+1024+((14|I)<<3)+4>>2]^u,32),t=0|o(),m=0|bB((J=0|kg(v=0|kg(0|a[C+1024+((10|I)<<3)>>2],0|a[C+1024+((10|I)<<3)+4>>2],_,t),J=0|o(),t=0|bB((u=0|kg(p,u,F=0|bB(v^m,J^F,24),m=0|o()))^_,(p=0|o())^t,16),_=0|o()))^F,(v=0|o())^m,63),F=0|o(),s=0|a[C+1024+((7|I)<<3)>>2],y=0|a[C+1024+((7|I)<<3)+4>>2],e=0|kg(0|a[C+1024+((3|I)<<3)>>2],0|a[C+1024+((3|I)<<3)+4>>2],s,y),E=0|o(),N=0|bB(a[C+1024+((15|I)<<3)>>2]^e,a[C+1024+((15|I)<<3)+4>>2]^E,32),S=0|o(),s=0|bB((b=0|kg(d=0|kg(0|a[C+1024+((11|I)<<3)>>2],0|a[C+1024+((11|I)<<3)+4>>2],N,S),b=0|o(),S=0|bB((E=0|kg(e,E,y=0|bB(d^s,b^y,24),s=0|o()))^N,(e=0|o())^S,16),N=0|o()))^y,(d=0|o())^s,63),y=0|o(),R=0|kg(M=0|kg(R,M,x,U),R=0|o(),U=0|bB((v=0|kg(J,v,N=0|bB(M^S,R^N,32),S=0|o()))^x,(J=0|o())^U,24),x=0|o()),M=0|o(),a[C+1024+(I<<3)>>2]=R,a[C+1024+(I<<3)+4>>2]=M,S=0|bB(R^N,M^S,16),M=0|o(),a[C+1024+((15|I)<<3)>>2]=S,a[C+1024+((15|I)<<3)+4>>2]=M,M=0|kg(v,J,S,M),S=0|o(),a[C+1024+((10|I)<<3)>>2]=M,a[C+1024+((10|I)<<3)+4>>2]=S,x=0|bB(M^U,S^x,63),S=0|o(),a[C+1024+((5|I)<<3)>>2]=x,a[C+1024+((5|I)<<3)+4>>2]=S,G=0|kg(k=0|kg(G,k,m,F),G=0|o(),F=0|bB((d=0|kg(b,d,H=0|bB(k^D,G^H,32),D=0|o()))^m,(b=0|o())^F,24),m=0|o()),k=0|o(),a[C+1024+((1|I)<<3)>>2]=G,a[C+1024+((1|I)<<3)+4>>2]=k,D=0|bB(G^H,k^D,16),k=0|o(),a[C+1024+((12|I)<<3)>>2]=D,a[C+1024+((12|I)<<3)+4>>2]=k,k=0|kg(d,b,D,k),D=0|o(),a[C+1024+((11|I)<<3)>>2]=k,a[C+1024+((11|I)<<3)+4>>2]=D,m=0|bB(k^F,D^m,63),D=0|o(),a[C+1024+((6|I)<<3)>>2]=m,a[C+1024+((6|I)<<3)+4>>2]=D,u=0|kg(p=0|kg(u,p,s,y),u=0|o(),y=0|bB((w=0|kg(f,w,l=0|bB(p^n,u^l,32),n=0|o()))^s,(f=0|o())^y,24),s=0|o()),p=0|o(),a[C+1024+((2|I)<<3)>>2]=u,a[C+1024+((2|I)<<3)+4>>2]=p,n=0|bB(u^l,p^n,16),p=0|o(),a[C+1024+((13|I)<<3)>>2]=n,a[C+1024+((13|I)<<3)+4>>2]=p,p=0|kg(w,f,n,p),n=0|o(),a[C+1024+((8|I)<<3)>>2]=p,a[C+1024+((8|I)<<3)+4>>2]=n,s=0|bB(p^y,n^s,63),n=0|o(),a[C+1024+((7|I)<<3)>>2]=s,a[C+1024+((7|I)<<3)+4>>2]=n,E=0|kg(e=0|kg(E,e,r,Q),E=0|o(),Q=0|bB((i=0|kg(c,i,_=0|bB(e^t,E^_,32),t=0|o()))^r,(c=0|o())^Q,24),r=0|o()),e=0|o(),a[C+1024+((3|I)<<3)>>2]=E,a[C+1024+((3|I)<<3)+4>>2]=e,t=0|bB(E^_,e^t,16),e=0|o(),a[C+1024+((14|I)<<3)>>2]=t,a[C+1024+((14|I)<<3)+4>>2]=e,e=0|kg(i,c,t,e),t=0|o(),a[C+1024+((9|I)<<3)>>2]=e,a[C+1024+((9|I)<<3)+4>>2]=t,r=0|bB(e^Q,t^r,63),t=0|o(),a[C+1024+((4|I)<<3)>>2]=r,a[C+1024+((4|I)<<3)+4>>2]=t,A=A+1|0}while(8!=(0|A));A=0;do{v=0|a[(J=C+1024+(32+(R=A<<1)<<3)|0)>>2],J=0|a[J+4>>2],e=0|kg(0|a[C+1024+(R<<3)>>2],0|a[C+1024+(R<<3)+4>>2],v,J),I=0|o(),n=0|bB(a[(n=C+1024+(R+96<<3)|0)>>2]^e,a[n+4>>2]^I,32),w=0|o(),w=0|bB((I=0|kg(e,I,J=0|bB((m=0|kg(0|a[(m=C+1024+(R+64<<3)|0)>>2],0|a[m+4>>2],n,w))^v,(F=0|o())^J,24),v=0|o()))^n,(e=0|o())^w,16),n=0|o(),a[(_=C+1024+(R+96<<3)|0)>>2]=w,a[_+4>>2]=n,F=0|kg(m,F,w,n),m=0|o(),a[(_=C+1024+(R+64<<3)|0)>>2]=F,a[_+4>>2]=m,v=0|bB(F^J,m^v,63),J=0|o(),a[(_=C+1024+(R+32<<3)|0)>>2]=v,a[_+4>>2]=J,c=0|a[(_=C+1024+(R+33<<3)|0)>>2],_=0|a[_+4>>2],p=0|kg(0|a[C+1024+((1|R)<<3)>>2],0|a[C+1024+((1|R)<<3)+4>>2],c,_),E=0|o(),D=0|bB(a[(D=C+1024+(R+97<<3)|0)>>2]^p,a[D+4>>2]^E,32),d=0|o(),U=0|kg(x=0|kg(0|a[(x=C+1024+(R+65<<3)|0)>>2],0|a[x+4>>2],D,d),U=0|o(),d=0|bB((E=0|kg(p,E,_=0|bB(x^c,U^_,24),c=0|o()))^D,(p=0|o())^d,16),D=0|o()),x=0|o(),a[(k=C+1024+(R+65<<3)|0)>>2]=U,a[k+4>>2]=x,c=0|bB(U^_,x^c,63),_=0|o(),k=C+1024+(R+16<<3)|0,f=0|a[(l=C+1024+(R+48<<3)|0)>>2],l=0|a[l+4>>2],k=0|kg(0|a[k>>2],0|a[k+4>>2],f,l),u=0|o(),S=0|bB(a[(S=C+1024+(R+112<<3)|0)>>2]^k,a[S+4>>2]^u,32),N=0|o(),f=0|bB((Q=0|kg(r=0|kg(0|a[(r=C+1024+(R+80<<3)|0)>>2],0|a[r+4>>2],S,N),Q=0|o(),N=0|bB((u=0|kg(k,u,l=0|bB(r^f,Q^l,24),f=0|o()))^S,(k=0|o())^N,16),S=0|o()))^l,(r=0|o())^f,63),l=0|o(),M=C+1024+(R+17<<3)|0,b=0|a[(H=C+1024+(R+49<<3)|0)>>2],H=0|a[H+4>>2],M=0|kg(0|a[M>>2],0|a[M+4>>2],b,H),G=0|o(),t=0|bB(a[(t=C+1024+(R+113<<3)|0)>>2]^M,a[t+4>>2]^G,32),i=0|o(),b=0|bB((y=0|kg(s=0|kg(0|a[(s=C+1024+(R+81<<3)|0)>>2],0|a[s+4>>2],t,i),y=0|o(),i=0|bB((G=0|kg(M,G,H=0|bB(s^b,y^H,24),b=0|o()))^t,(M=0|o())^i,16),t=0|o()))^H,(s=0|o())^b,63),H=0|o(),I=0|kg(e=0|kg(I,e,c,_),I=0|o(),_=0|bB((r=0|kg(Q,r,t=0|bB(e^i,I^t,32),i=0|o()))^c,(Q=0|o())^_,24),c=0|o()),e=0|o(),a[C+1024+(R<<3)>>2]=I,a[C+1024+(R<<3)+4>>2]=e,i=0|bB(I^t,e^i,16),e=0|o(),a[(t=C+1024+(R+113<<3)|0)>>2]=i,a[t+4>>2]=e,e=0|kg(r,Q,i,e),i=0|o(),a[(Q=C+1024+(R+80<<3)|0)>>2]=e,a[Q+4>>2]=i,c=0|bB(e^_,i^c,63),i=0|o(),a[(_=C+1024+(R+33<<3)|0)>>2]=c,a[_+4>>2]=i,E=0|kg(p=0|kg(E,p,f,l),E=0|o(),l=0|bB((s=0|kg(y,s,n=0|bB(p^w,E^n,32),w=0|o()))^f,(y=0|o())^l,24),f=0|o()),p=0|o(),a[C+1024+((1|R)<<3)>>2]=E,a[C+1024+((1|R)<<3)+4>>2]=p,w=0|bB(E^n,p^w,16),p=0|o(),a[(n=C+1024+(R+96<<3)|0)>>2]=w,a[n+4>>2]=p,p=0|kg(s,y,w,p),w=0|o(),a[(y=C+1024+(R+81<<3)|0)>>2]=p,a[y+4>>2]=w,f=0|bB(p^l,w^f,63),w=0|o(),a[(l=C+1024+(R+48<<3)|0)>>2]=f,a[l+4>>2]=w,u=0|kg(k=0|kg(u,k,b,H),u=0|o(),H=0|bB((m=0|kg(F,m,D=0|bB(k^d,u^D,32),d=0|o()))^b,(F=0|o())^H,24),b=0|o()),k=0|o(),a[(l=C+1024+(R+16<<3)|0)>>2]=u,a[l+4>>2]=k,d=0|bB(u^D,k^d,16),k=0|o(),a[(D=C+1024+(R+97<<3)|0)>>2]=d,a[D+4>>2]=k,k=0|kg(m,F,d,k),d=0|o(),a[(F=C+1024+(R+64<<3)|0)>>2]=k,a[F+4>>2]=d,b=0|bB(k^H,d^b,63),d=0|o(),a[(H=C+1024+(R+49<<3)|0)>>2]=b,a[H+4>>2]=d,G=0|kg(M=0|kg(G,M,v,J),G=0|o(),J=0|bB((x=0|kg(U,x,S=0|bB(M^N,G^S,32),N=0|o()))^v,(U=0|o())^J,24),v=0|o()),M=0|o(),a[(H=C+1024+(R+17<<3)|0)>>2]=G,a[H+4>>2]=M,N=0|bB(G^S,M^N,16),M=0|o(),a[(S=C+1024+(R+112<<3)|0)>>2]=N,a[S+4>>2]=M,M=0|kg(x,U,N,M),N=0|o(),a[(U=C+1024+(R+65<<3)|0)>>2]=M,a[U+4>>2]=N,v=0|bB(M^J,N^v,63),N=0|o(),a[(R=C+1024+(R+32<<3)|0)>>2]=v,a[R+4>>2]=N,A=A+1|0}while(8!=(0|A));da(g,C),Pg(g,C+1024|0),h=B}function k(A,I,g){A|=0,g|=0;var B,C,t=0,r=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0;B=h,C=h=h+63&-64,h=h+2048|0,da(C+1024|0,I|=0),Pg(C+1024|0,A),da(C,C+1024|0),A=0;do{r=0|a[C+1024+((4|(I=A<<4))<<3)>>2],Q=0|a[C+1024+((4|I)<<3)+4>>2],M=0|kg(0|a[C+1024+(I<<3)>>2],0|a[C+1024+(I<<3)+4>>2],r,Q),R=0|o(),H=0|bB(a[C+1024+((12|I)<<3)>>2]^M,a[C+1024+((12|I)<<3)+4>>2]^R,32),D=0|o(),D=0|bB((R=0|kg(M,R,Q=0|bB((w=0|kg(0|a[C+1024+((8|I)<<3)>>2],0|a[C+1024+((8|I)<<3)+4>>2],H,D))^r,(f=0|o())^Q,24),r=0|o()))^H,(M=0|o())^D,16),H=0|o(),a[C+1024+((12|I)<<3)>>2]=D,a[C+1024+((12|I)<<3)+4>>2]=H,f=0|kg(w,f,D,H),w=0|o(),a[C+1024+((8|I)<<3)>>2]=f,a[C+1024+((8|I)<<3)+4>>2]=w,r=0|bB(f^Q,w^r,63),Q=0|o(),a[C+1024+((4|I)<<3)>>2]=r,a[C+1024+((4|I)<<3)+4>>2]=Q,x=0|a[C+1024+((5|I)<<3)>>2],U=0|a[C+1024+((5|I)<<3)+4>>2],k=0|kg(0|a[C+1024+((1|I)<<3)>>2],0|a[C+1024+((1|I)<<3)+4>>2],x,U),G=0|o(),l=0|bB(a[C+1024+((13|I)<<3)>>2]^k,a[C+1024+((13|I)<<3)+4>>2]^G,32),n=0|o(),c=0|kg(i=0|kg(0|a[C+1024+((9|I)<<3)>>2],0|a[C+1024+((9|I)<<3)+4>>2],l,n),c=0|o(),n=0|bB((G=0|kg(k,G,U=0|bB(i^x,c^U,24),x=0|o()))^l,(k=0|o())^n,16),l=0|o()),i=0|o(),a[C+1024+((9|I)<<3)>>2]=c,a[C+1024+((9|I)<<3)+4>>2]=i,x=0|bB(c^U,i^x,63),U=0|o(),m=0|a[C+1024+((6|I)<<3)>>2],F=0|a[C+1024+((6|I)<<3)+4>>2],p=0|kg(0|a[C+1024+((2|I)<<3)>>2],0|a[C+1024+((2|I)<<3)+4>>2],m,F),u=0|o(),_=0|bB(a[C+1024+((14|I)<<3)>>2]^p,a[C+1024+((14|I)<<3)+4>>2]^u,32),t=0|o(),m=0|bB((J=0|kg(v=0|kg(0|a[C+1024+((10|I)<<3)>>2],0|a[C+1024+((10|I)<<3)+4>>2],_,t),J=0|o(),t=0|bB((u=0|kg(p,u,F=0|bB(v^m,J^F,24),m=0|o()))^_,(p=0|o())^t,16),_=0|o()))^F,(v=0|o())^m,63),F=0|o(),s=0|a[C+1024+((7|I)<<3)>>2],y=0|a[C+1024+((7|I)<<3)+4>>2],e=0|kg(0|a[C+1024+((3|I)<<3)>>2],0|a[C+1024+((3|I)<<3)+4>>2],s,y),E=0|o(),N=0|bB(a[C+1024+((15|I)<<3)>>2]^e,a[C+1024+((15|I)<<3)+4>>2]^E,32),S=0|o(),s=0|bB((b=0|kg(d=0|kg(0|a[C+1024+((11|I)<<3)>>2],0|a[C+1024+((11|I)<<3)+4>>2],N,S),b=0|o(),S=0|bB((E=0|kg(e,E,y=0|bB(d^s,b^y,24),s=0|o()))^N,(e=0|o())^S,16),N=0|o()))^y,(d=0|o())^s,63),y=0|o(),R=0|kg(M=0|kg(R,M,x,U),R=0|o(),U=0|bB((v=0|kg(J,v,N=0|bB(M^S,R^N,32),S=0|o()))^x,(J=0|o())^U,24),x=0|o()),M=0|o(),a[C+1024+(I<<3)>>2]=R,a[C+1024+(I<<3)+4>>2]=M,S=0|bB(R^N,M^S,16),M=0|o(),a[C+1024+((15|I)<<3)>>2]=S,a[C+1024+((15|I)<<3)+4>>2]=M,M=0|kg(v,J,S,M),S=0|o(),a[C+1024+((10|I)<<3)>>2]=M,a[C+1024+((10|I)<<3)+4>>2]=S,x=0|bB(M^U,S^x,63),S=0|o(),a[C+1024+((5|I)<<3)>>2]=x,a[C+1024+((5|I)<<3)+4>>2]=S,G=0|kg(k=0|kg(G,k,m,F),G=0|o(),F=0|bB((d=0|kg(b,d,H=0|bB(k^D,G^H,32),D=0|o()))^m,(b=0|o())^F,24),m=0|o()),k=0|o(),a[C+1024+((1|I)<<3)>>2]=G,a[C+1024+((1|I)<<3)+4>>2]=k,D=0|bB(G^H,k^D,16),k=0|o(),a[C+1024+((12|I)<<3)>>2]=D,a[C+1024+((12|I)<<3)+4>>2]=k,k=0|kg(d,b,D,k),D=0|o(),a[C+1024+((11|I)<<3)>>2]=k,a[C+1024+((11|I)<<3)+4>>2]=D,m=0|bB(k^F,D^m,63),D=0|o(),a[C+1024+((6|I)<<3)>>2]=m,a[C+1024+((6|I)<<3)+4>>2]=D,u=0|kg(p=0|kg(u,p,s,y),u=0|o(),y=0|bB((w=0|kg(f,w,l=0|bB(p^n,u^l,32),n=0|o()))^s,(f=0|o())^y,24),s=0|o()),p=0|o(),a[C+1024+((2|I)<<3)>>2]=u,a[C+1024+((2|I)<<3)+4>>2]=p,n=0|bB(u^l,p^n,16),p=0|o(),a[C+1024+((13|I)<<3)>>2]=n,a[C+1024+((13|I)<<3)+4>>2]=p,p=0|kg(w,f,n,p),n=0|o(),a[C+1024+((8|I)<<3)>>2]=p,a[C+1024+((8|I)<<3)+4>>2]=n,s=0|bB(p^y,n^s,63),n=0|o(),a[C+1024+((7|I)<<3)>>2]=s,a[C+1024+((7|I)<<3)+4>>2]=n,E=0|kg(e=0|kg(E,e,r,Q),E=0|o(),Q=0|bB((i=0|kg(c,i,_=0|bB(e^t,E^_,32),t=0|o()))^r,(c=0|o())^Q,24),r=0|o()),e=0|o(),a[C+1024+((3|I)<<3)>>2]=E,a[C+1024+((3|I)<<3)+4>>2]=e,t=0|bB(E^_,e^t,16),e=0|o(),a[C+1024+((14|I)<<3)>>2]=t,a[C+1024+((14|I)<<3)+4>>2]=e,e=0|kg(i,c,t,e),t=0|o(),a[C+1024+((9|I)<<3)>>2]=e,a[C+1024+((9|I)<<3)+4>>2]=t,r=0|bB(e^Q,t^r,63),t=0|o(),a[C+1024+((4|I)<<3)>>2]=r,a[C+1024+((4|I)<<3)+4>>2]=t,A=A+1|0}while(8!=(0|A));A=0;do{v=0|a[(J=C+1024+(32+(R=A<<1)<<3)|0)>>2],J=0|a[J+4>>2],e=0|kg(0|a[C+1024+(R<<3)>>2],0|a[C+1024+(R<<3)+4>>2],v,J),I=0|o(),n=0|bB(a[(n=C+1024+(R+96<<3)|0)>>2]^e,a[n+4>>2]^I,32),w=0|o(),w=0|bB((I=0|kg(e,I,J=0|bB((m=0|kg(0|a[(m=C+1024+(R+64<<3)|0)>>2],0|a[m+4>>2],n,w))^v,(F=0|o())^J,24),v=0|o()))^n,(e=0|o())^w,16),n=0|o(),a[(_=C+1024+(R+96<<3)|0)>>2]=w,a[_+4>>2]=n,F=0|kg(m,F,w,n),m=0|o(),a[(_=C+1024+(R+64<<3)|0)>>2]=F,a[_+4>>2]=m,v=0|bB(F^J,m^v,63),J=0|o(),a[(_=C+1024+(R+32<<3)|0)>>2]=v,a[_+4>>2]=J,c=0|a[(_=C+1024+(R+33<<3)|0)>>2],_=0|a[_+4>>2],p=0|kg(0|a[C+1024+((1|R)<<3)>>2],0|a[C+1024+((1|R)<<3)+4>>2],c,_),E=0|o(),D=0|bB(a[(D=C+1024+(R+97<<3)|0)>>2]^p,a[D+4>>2]^E,32),d=0|o(),U=0|kg(x=0|kg(0|a[(x=C+1024+(R+65<<3)|0)>>2],0|a[x+4>>2],D,d),U=0|o(),d=0|bB((E=0|kg(p,E,_=0|bB(x^c,U^_,24),c=0|o()))^D,(p=0|o())^d,16),D=0|o()),x=0|o(),a[(k=C+1024+(R+65<<3)|0)>>2]=U,a[k+4>>2]=x,c=0|bB(U^_,x^c,63),_=0|o(),k=C+1024+(R+16<<3)|0,f=0|a[(l=C+1024+(R+48<<3)|0)>>2],l=0|a[l+4>>2],k=0|kg(0|a[k>>2],0|a[k+4>>2],f,l),u=0|o(),S=0|bB(a[(S=C+1024+(R+112<<3)|0)>>2]^k,a[S+4>>2]^u,32),N=0|o(),f=0|bB((Q=0|kg(r=0|kg(0|a[(r=C+1024+(R+80<<3)|0)>>2],0|a[r+4>>2],S,N),Q=0|o(),N=0|bB((u=0|kg(k,u,l=0|bB(r^f,Q^l,24),f=0|o()))^S,(k=0|o())^N,16),S=0|o()))^l,(r=0|o())^f,63),l=0|o(),M=C+1024+(R+17<<3)|0,b=0|a[(H=C+1024+(R+49<<3)|0)>>2],H=0|a[H+4>>2],M=0|kg(0|a[M>>2],0|a[M+4>>2],b,H),G=0|o(),t=0|bB(a[(t=C+1024+(R+113<<3)|0)>>2]^M,a[t+4>>2]^G,32),i=0|o(),b=0|bB((y=0|kg(s=0|kg(0|a[(s=C+1024+(R+81<<3)|0)>>2],0|a[s+4>>2],t,i),y=0|o(),i=0|bB((G=0|kg(M,G,H=0|bB(s^b,y^H,24),b=0|o()))^t,(M=0|o())^i,16),t=0|o()))^H,(s=0|o())^b,63),H=0|o(),I=0|kg(e=0|kg(I,e,c,_),I=0|o(),_=0|bB((r=0|kg(Q,r,t=0|bB(e^i,I^t,32),i=0|o()))^c,(Q=0|o())^_,24),c=0|o()),e=0|o(),a[C+1024+(R<<3)>>2]=I,a[C+1024+(R<<3)+4>>2]=e,i=0|bB(I^t,e^i,16),e=0|o(),a[(t=C+1024+(R+113<<3)|0)>>2]=i,a[t+4>>2]=e,e=0|kg(r,Q,i,e),i=0|o(),a[(Q=C+1024+(R+80<<3)|0)>>2]=e,a[Q+4>>2]=i,c=0|bB(e^_,i^c,63),i=0|o(),a[(_=C+1024+(R+33<<3)|0)>>2]=c,a[_+4>>2]=i,E=0|kg(p=0|kg(E,p,f,l),E=0|o(),l=0|bB((s=0|kg(y,s,n=0|bB(p^w,E^n,32),w=0|o()))^f,(y=0|o())^l,24),f=0|o()),p=0|o(),a[C+1024+((1|R)<<3)>>2]=E,a[C+1024+((1|R)<<3)+4>>2]=p,w=0|bB(E^n,p^w,16),p=0|o(),a[(n=C+1024+(R+96<<3)|0)>>2]=w,a[n+4>>2]=p,p=0|kg(s,y,w,p),w=0|o(),a[(y=C+1024+(R+81<<3)|0)>>2]=p,a[y+4>>2]=w,f=0|bB(p^l,w^f,63),w=0|o(),a[(l=C+1024+(R+48<<3)|0)>>2]=f,a[l+4>>2]=w,u=0|kg(k=0|kg(u,k,b,H),u=0|o(),H=0|bB((m=0|kg(F,m,D=0|bB(k^d,u^D,32),d=0|o()))^b,(F=0|o())^H,24),b=0|o()),k=0|o(),a[(l=C+1024+(R+16<<3)|0)>>2]=u,a[l+4>>2]=k,d=0|bB(u^D,k^d,16),k=0|o(),a[(D=C+1024+(R+97<<3)|0)>>2]=d,a[D+4>>2]=k,k=0|kg(m,F,d,k),d=0|o(),a[(F=C+1024+(R+64<<3)|0)>>2]=k,a[F+4>>2]=d,b=0|bB(k^H,d^b,63),d=0|o(),a[(H=C+1024+(R+49<<3)|0)>>2]=b,a[H+4>>2]=d,G=0|kg(M=0|kg(G,M,v,J),G=0|o(),J=0|bB((x=0|kg(U,x,S=0|bB(M^N,G^S,32),N=0|o()))^v,(U=0|o())^J,24),v=0|o()),M=0|o(),a[(H=C+1024+(R+17<<3)|0)>>2]=G,a[H+4>>2]=M,N=0|bB(G^S,M^N,16),M=0|o(),a[(S=C+1024+(R+112<<3)|0)>>2]=N,a[S+4>>2]=M,M=0|kg(x,U,N,M),N=0|o(),a[(U=C+1024+(R+65<<3)|0)>>2]=M,a[U+4>>2]=N,v=0|bB(M^J,N^v,63),N=0|o(),a[(R=C+1024+(R+32<<3)|0)>>2]=v,a[R+4>>2]=N,A=A+1|0}while(8!=(0|A));da(g,C),Pg(g,C+1024|0),h=B}function b(A,I){A|=0;var g,B,C,t,r,Q,e,c,i,_,E,n,s,y,h,p,f,w,l,u,D,m,F,k,b,d,H,G,S,x,U,M,J,v,N,R,Y,L,P,K,q,X,j,T,V,W,z,Z,O,$,AA,IA,gA=0,BA=0,CA=0,aA=0,tA=0,rA=0,QA=0,eA=0,oA=0,cA=0,iA=0,_A=0,EA=0,nA=0,sA=0,yA=0,hA=0,pA=0,fA=0,wA=0,lA=0,uA=0,DA=0,mA=0,FA=0,kA=0,bA=0,dA=0,HA=0,GA=0,SA=0,xA=0,UA=0,MA=0,JA=0,vA=0,NA=0,RA=0,YA=0,LA=0,PA=0,KA=0,qA=0,XA=0,jA=0,TA=0,VA=0,WA=0,zA=0,ZA=0,OA=0,$A=0,AI=0,II=0,gI=0,BI=0,CI=0;eA=0|a[(I|=0)>>2],sA=0|a[I+4>>2],_A=0|a[I+8>>2],wA=0|a[I+12>>2],BA=0|a[I+16>>2],lA=0|a[I+20>>2],yA=0|a[I+24>>2],rA=0|a[I+28>>2],tA=0|a[I+32>>2],I=0|a[I+36>>2],$=0|NB(0|eA,((0|eA)<0)<<31>>31|0,0|eA,((0|eA)<0)<<31>>31|0),CI=0|o(),T=0|NB(eA<<1|0,0|(oA=((eA<<1|0)<0)<<31>>31),0|sA,((0|sA)<0)<<31>>31|0),AI=0|o(),q=0|NB(0|_A,((0|_A)<0)<<31>>31|0,eA<<1|0,0|oA),K=0|o(),N=0|NB(0|wA,((0|wA)<0)<<31>>31|0,eA<<1|0,0|oA),v=0|o(),H=0|NB(0|BA,((0|BA)<0)<<31>>31|0,eA<<1|0,0|oA),KA=0|o(),m=0|NB(0|lA,((0|lA)<0)<<31>>31|0,eA<<1|0,0|oA),NA=0|o(),p=0|NB(0|yA,((0|yA)<0)<<31>>31|0,eA<<1|0,0|oA),UA=0|o(),E=0|NB(0|rA,((0|rA)<0)<<31>>31|0,eA<<1|0,0|oA),dA=0|o(),r=0|NB(0|tA,((0|tA)<0)<<31>>31|0,eA<<1|0,0|oA),mA=0|o(),oA=0|NB(0|I,((0|I)<0)<<31>>31|0,eA<<1|0,0|oA),eA=0|o(),P=0|NB(sA<<1|0,0|(gA=((sA<<1|0)<0)<<31>>31),0|sA,((0|sA)<0)<<31>>31|0),ZA=0|o(),J=0|NB(sA<<1|0,0|gA,0|_A,((0|_A)<0)<<31>>31|0),TA=0|o(),x=0|NB(wA<<1|0,0|(CA=((wA<<1|0)<0)<<31>>31),sA<<1|0,0|gA),S=0|o(),b=0|NB(0|BA,((0|BA)<0)<<31>>31|0,sA<<1|0,0|gA),k=0|o(),f=0|NB(lA<<1|0,((lA<<1|0)<0)<<31>>31|0,sA<<1|0,0|gA),MA=0|o(),n=0|NB(0|yA,((0|yA)<0)<<31>>31|0,sA<<1|0,0|gA),HA=0|o(),Q=0|NB(rA<<1|0,((rA<<1|0)<0)<<31>>31|0,sA<<1|0,0|gA),FA=0|o(),cA=0|NB(0|tA,((0|tA)<0)<<31>>31|0,sA<<1|0,0|gA),iA=0|o(),gA=0|NB(38*I|0,0|(nA=((38*I|0)<0)<<31>>31),sA<<1|0,0|gA),sA=0|o(),G=0|NB(0|_A,((0|_A)<0)<<31>>31|0,0|_A,((0|_A)<0)<<31>>31|0),qA=0|o(),F=0|NB(_A<<1|0,((_A<<1|0)<0)<<31>>31|0,0|wA,((0|wA)<0)<<31>>31|0),RA=0|o(),w=0|NB(0|BA,((0|BA)<0)<<31>>31|0,_A<<1|0,((_A<<1|0)<0)<<31>>31|0),JA=0|o(),h=0|NB(0|lA,((0|lA)<0)<<31>>31|0,_A<<1|0,((_A<<1|0)<0)<<31>>31|0),y=0|o(),_=0|NB(0|yA,((0|yA)<0)<<31>>31|0,_A<<1|0,((_A<<1|0)<0)<<31>>31|0),i=0|o(),g=0|NB(0|rA,((0|rA)<0)<<31>>31|0,_A<<1|0,((_A<<1|0)<0)<<31>>31|0),uA=0|o(),z=0|NB(19*tA|0,0|(xA=((19*tA|0)<0)<<31>>31),_A<<1|0,((_A<<1|0)<0)<<31>>31|0),II=0|o(),_A=0|NB(38*I|0,0|nA,0|_A,((0|_A)<0)<<31>>31|0),hA=0|o(),u=0|NB(wA<<1|0,0|CA,0|wA,((0|wA)<0)<<31>>31|0),l=0|o(),s=0|NB(wA<<1|0,0|CA,0|BA,((0|BA)<0)<<31>>31|0),GA=0|o(),e=0|NB(lA<<1|0,((lA<<1|0)<0)<<31>>31|0,wA<<1|0,0|CA),kA=0|o(),t=0|NB(0|yA,((0|yA)<0)<<31>>31|0,wA<<1|0,0|CA),C=0|o(),Z=0|NB(38*rA|0,0|(PA=((38*rA|0)<0)<<31>>31),wA<<1|0,0|CA),gI=0|o(),X=0|NB(19*tA|0,0|xA,wA<<1|0,0|CA),OA=0|o(),CA=0|NB(38*I|0,0|nA,wA<<1|0,0|CA),wA=0|o(),c=0|NB(0|BA,((0|BA)<0)<<31>>31|0,0|BA,((0|BA)<0)<<31>>31|0),bA=0|o(),B=0|NB(BA<<1|0,((BA<<1|0)<0)<<31>>31|0,0|lA,((0|lA)<0)<<31>>31|0),DA=0|o(),O=0|NB(19*yA|0,((19*yA|0)<0)<<31>>31|0,BA<<1|0,((BA<<1|0)<0)<<31>>31|0),BI=0|o(),j=0|NB(38*rA|0,0|PA,0|BA,((0|BA)<0)<<31>>31|0),$A=0|o(),R=0|NB(19*tA|0,0|xA,BA<<1|0,((BA<<1|0)<0)<<31>>31|0),VA=0|o(),BA=0|NB(38*I|0,0|nA,0|BA,((0|BA)<0)<<31>>31|0),pA=0|o(),IA=0|NB(38*lA|0,((38*lA|0)<0)<<31>>31|0,0|lA,((0|lA)<0)<<31>>31|0),AA=0|o(),W=0|NB(19*yA|0,((19*yA|0)<0)<<31>>31|0,lA<<1|0,((lA<<1|0)<0)<<31>>31|0),V=0|o(),Y=0|NB(38*rA|0,0|PA,lA<<1|0,((lA<<1|0)<0)<<31>>31|0),WA=0|o(),U=0|NB(19*tA|0,0|xA,lA<<1|0,((lA<<1|0)<0)<<31>>31|0),XA=0|o(),lA=0|NB(38*I|0,0|nA,lA<<1|0,((lA<<1|0)<0)<<31>>31|0),EA=0|o(),L=0|NB(19*yA|0,((19*yA|0)<0)<<31>>31|0,0|yA,((0|yA)<0)<<31>>31|0),zA=0|o(),M=0|NB(38*rA|0,0|PA,0|yA,((0|yA)<0)<<31>>31|0),jA=0|o(),d=0|NB(19*tA|0,0|xA,yA<<1|0,((yA<<1|0)<0)<<31>>31|0),YA=0|o(),yA=0|NB(38*I|0,0|nA,0|yA,((0|yA)<0)<<31>>31|0),QA=0|o(),PA=0|NB(38*rA|0,0|PA,0|rA,((0|rA)<0)<<31>>31|0),LA=0|o(),D=0|NB(19*tA|0,0|xA,rA<<1|0,((rA<<1|0)<0)<<31>>31|0),vA=0|o(),rA=0|NB(38*I|0,0|nA,rA<<1|0,((rA<<1|0)<0)<<31>>31|0),fA=0|o(),xA=0|NB(19*tA|0,0|xA,0|tA,((0|tA)<0)<<31>>31|0),SA=0|o(),tA=0|NB(38*I|0,0|nA,0|tA,((0|tA)<0)<<31>>31|0),aA=0|o(),I=0|NB(38*I|0,0|nA,0|I,((0|I)<0)<<31>>31|0),nA=0|o(),sA=0|bC(0|(II=0|bC(0|(gI=0|bC(0|(BI=0|bC(0|(CI=0|bC(0|IA,0|AA,0|$,0|CI)),0|o(),0|O,0|BI)),0|o(),0|Z,0|gI)),0|o(),0|z,0|II)),0|o(),0|gA,0|sA),gA=0|o(),hA=0|bC(0|(OA=0|bC(0|($A=0|bC(0|(AI=0|bC(0|W,0|V,0|T,0|AI)),0|o(),0|j,0|$A)),0|o(),0|X,0|OA)),0|o(),0|_A,0|hA),_A=0|o(),wA=0|bC(0|(VA=0|bC(0|(WA=0|bC(0|(zA=0|bC(0|(ZA=0|bC(0|q,0|K,0|P,0|ZA)),0|o(),0|L,0|zA)),0|o(),0|Y,0|WA)),0|o(),0|R,0|VA)),0|o(),0|CA,0|wA),CA=0|o(),pA=0|bC(0|(XA=0|bC(0|(jA=0|bC(0|(TA=0|bC(0|N,0|v,0|J,0|TA)),0|o(),0|M,0|jA)),0|o(),0|U,0|XA)),0|o(),0|BA,0|pA),BA=0|o(),EA=0|bC(0|(YA=0|bC(0|(LA=0|bC(0|(KA=0|bC(0|(qA=0|bC(0|x,0|S,0|G,0|qA)),0|o(),0|H,0|KA)),0|o(),0|PA,0|LA)),0|o(),0|d,0|YA)),0|o(),0|lA,0|EA),lA=0|o(),QA=0|bC(0|(vA=0|bC(0|(NA=0|bC(0|(RA=0|bC(0|b,0|k,0|F,0|RA)),0|o(),0|m,0|NA)),0|o(),0|D,0|vA)),0|o(),0|yA,0|QA),yA=0|o(),fA=0|bC(0|(SA=0|bC(0|(UA=0|bC(0|(MA=0|bC(0|(JA=0|bC(0|u,0|l,0|w,0|JA)),0|o(),0|f,0|MA)),0|o(),0|p,0|UA)),0|o(),0|xA,0|SA)),0|o(),0|rA,0|fA),rA=0|o(),aA=0|bC(0|(dA=0|bC(0|(HA=0|bC(0|(GA=0|bC(0|h,0|y,0|s,0|GA)),0|o(),0|n,0|HA)),0|o(),0|E,0|dA)),0|o(),0|tA,0|aA),tA=0|o(),nA=0|bC(0|(mA=0|bC(0|(FA=0|bC(0|(kA=0|bC(0|(bA=0|bC(0|_,0|i,0|c,0|bA)),0|o(),0|e,0|kA)),0|o(),0|Q,0|FA)),0|o(),0|r,0|mA)),0|o(),0|I,0|nA),I=0|o(),eA=0|bC(0|(iA=0|bC(0|(uA=0|bC(0|(DA=0|bC(0|t,0|C,0|B,0|DA)),0|o(),0|g,0|uA)),0|o(),0|cA,0|iA)),0|o(),0|oA,0|eA),oA=0|o(),gA=0|$B(0|sA,0|gA,1),sA=0|o(),_A=0|$B(0|hA,0|_A,1),hA=0|o(),CA=0|$B(0|wA,0|CA,1),wA=0|o(),BA=0|$B(0|pA,0|BA,1),pA=0|o(),lA=0|$B(0|EA,0|lA,1),EA=0|o(),yA=0|$B(0|QA,0|yA,1),QA=0|o(),rA=0|$B(0|fA,0|rA,1),fA=0|o(),tA=0|$B(0|aA,0|tA,1),aA=0|o(),I=0|$B(0|nA,0|I,1),nA=0|o(),oA=0|$B(0|eA,0|oA,1),eA=0|o(),hA=0|bC(0|(uA=0|KB(0|(iA=0|bC(0|gA,0|sA,33554432,0)),0|(cA=0|o()),26)),0|o(),0|_A,0|hA),_A=0|o(),cA=0|FC(0|gA,0|sA,-67108864&iA|0,0|cA),iA=0|o(),QA=0|bC(0|(uA=0|KB(0|(sA=0|bC(0|lA,0|EA,33554432,0)),0|(gA=0|o()),26)),0|o(),0|yA,0|QA),yA=0|o(),gA=0|FC(0|lA,0|EA,-67108864&sA|0,0|gA),sA=0|o(),wA=0|bC(0|(lA=0|KB(0|(EA=0|bC(0|hA,0|_A,16777216,0)),0|o(),25)),0|o(),0|CA,0|wA),CA=0|o(),EA=0|FC(0|hA,0|_A,-33554432&EA|0,0),_A=0|o(),fA=0|bC(0|(lA=0|KB(0|(hA=0|bC(0|QA,0|yA,16777216,0)),0|o(),25)),0|o(),0|rA,0|fA),rA=0|o(),hA=0|FC(0|QA,0|yA,-33554432&hA|0,0),yA=0|o(),pA=0|bC(0|(lA=0|KB(0|(QA=0|bC(0|wA,0|CA,33554432,0)),0|o(),26)),0|o(),0|BA,0|pA),BA=0|o(),QA=0|FC(0|wA,0|CA,-67108864&QA|0,0),o(),aA=0|bC(0|(wA=0|KB(0|(CA=0|bC(0|fA,0|rA,33554432,0)),0|o(),26)),0|o(),0|tA,0|aA),tA=0|o(),CA=0|FC(0|fA,0|rA,-67108864&CA|0,0),o(),sA=0|bC(0|(fA=0|KB(0|(rA=0|bC(0|pA,0|BA,16777216,0)),0|o(),25)),0|o(),0|gA,0|sA),gA=0|o(),rA=0|FC(0|pA,0|BA,-33554432&rA|0,0),o(),nA=0|bC(0|(pA=0|KB(0|(BA=0|bC(0|aA,0|tA,16777216,0)),0|o(),25)),0|o(),0|I,0|nA),I=0|o(),BA=0|FC(0|aA,0|tA,-33554432&BA|0,0),o(),aA=0|bC(0|hA,0|yA,0|(aA=0|CC(0|(tA=0|bC(0|sA,0|gA,33554432,0)),0|o(),26)),0|o()),o(),tA=0|FC(0|sA,0|gA,-67108864&tA|0,0),o(),eA=0|bC(0|(sA=0|KB(0|(gA=0|bC(0|nA,0|I,33554432,0)),0|o(),26)),0|o(),0|oA,0|eA),oA=0|o(),gA=0|FC(0|nA,0|I,-67108864&gA|0,0),o(),iA=0|bC(0|(nA=0|NB(0|(nA=0|KB(0|(I=0|bC(0|eA,0|oA,16777216,0)),0|o(),25)),0|o(),19,0)),0|o(),0|cA,0|iA),cA=0|o(),I=0|FC(0|eA,0|oA,-33554432&I|0,0),o(),eA=0|bC(0|EA,0|_A,0|(eA=0|CC(0|(oA=0|bC(0|iA,0|cA,33554432,0)),0|o(),26)),0|o()),o(),oA=0|FC(0|iA,0|cA,-67108864&oA|0,0),o(),a[A>>2]=oA,a[A+4>>2]=eA,a[A+8>>2]=QA,a[A+12>>2]=rA,a[A+16>>2]=tA,a[A+20>>2]=aA,a[A+24>>2]=CA,a[A+28>>2]=BA,a[A+32>>2]=gA,a[A+36>>2]=I}function d(A,I){A|=0;var g,B,C,t,r,Q,e,c,i,_,E,n,s,y,h,p,f,w,l,u,D,m,F,k,b,d,H,G,S,x,U,M,J,v,N,R,Y,L,P,K,q,X,j,T,V,W,z,Z,O,$,AA=0,IA=0,gA=0,BA=0,CA=0,aA=0,tA=0,rA=0,QA=0,eA=0,oA=0,cA=0,iA=0,_A=0,EA=0,nA=0,sA=0,yA=0,hA=0,pA=0,fA=0,wA=0,lA=0,uA=0,DA=0,mA=0,FA=0,kA=0,bA=0,dA=0,HA=0,GA=0,SA=0,xA=0,UA=0,MA=0,JA=0,vA=0,NA=0,RA=0,YA=0,LA=0,PA=0,KA=0,qA=0,XA=0,jA=0,TA=0,VA=0,WA=0,zA=0,ZA=0,OA=0,$A=0,AI=0,II=0,gI=0,BI=0,CI=0;EA=0|a[(I|=0)>>2],AA=0|a[I+4>>2],tA=0|a[I+8>>2],aA=0|a[I+12>>2],GA=0|a[I+16>>2],iA=0|a[I+20>>2],jA=0|a[I+24>>2],IA=0|a[I+28>>2],kA=0|a[I+32>>2],wA=0|a[I+36>>2],Z=0|NB(0|EA,((0|EA)<0)<<31>>31|0,0|EA,((0|EA)<0)<<31>>31|0),CI=0|o(),v=0|NB(EA<<1|0,0|(nA=((EA<<1|0)<0)<<31>>31),0|AA,((0|AA)<0)<<31>>31|0),OA=0|o(),T=0|NB(0|tA,((0|tA)<0)<<31>>31|0,EA<<1|0,0|nA),j=0|o(),X=0|NB(0|aA,((0|aA)<0)<<31>>31|0,EA<<1|0,0|nA),q=0|o(),Y=0|NB(0|GA,((0|GA)<0)<<31>>31|0,EA<<1|0,0|nA),$A=0|o(),G=0|NB(0|iA,((0|iA)<0)<<31>>31|0,EA<<1|0,0|nA),VA=0|o(),l=0|NB(0|jA,((0|jA)<0)<<31>>31|0,EA<<1|0,0|nA),NA=0|o(),n=0|NB(0|IA,((0|IA)<0)<<31>>31|0,EA<<1|0,0|nA),bA=0|o(),Q=0|NB(0|kA,((0|kA)<0)<<31>>31|0,EA<<1|0,0|nA),lA=0|o(),nA=0|NB(0|wA,((0|wA)<0)<<31>>31|0,EA<<1|0,0|nA),EA=0|o(),qA=0|NB(AA<<1|0,0|(QA=((AA<<1|0)<0)<<31>>31),0|AA,((0|AA)<0)<<31>>31|0),XA=0|o(),UA=0|NB(AA<<1|0,0|QA,0|tA,((0|tA)<0)<<31>>31|0),MA=0|o(),K=0|NB(aA<<1|0,0|(_A=((aA<<1|0)<0)<<31>>31),AA<<1|0,0|QA),P=0|o(),U=0|NB(0|GA,((0|GA)<0)<<31>>31|0,AA<<1|0,0|QA),x=0|o(),u=0|NB(iA<<1|0,((iA<<1|0)<0)<<31>>31|0,AA<<1|0,0|QA),RA=0|o(),s=0|NB(0|jA,((0|jA)<0)<<31>>31|0,AA<<1|0,0|QA),dA=0|o(),e=0|NB(IA<<1|0,((IA<<1|0)<0)<<31>>31|0,AA<<1|0,0|QA),uA=0|o(),g=0|NB(0|kA,((0|kA)<0)<<31>>31|0,AA<<1|0,0|QA),sA=0|o(),QA=0|NB(38*wA|0,0|(fA=((38*wA|0)<0)<<31>>31),AA<<1|0,0|QA),AA=0|o(),L=0|NB(0|tA,((0|tA)<0)<<31>>31|0,0|tA,((0|tA)<0)<<31>>31|0),AI=0|o(),S=0|NB(tA<<1|0,((tA<<1|0)<0)<<31>>31|0,0|aA,((0|aA)<0)<<31>>31|0),WA=0|o(),D=0|NB(0|GA,((0|GA)<0)<<31>>31|0,tA<<1|0,((tA<<1|0)<0)<<31>>31|0),YA=0|o(),p=0|NB(0|iA,((0|iA)<0)<<31>>31|0,tA<<1|0,((tA<<1|0)<0)<<31>>31|0),h=0|o(),E=0|NB(0|jA,((0|jA)<0)<<31>>31|0,tA<<1|0,((tA<<1|0)<0)<<31>>31|0),_=0|o(),B=0|NB(0|IA,((0|IA)<0)<<31>>31|0,tA<<1|0,((tA<<1|0)<0)<<31>>31|0),yA=0|o(),V=0|NB(19*kA|0,0|(vA=((19*kA|0)<0)<<31>>31),tA<<1|0,((tA<<1|0)<0)<<31>>31|0),II=0|o(),tA=0|NB(38*wA|0,0|fA,0|tA,((0|tA)<0)<<31>>31|0),rA=0|o(),F=0|NB(aA<<1|0,0|_A,0|aA,((0|aA)<0)<<31>>31|0),m=0|o(),y=0|NB(aA<<1|0,0|_A,0|GA,((0|GA)<0)<<31>>31|0),HA=0|o(),c=0|NB(iA<<1|0,((iA<<1|0)<0)<<31>>31|0,aA<<1|0,0|_A),DA=0|o(),r=0|NB(0|jA,((0|jA)<0)<<31>>31|0,aA<<1|0,0|_A),t=0|o(),W=0|NB(38*IA|0,0|(pA=((38*IA|0)<0)<<31>>31),aA<<1|0,0|_A),gI=0|o(),M=0|NB(19*kA|0,0|vA,aA<<1|0,0|_A),zA=0|o(),_A=0|NB(38*wA|0,0|fA,aA<<1|0,0|_A),aA=0|o(),i=0|NB(0|GA,((0|GA)<0)<<31>>31|0,0|GA,((0|GA)<0)<<31>>31|0),mA=0|o(),C=0|NB(GA<<1|0,((GA<<1|0)<0)<<31>>31|0,0|iA,((0|iA)<0)<<31>>31|0),hA=0|o(),z=0|NB(19*jA|0,((19*jA|0)<0)<<31>>31|0,GA<<1|0,((GA<<1|0)<0)<<31>>31|0),BI=0|o(),J=0|NB(38*IA|0,0|pA,0|GA,((0|GA)<0)<<31>>31|0),ZA=0|o(),k=0|NB(19*kA|0,0|vA,GA<<1|0,((GA<<1|0)<0)<<31>>31|0),LA=0|o(),GA=0|NB(38*wA|0,0|fA,0|GA,((0|GA)<0)<<31>>31|0),BA=0|o(),$=0|NB(38*iA|0,((38*iA|0)<0)<<31>>31|0,0|iA,((0|iA)<0)<<31>>31|0),O=0|o(),R=0|NB(19*jA|0,((19*jA|0)<0)<<31>>31|0,iA<<1|0,((iA<<1|0)<0)<<31>>31|0),N=0|o(),b=0|NB(38*IA|0,0|pA,iA<<1|0,((iA<<1|0)<0)<<31>>31|0),PA=0|o(),f=0|NB(19*kA|0,0|vA,iA<<1|0,((iA<<1|0)<0)<<31>>31|0),SA=0|o(),iA=0|NB(38*wA|0,0|fA,iA<<1|0,((iA<<1|0)<0)<<31>>31|0),gA=0|o(),d=0|NB(19*jA|0,((19*jA|0)<0)<<31>>31|0,0|jA,((0|jA)<0)<<31>>31|0),KA=0|o(),w=0|NB(38*IA|0,0|pA,0|jA,((0|jA)<0)<<31>>31|0),xA=0|o(),eA=0|NB(19*kA|0,0|vA,jA<<1|0,((jA<<1|0)<0)<<31>>31|0),oA=0|o(),jA=0|NB(38*wA|0,0|fA,0|jA,((0|jA)<0)<<31>>31|0),CA=0|o(),pA=0|NB(38*IA|0,0|pA,0|IA,((0|IA)<0)<<31>>31|0),cA=0|o(),H=0|NB(19*kA|0,0|vA,IA<<1|0,((IA<<1|0)<0)<<31>>31|0),TA=0|o(),I=0|NB(38*wA|0,0|fA,IA<<1|0,((IA<<1|0)<0)<<31>>31|0),IA=0|o(),vA=0|NB(19*kA|0,0|vA,0|kA,((0|kA)<0)<<31>>31|0),JA=0|o(),kA=0|NB(38*wA|0,0|fA,0|kA,((0|kA)<0)<<31>>31|0),FA=0|o(),wA=0|NB(38*wA|0,0|fA,0|wA,((0|wA)<0)<<31>>31|0),fA=0|o(),AA=0|bC(0|(II=0|bC(0|(gI=0|bC(0|(BI=0|bC(0|(CI=0|bC(0|$,0|O,0|Z,0|CI)),0|o(),0|z,0|BI)),0|o(),0|W,0|gI)),0|o(),0|V,0|II)),0|o(),0|QA,0|AA),QA=0|o(),XA=0|bC(0|T,0|j,0|qA,0|XA),qA=0|o(),MA=0|bC(0|X,0|q,0|UA,0|MA),UA=0|o(),gA=0|bC(0|(oA=0|bC(0|(cA=0|bC(0|($A=0|bC(0|(AI=0|bC(0|K,0|P,0|L,0|AI)),0|o(),0|Y,0|$A)),0|o(),0|pA,0|cA)),0|o(),0|eA,0|oA)),0|o(),0|iA,0|gA),iA=0|o(),cA=0|KB(0|(oA=0|bC(0|AA,0|QA,33554432,0)),0|(eA=0|o()),26),pA=0|o(),pA=0|bC(0|(rA=0|bC(0|(zA=0|bC(0|(ZA=0|bC(0|(OA=0|bC(0|R,0|N,0|v,0|OA)),0|o(),0|J,0|ZA)),0|o(),0|M,0|zA)),0|o(),0|tA,0|rA)),0|o(),0|cA,0|pA),cA=0|o(),eA=0|FC(0|AA,0|QA,-67108864&oA|0,0|eA),oA=0|o(),rA=0|KB(0|(QA=0|bC(0|gA,0|iA,33554432,0)),0|(AA=0|o()),26),tA=0|o(),tA=0|bC(0|(CA=0|bC(0|(TA=0|bC(0|(VA=0|bC(0|(WA=0|bC(0|U,0|x,0|S,0|WA)),0|o(),0|G,0|VA)),0|o(),0|H,0|TA)),0|o(),0|jA,0|CA)),0|o(),0|rA,0|tA),rA=0|o(),AA=0|FC(0|gA,0|iA,-67108864&QA|0,0|AA),QA=0|o(),gA=0|KB(0|(iA=0|bC(0|pA,0|cA,16777216,0)),0|o(),25),CA=0|o(),CA=0|bC(0|(aA=0|bC(0|(LA=0|bC(0|(PA=0|bC(0|(KA=0|bC(0|XA,0|qA,0|d,0|KA)),0|o(),0|b,0|PA)),0|o(),0|k,0|LA)),0|o(),0|_A,0|aA)),0|o(),0|gA,0|CA),gA=0|o(),iA=0|FC(0|pA,0|cA,-33554432&iA|0,0),cA=0|o(),aA=0|KB(0|(pA=0|bC(0|tA,0|rA,16777216,0)),0|o(),25),_A=0|o(),_A=0|bC(0|(IA=0|bC(0|(JA=0|bC(0|(NA=0|bC(0|(RA=0|bC(0|(YA=0|bC(0|F,0|m,0|D,0|YA)),0|o(),0|u,0|RA)),0|o(),0|l,0|NA)),0|o(),0|vA,0|JA)),0|o(),0|I,0|IA)),0|o(),0|aA,0|_A),aA=0|o(),pA=0|FC(0|tA,0|rA,-33554432&pA|0,0),rA=0|o(),IA=0|KB(0|(tA=0|bC(0|CA,0|gA,33554432,0)),0|o(),26),I=0|o(),I=0|bC(0|(BA=0|bC(0|(SA=0|bC(0|(xA=0|bC(0|MA,0|UA,0|w,0|xA)),0|o(),0|f,0|SA)),0|o(),0|GA,0|BA)),0|o(),0|IA,0|I),IA=0|o(),tA=0|FC(0|CA,0|gA,-67108864&tA|0,0),o(),CA=0|KB(0|(gA=0|bC(0|_A,0|aA,33554432,0)),0|o(),26),BA=0|o(),BA=0|bC(0|(FA=0|bC(0|(bA=0|bC(0|(dA=0|bC(0|(HA=0|bC(0|p,0|h,0|y,0|HA)),0|o(),0|s,0|dA)),0|o(),0|n,0|bA)),0|o(),0|kA,0|FA)),0|o(),0|CA,0|BA),CA=0|o(),gA=0|FC(0|_A,0|aA,-67108864&gA|0,0),o(),QA=0|bC(0|(_A=0|KB(0|(aA=0|bC(0|I,0|IA,16777216,0)),0|o(),25)),0|o(),0|AA,0|QA),AA=0|o(),aA=0|FC(0|I,0|IA,-33554432&aA|0,0),o(),I=0|KB(0|(IA=0|bC(0|BA,0|CA,16777216,0)),0|o(),25),_A=0|o(),_A=0|bC(0|(fA=0|bC(0|(lA=0|bC(0|(uA=0|bC(0|(DA=0|bC(0|(mA=0|bC(0|E,0|_,0|i,0|mA)),0|o(),0|c,0|DA)),0|o(),0|e,0|uA)),0|o(),0|Q,0|lA)),0|o(),0|wA,0|fA)),0|o(),0|I,0|_A),I=0|o(),IA=0|FC(0|BA,0|CA,-33554432&IA|0,0),o(),BA=0|bC(0|pA,0|rA,0|(BA=0|CC(0|(CA=0|bC(0|QA,0|AA,33554432,0)),0|o(),26)),0|o()),o(),CA=0|FC(0|QA,0|AA,-67108864&CA|0,0),o(),QA=0|KB(0|(AA=0|bC(0|_A,0|I,33554432,0)),0|o(),26),rA=0|o(),rA=0|bC(0|(EA=0|bC(0|(sA=0|bC(0|(yA=0|bC(0|(hA=0|bC(0|r,0|t,0|C,0|hA)),0|o(),0|B,0|yA)),0|o(),0|g,0|sA)),0|o(),0|nA,0|EA)),0|o(),0|QA,0|rA),QA=0|o(),AA=0|FC(0|_A,0|I,-67108864&AA|0,0),o(),oA=0|bC(0|(_A=0|NB(0|(_A=0|KB(0|(I=0|bC(0|rA,0|QA,16777216,0)),0|o(),25)),0|o(),19,0)),0|o(),0|eA,0|oA),eA=0|o(),I=0|FC(0|rA,0|QA,-33554432&I|0,0),o(),rA=0|bC(0|iA,0|cA,0|(rA=0|CC(0|(QA=0|bC(0|oA,0|eA,33554432,0)),0|o(),26)),0|o()),o(),QA=0|FC(0|oA,0|eA,-67108864&QA|0,0),o(),a[A>>2]=QA,a[A+4>>2]=rA,a[A+8>>2]=tA,a[A+12>>2]=aA,a[A+16>>2]=CA,a[A+20>>2]=BA,a[A+24>>2]=gA,a[A+28>>2]=IA,a[A+32>>2]=AA,a[A+36>>2]=I}function H(A,I,g,B){A|=0,B|=0;var C=0,t=0,r=0,Q=0,e=0,o=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0;!function(A,I){A|=0,I|=0;var g=0,B=0;g=0;do{B=0|vC(I+(g<<2)|0),a[A+(g<<2)>>2]=B,g=g+1|0}while(16!=(0|g))}(g|=0,I|=0),a[B>>2]=a[A>>2],a[B+4>>2]=a[A+4>>2],a[B+8>>2]=a[A+8>>2],a[B+12>>2]=a[A+12>>2],a[B+16>>2]=a[A+16>>2],a[B+20>>2]=a[A+20>>2],a[B+24>>2]=a[A+24>>2],a[B+28>>2]=a[A+28>>2],I=0|a[g>>2],p=0;do{if(k=0|xa(w=0|a[B+16>>2],6),k=(0|xa(w,11))^k,k^=0|xa(w,25),G=0|a[B+20>>2],d=0|a[B+24>>2],r=(k=I+k+(0|a[32592+(p<<2)>>2])+((d^G)&w^d)+(0|a[B+28>>2])|0)+(0|a[B+12>>2])|0,a[B+12>>2]=r,l=0|xa(m=0|a[B>>2],2),l=(0|xa(m,13))^l,l^=0|xa(m,22),f=0|a[B+4>>2],u=0|a[B+8>>2],a[B+28>>2]=l+k+((u|f)&m|u&f),F=0|xa(r,6),F=(0|xa(r,11))^F,F=(r&(G^w)^G)+d+(F^=0|xa(r,25))+(0|a[g+((n=1|p)<<2)>>2])+(0|a[32592+(n<<2)>>2])|0,a[B+8>>2]=F+u,d=0|xa(l+k+((u|f)&m|u&f)|0,2),d=F+(l+k+((u|f)&m|u&f)&(f|m)|f&m)+((d=(0|xa(l+k+((u|f)&m|u&f)|0,13))^d)^(0|xa(l+k+((u|f)&m|u&f)|0,22)))|0,a[B+24>>2]=d,b=0|xa(F+u|0,6),b=(0|xa(F+u|0,11))^b,b=(F+u&(r^w)^w)+G+(b^=0|xa(F+u|0,25))+(0|a[g+((I=2|p)<<2)>>2])+(0|a[32592+(I<<2)>>2])|0,a[B+4>>2]=b+f,G=0|xa(d,2),G=b+(d&(l+k+((u|f)&m|u&f)|m)|l+k+((u|f)&m|u&f)&m)+((G=(0|xa(d,13))^G)^(0|xa(d,22)))|0,a[B+20>>2]=G,H=0|xa(b+f|0,6),H=(0|xa(b+f|0,11))^H,H=(b+f&(F+u^r)^r)+w+(H^=0|xa(b+f|0,25))+(0|a[g+((C=3|p)<<2)>>2])+(0|a[32592+(C<<2)>>2])|0,a[B>>2]=H+m,w=0|xa(G,2),w=H+(G&(d|l+k+((u|f)&m|u&f))|d&l+k+((u|f)&m|u&f))+((w=(0|xa(G,13))^w)^(0|xa(G,22)))|0,a[B+16>>2]=w,D=0|xa(H+m|0,6),D=(0|xa(H+m|0,11))^D,k=(D=(H+m&(b+f^F+u)^F+u)+r+(D^=0|xa(H+m|0,25))+(0|a[g+((t=4|p)<<2)>>2])+(0|a[32592+(t<<2)>>2])|0)+(l+k+((u|f)&m|u&f))|0,a[B+28>>2]=k,l=0|xa(w,2),l=D+(w&(G|d)|G&d)+((l=(0|xa(w,13))^l)^(0|xa(w,22)))|0,a[B+12>>2]=l,D=0|xa(k,6),D=(0|xa(k,11))^D,D=(k&(H+m^b+f)^b+f)+(F+u)+(D^=0|xa(k,25))+(0|a[g+((r=5|p)<<2)>>2])+(0|a[32592+(r<<2)>>2])|0,a[B+24>>2]=D+d,u=0|xa(l,2),u=D+(l&(w|G)|w&G)+((u=(0|xa(l,13))^u)^(0|xa(l,22)))|0,a[B+8>>2]=u,F=0|xa(D+d|0,6),F=(0|xa(D+d|0,11))^F,F=(D+d&(k^H+m)^H+m)+(b+f)+(F^=0|xa(D+d|0,25))+(0|a[g+((Q=6|p)<<2)>>2])+(0|a[32592+(Q<<2)>>2])|0,a[B+20>>2]=F+G,f=0|xa(u,2),f=F+(u&(l|w)|l&w)+((f=(0|xa(u,13))^f)^(0|xa(u,22)))|0,a[B+4>>2]=f,b=0|xa(F+G|0,6),b=(0|xa(F+G|0,11))^b,b=(F+G&(D+d^k)^k)+(H+m)+(b^=0|xa(F+G|0,25))+(0|a[g+((e=7|p)<<2)>>2])+(0|a[32592+(e<<2)>>2])|0,a[B+16>>2]=b+w,m=0|xa(f,2),m=b+(f&(u|l)|u&l)+((m=(0|xa(f,13))^m)^(0|xa(f,22)))|0,a[B>>2]=m,H=0|xa(b+w|0,6),H=(0|xa(b+w|0,11))^H,H=(b+w&(F+G^D+d)^D+d)+k+(H^=0|xa(b+w|0,25))+(0|a[g+((o=8|p)<<2)>>2])+(0|a[32592+(o<<2)>>2])|0,a[B+12>>2]=H+l,k=0|xa(m,2),k=H+(m&(f|u)|f&u)+((k=(0|xa(m,13))^k)^(0|xa(m,22)))|0,a[B+28>>2]=k,S=0|xa(H+l|0,6),S=(0|xa(H+l|0,11))^S,S=(H+l&(b+w^F+G)^F+G)+(D+d)+(S^=0|xa(H+l|0,25))+(0|a[g+((c=9|p)<<2)>>2])+(0|a[32592+(c<<2)>>2])|0,a[B+8>>2]=S+u,d=0|xa(k,2),d=S+(k&(m|f)|m&f)+((d=(0|xa(k,13))^d)^(0|xa(k,22)))|0,a[B+24>>2]=d,D=0|xa(S+u|0,6),D=(0|xa(S+u|0,11))^D,D=(S+u&(H+l^b+w)^b+w)+(F+G)+(D^=0|xa(S+u|0,25))+(0|a[g+((i=10|p)<<2)>>2])+(0|a[32592+(i<<2)>>2])|0,a[B+4>>2]=D+f,G=0|xa(d,2),G=D+(d&(k|m)|k&m)+((G=(0|xa(d,13))^G)^(0|xa(d,22)))|0,a[B+20>>2]=G,F=0|xa(D+f|0,6),F=(0|xa(D+f|0,11))^F,F=(D+f&(S+u^H+l)^H+l)+(b+w)+(F^=0|xa(D+f|0,25))+(0|a[g+((_=11|p)<<2)>>2])+(0|a[32592+(_<<2)>>2])|0,a[B>>2]=F+m,w=0|xa(G,2),w=F+(G&(d|k)|d&k)+((w=(0|xa(G,13))^w)^(0|xa(G,22)))|0,a[B+16>>2]=w,b=0|xa(F+m|0,6),b=(0|xa(F+m|0,11))^b,b=(F+m&(D+f^S+u)^S+u)+(H+l)+(b^=0|xa(F+m|0,25))+(0|a[g+((E=12|p)<<2)>>2])+(0|a[32592+(E<<2)>>2])|0,a[B+28>>2]=b+k,l=0|xa(w,2),l=b+(w&(G|d)|G&d)+((l=(0|xa(w,13))^l)^(0|xa(w,22)))|0,a[B+12>>2]=l,H=0|xa(b+k|0,6),H=(0|xa(b+k|0,11))^H,H=(b+k&(F+m^D+f)^D+f)+(S+u)+(H^=0|xa(b+k|0,25))+(0|a[g+((s=13|p)<<2)>>2])+(0|a[32592+(s<<2)>>2])|0,a[B+24>>2]=H+d,u=0|xa(l,2),u=H+(l&(w|G)|w&G)+((u=(0|xa(l,13))^u)^(0|xa(l,22)))|0,a[B+8>>2]=u,S=0|xa(H+d|0,6),S=(0|xa(H+d|0,11))^S,S=(H+d&(b+k^F+m)^F+m)+(D+f)+(S^=0|xa(H+d|0,25))+(0|a[g+((y=14|p)<<2)>>2])+(0|a[32592+(y<<2)>>2])|0,a[B+20>>2]=S+G,f=0|xa(u,2),f=S+(u&(l|w)|l&w)+((f=(0|xa(u,13))^f)^(0|xa(u,22)))|0,a[B+4>>2]=f,D=0|xa(S+G|0,6),D=(0|xa(S+G|0,11))^D,D=(S+G&(H+d^b+k)^b+k)+(F+m)+(D^=0|xa(S+G|0,25))+(0|a[g+((h=15|p)<<2)>>2])+(0|a[32592+(h<<2)>>2])|0,a[B+16>>2]=D+w,w=0|xa(f,2),f=D+(f&(u|l)|u&l)+((w=(0|xa(f,13))^w)^(0|xa(f,22)))|0,a[B>>2]=f,48==(0|p))break;H=(S=0|a[g+(y<<2)>>2])>>>10^(H=0|xa(S,17))^(0|xa(S,19)),d=0|a[g+(c<<2)>>2],G=(m=0|a[g+(n<<2)>>2])>>>3^(G=0|xa(m,7))^(0|xa(m,18)),G=H+d+(0|a[g+(p<<2)>>2])+G|0,a[g+((p=p+16|0)<<2)>>2]=G,b=(H=0|a[g+(h<<2)>>2])>>>10^(b=0|xa(H,17))^(0|xa(H,19)),k=(u=0|a[g+(n+9<<2)>>2])+m+b+((D=0|a[g+(n+1<<2)>>2])>>>3^(k=0|xa(D,7))^(0|xa(D,18)))|0,a[g+(n+16<<2)>>2]=k,u=(G=G>>>10^(b=0|xa(G,17))^(0|xa(G,19)))+(b=0|a[g+(_<<2)>>2])+D+((m=0|a[g+(C<<2)>>2])>>>3^(u=0|xa(m,7))^(0|xa(m,18)))|0,a[g+(I+16<<2)>>2]=u,k=k>>>10^(D=0|xa(k,17))^(0|xa(k,19)),I=(D=0|a[g+(C+9<<2)>>2])+m+k+((G=0|a[g+(C+1<<2)>>2])>>>3^(I=0|xa(G,7))^(0|xa(G,18)))|0,a[g+(C+16<<2)>>2]=I,D=(u=u>>>10^(k=0|xa(u,17))^(0|xa(u,19)))+(k=0|a[g+(s<<2)>>2])+G+((m=0|a[g+(r<<2)>>2])>>>3^(D=0|xa(m,7))^(0|xa(m,18)))|0,a[g+(t+16<<2)>>2]=D,I=I>>>10^(G=0|xa(I,17))^(0|xa(I,19)),F=(G=0|a[g+(r+9<<2)>>2])+m+I+((u=0|a[g+(r+1<<2)>>2])>>>3^(F=0|xa(u,7))^(0|xa(u,18)))|0,a[g+(r+16<<2)>>2]=F,m=(D=(D>>>10^(I=0|xa(D,17))^(0|xa(D,19)))+H|0)+u+((I=0|a[g+(e<<2)>>2])>>>3^(m=0|xa(I,7))^(0|xa(I,18)))|0,a[g+(Q+16<<2)>>2]=m,F=F>>>10^(u=0|xa(F,17))^(0|xa(F,19)),G=(u=0|a[g+(e+9<<2)>>2])+I+F+((D=0|a[g+(e+1<<2)>>2])>>>3^(G=0|xa(D,7))^(0|xa(D,18)))|0,a[g+(e+16<<2)>>2]=G,F=(m=(m=m>>>10^(F=0|xa(m,17))^(0|xa(m,19)))+(0|a[g+(o+9<<2)>>2])|0)+D+((F=0|xa(d,7))^d>>>3^(0|xa(d,18)))|0,a[g+(o+16<<2)>>2]=F,G=G>>>10^(D=0|xa(G,17))^(0|xa(G,19)),I=(D=0|a[g+(c+9<<2)>>2])+d+G+((m=0|a[g+(c+1<<2)>>2])>>>3^(I=0|xa(m,7))^(0|xa(m,18)))|0,a[g+(c+16<<2)>>2]=I,G=(F=(F=F>>>10^(G=0|xa(F,17))^(0|xa(F,19)))+(0|a[g+(i+9<<2)>>2])|0)+m+((G=0|xa(b,7))^b>>>3^(0|xa(b,18)))|0,a[g+(i+16<<2)>>2]=G,I=I>>>10^(m=0|xa(I,17))^(0|xa(I,19)),d=(m=0|a[g+(_+9<<2)>>2])+b+I+((F=0|a[g+(_+1<<2)>>2])>>>3^(d=0|xa(F,7))^(0|xa(F,18)))|0,a[g+(_+16<<2)>>2]=d,I=(G=(G=G>>>10^(I=0|xa(G,17))^(0|xa(G,19)))+(0|a[g+(E+9<<2)>>2])|0)+F+((I=0|xa(k,7))^k>>>3^(0|xa(k,18)))|0,a[g+(E+16<<2)>>2]=I,d=d>>>10^(F=0|xa(d,17))^(0|xa(d,19)),G=(F=0|a[g+(s+9<<2)>>2])+k+d+((G=0|a[g+(s+1<<2)>>2])>>>3^(b=0|xa(G,7))^(0|xa(G,18)))|0,a[g+(s+16<<2)>>2]=G,I=I>>>10^(b=0|xa(I,17))^(0|xa(I,19)),d=(b=0|a[g+(y+9<<2)>>2])+S+I+((d=0|xa(H,7))^H>>>3^(0|xa(H,18)))|0,a[g+(y+16<<2)>>2]=d,G=G>>>10^(d=0|xa(G,17))^(0|xa(G,19)),S=(d=0|a[g+(h+9<<2)>>2])+H+G+((I=0|a[g+(h+1<<2)>>2])>>>3^(S=0|xa(I,7))^(0|xa(I,18)))|0,a[g+(h+16<<2)>>2]=S}while(p>>>0<64);I=0;do{a[(S=A+(I<<2)|0)>>2]=(0|a[S>>2])+(0|a[B+(I<<2)>>2]),I=I+1|0}while(8!=(0|I))}function G(A,I,g,B,C){A|=0,I|=0,g|=0,B|=0;var a=0,r=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0;if(i=0|wB(C|=0),E=0|o(),a=0|wB(C+8|0),r=0|o(),B=0|$B(0|g,0|B,56),C=0|o(),(I+g+(0-(7&g))|0)==(0|I))y=2037671283^a,Q=1952801890^r,s=1886610805^i,_=1936682341^E,c=1852075885^a,e=1685025377^r,w=1852142177^i,a=1819895653^E,r=I;else for(f=2037671283^a,Q=1952801890^r,y=1886610805^i,_=1936682341^E,c=1852075885^a,e=1685025377^r,r=1852142177^i,a=1819895653^E,s=I;;){if(u=(h=0|wB(s))^f,Q^=p=0|o(),w=0|bC(0|y,0|_,0|c,0|e),f=0|o(),i=0|dB(c,e,13),c=(0|o())^f,e=0|dB(w,f,32),f=0|o(),E=0|bC(0|u,0|Q,0|r,0|a),n=0|o(),f=0|bC((Q=0|dB(u,Q,16))^E|0,0|(r=(0|o())^n),0|e,0|f),e=0|o(),r=0|dB(Q^E,r,21),Q=e^(0|o()),n=0|bC(0|E,0|n,i^w|0,0|c),E=0|o(),c=0|dB(i^w,c,17),a=(0|o())^E,E=0|dB(n,E,32),w=0|o(),e=0|bC(c^n|0,0|a,0|f,0|e),i=0|o(),a=0|dB(c^n,a,13),n=(0|o())^i,i=0|dB(e,i,32),c=0|o(),w=0|bC(0|E,0|w,f^r|0,0|Q),E=0|o(),c=0|bC((Q=0|dB(f^r,Q,16))^w|0,0|(r=(0|o())^E),0|i,0|c),i=0|o(),r=0|dB(Q^w,r,21),Q=i^(0|o()),E=0|bC(a^e|0,0|n,0|w,0|E),w=0|o(),n=0|dB(a^e,n,17),e=(0|o())^w,w=0|dB(E,w,32),a=0|o(),(0|(s=s+8|0))==(I+g+(0-(7&g))|0)){y=c^r,s=c^h,_=i^p,c=n^E,r=I+g+(0-(7&g))|0;break}f=c^r,y=c^h,_=i^p,c=n^E,r=w}switch(7&g){case 7:l=0|$B(0|t[r+6>>0],0,48),C=0|o()|C,B|=l,l=6;break;case 6:l=6;break;case 5:l=7;break;case 4:l=8;break;case 3:l=9;break;case 2:l=10;break;case 1:l=11}return 6==(0|l)&&(u=0|$B(0|t[r+5>>0],0,40),C=0|o()|C,B|=u,l=7),7==(0|l)&&(C=0|t[r+4>>0]|C,l=8),8==(0|l)&&(B|=u=0|$B(0|t[r+3>>0],0,24),C=0|o()|C,l=9),9==(0|l)&&(B|=u=0|$B(0|t[r+2>>0],0,16),C=0|o()|C,l=10),10==(0|l)&&(B|=u=0|$B(0|t[r+1>>0],0,8),C=0|o()|C,l=11),11==(0|l)&&(B=0|B|t[r>>0]),g=B^y,p=C^Q,s=0|bC(0|s,0|_,0|c,0|e),y=0|o(),h=0|dB(c,e,13),I=(0|o())^y,y=0|dB(s,y,32),l=0|o(),w=0|bC(0|g,0|p,0|w,0|a),u=0|o(),l=0|bC((p=0|dB(g,p,16))^w|0,0|(g=(0|o())^u),0|y,0|l),y=0|o(),g=0|dB(p^w,g,21),p=y^(0|o()),u=0|bC(0|w,0|u,h^s|0,0|I),w=0|o(),I=0|dB(h^s,I,17),s=(0|o())^w,w=0|dB(u,w,32),h=0|o(),y=0|bC(I^u|0,0|s,0|l,0|y),f=0|o(),s=0|dB(I^u,s,13),u=(0|o())^f,f=0|dB(y,f,32),I=0|o(),h=0|bC(0|w,0|h,l^g|0,0|p),w=0|o(),I=0|bC((p=0|dB(l^g,p,16))^h|0,0|(g=(0|o())^w),0|f,0|I),f=0|o(),g=0|dB(p^h,g,21),p=f^(0|o()),w=0|bC(s^y|0,0|u,0|h,0|w),h=0|o(),u=0|dB(s^y,u,17),y=(0|o())^h,h=0|dB(w,h,32),s=0|o(),f=0|bC(I^B|0,f^C|0,u^w|0,0|y),l=0|o(),y=0|dB(u^w,y,13),w=(0|o())^l,l=0|dB(f,l,32),u=0|o(),s=0|bC(255^h|0,0|s,I^g|0,0|p),h=0|o(),u=0|bC((p=0|dB(I^g,p,16))^s|0,0|(g=(0|o())^h),0|l,0|u),l=0|o(),g=0|dB(p^s,g,21),p=l^(0|o()),h=0|bC(0|s,0|h,y^f|0,0|w),s=0|o(),w=0|dB(y^f,w,17),f=(0|o())^s,s=0|dB(h,s,32),y=0|o(),l=0|bC(w^h|0,0|f,0|u,0|l),I=0|o(),f=0|dB(w^h,f,13),h=(0|o())^I,I=0|dB(l,I,32),w=0|o(),y=0|bC(0|s,0|y,u^g|0,0|p),s=0|o(),w=0|bC((p=0|dB(u^g,p,16))^y|0,0|(g=(0|o())^s),0|I,0|w),I=0|o(),g=0|dB(p^y,g,21),p=I^(0|o()),s=0|bC(f^l|0,0|h,0|y,0|s),y=0|o(),h=0|dB(f^l,h,17),l=(0|o())^y,y=0|dB(s,y,32),f=0|o(),I=0|bC(h^s|0,0|l,0|w,0|I),u=0|o(),l=0|dB(h^s,l,13),s=(0|o())^u,u=0|dB(I,u,32),h=0|o(),f=0|bC(0|y,0|f,w^g|0,0|p),y=0|o(),h=0|bC((p=0|dB(w^g,p,16))^f|0,0|(g=(0|o())^y),0|u,0|h),u=0|o(),g=0|dB(p^f,g,21),p=u^(0|o()),y=0|bC(l^I|0,0|s,0|f,0|y),f=0|o(),s=0|dB(l^I,s,17),I=(0|o())^f,f=0|dB(y,f,32),l=0|o(),u=0|bC(s^y|0,0|I,0|h,0|u),w=0|o(),I=0|dB(s^y,I,13),w=(0|o())^w,l=0|bC(0|f,0|l,h^g|0,0|p),f=0|o(),p=0|dB((p=0|dB(h^g,p,16))^l,(0|o())^f,21),g=0|o(),f=0|bC(I^u|0,0|w,0|l,0|f),l=0|o(),w=0|dB(I^u,w,17),u=0|o(),tB(A,p^f^w^(I=0|dB(f,l,32)),g^l^u^(0|o())),0}function S(A){var I=0,g=0,B=0,C=0,t=0,r=0,Q=0,e=0,o=0;if(A|=0){I=0|a[8891],o=A+-8+(-8&(g=0|a[A+-4>>2]))|0;do{if(1&g)Q=A+-8|0,e=A+-8|0,A=-8&g;else{if(B=0|a[A+-8>>2],!(3&g))return;if(r=B+(-8&g)|0,(t=A+-8+(0-B)|0)>>>0<I>>>0)return;if((0|a[8892])==(0|t)){if(3!=(3&(A=0|a[o+4>>2])|0)){Q=t,e=t,A=r;break}return a[8889]=r,a[o+4>>2]=-2&A,a[t+4>>2]=1|r,void(a[t+r>>2]=r)}if(B>>>0<256){if(A=0|a[t+8>>2],(0|(I=0|a[t+12>>2]))==(0|A)){a[8887]=a[8887]&~(1<<(B>>>3)),Q=t,e=t,A=r;break}a[A+12>>2]=I,a[I+8>>2]=A,Q=t,e=t,A=r;break}C=0|a[t+24>>2],A=0|a[t+12>>2];do{if((0|A)==(0|t)){if(A=0|a[t+16+4>>2])I=t+16+4|0;else{if(!(A=0|a[t+16>>2])){A=0;break}I=t+16|0}for(;;)if(g=0|a[(B=A+20|0)>>2])A=g,I=B;else{if(!(g=0|a[(B=A+16|0)>>2]))break;A=g,I=B}a[I>>2]=0}else e=0|a[t+8>>2],a[e+12>>2]=A,a[A+8>>2]=e}while(0);if(C){if(I=0|a[t+28>>2],(0|a[35852+(I<<2)>>2])==(0|t)){if(a[35852+(I<<2)>>2]=A,!A){a[8888]=a[8888]&~(1<<I),Q=t,e=t,A=r;break}}else if(a[((0|a[C+16>>2])==(0|t)?C+16|0:C+20|0)>>2]=A,!A){Q=t,e=t,A=r;break}a[A+24>>2]=C,0|(I=0|a[t+16>>2])&&(a[A+16>>2]=I,a[I+24>>2]=A),(I=0|a[t+16+4>>2])?(a[A+20>>2]=I,a[I+24>>2]=A,Q=t,e=t,A=r):(Q=t,e=t,A=r)}else Q=t,e=t,A=r}}while(0);if(!(Q>>>0>=o>>>0)&&1&(g=0|a[o+4>>2])){if(2&g)a[o+4>>2]=-2&g,a[e+4>>2]=1|A,a[Q+A>>2]=A,C=A;else{if((0|a[8893])==(0|o)){if(o=(0|a[8890])+A|0,a[8890]=o,a[8893]=e,a[e+4>>2]=1|o,(0|e)!=(0|a[8892]))return;return a[8892]=0,void(a[8889]=0)}if((0|a[8892])==(0|o))return o=(0|a[8889])+A|0,a[8889]=o,a[8892]=Q,a[e+4>>2]=1|o,void(a[Q+o>>2]=o);C=(-8&g)+A|0;do{if(g>>>0<256){if(I=0|a[o+8>>2],(0|(A=0|a[o+12>>2]))==(0|I)){a[8887]=a[8887]&~(1<<(g>>>3));break}a[I+12>>2]=A,a[A+8>>2]=I;break}t=0|a[o+24>>2],A=0|a[o+12>>2];do{if((0|A)==(0|o)){if(A=0|a[o+16+4>>2])I=o+16+4|0;else{if(!(A=0|a[o+16>>2])){I=0;break}I=o+16|0}for(;;)if(g=0|a[(B=A+20|0)>>2])A=g,I=B;else{if(!(g=0|a[(B=A+16|0)>>2]))break;A=g,I=B}a[I>>2]=0,I=A}else I=0|a[o+8>>2],a[I+12>>2]=A,a[A+8>>2]=I,I=A}while(0);if(0|t){if(A=0|a[o+28>>2],(0|a[35852+(A<<2)>>2])==(0|o)){if(a[35852+(A<<2)>>2]=I,!I){a[8888]=a[8888]&~(1<<A);break}}else if(a[((0|a[t+16>>2])==(0|o)?t+16|0:t+20|0)>>2]=I,!I)break;a[I+24>>2]=t,0|(A=0|a[o+16>>2])&&(a[I+16>>2]=A,a[A+24>>2]=I),0|(A=0|a[o+16+4>>2])&&(a[I+20>>2]=A,a[A+24>>2]=I)}}while(0);if(a[e+4>>2]=1|C,a[Q+C>>2]=C,(0|e)==(0|a[8892]))return void(a[8889]=C)}if(g=C>>>3,C>>>0<256)return(A=0|a[8887])&1<<g?(A=35588+(g<<1<<2)+8|0,I=0|a[35588+(g<<1<<2)+8>>2]):(a[8887]=A|1<<g,A=35588+(g<<1<<2)+8|0,I=35588+(g<<1<<2)|0),a[A>>2]=e,a[I+12>>2]=e,a[e+8>>2]=I,void(a[e+12>>2]=35588+(g<<1<<2));I=35852+((B=(A=C>>>8)?C>>>0>16777215?31:C>>>(7+(B=14-((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4|(A+1048320|0)>>>16&8|(245760+(B=A<<((A+1048320|0)>>>16&8)<<((520192+(A<<((A+1048320|0)>>>16&8))|0)>>>16&4))|0)>>>16&2)+(B<<((B+245760|0)>>>16&2)>>>15)|0)|0)&1|B<<1:0)<<2)|0,a[e+28>>2]=B,a[e+20>>2]=0,a[e+16>>2]=0,A=0|a[8888],g=1<<B;A:do{if(A&g){A=0|a[I>>2];I:do{if((-8&a[A+4>>2]|0)!=(0|C)){for(B=C<<(31==(0|B)?0:25-(B>>>1)|0);I=0|a[(g=A+16+(B>>>31<<2)|0)>>2];){if((-8&a[I+4>>2]|0)==(0|C)){A=I;break I}B<<=1,A=I}a[g>>2]=e,a[e+24>>2]=A,a[e+12>>2]=e,a[e+8>>2]=e;break A}}while(0);o=0|a[(Q=A+8|0)>>2],a[o+12>>2]=e,a[Q>>2]=e,a[e+8>>2]=o,a[e+12>>2]=A,a[e+24>>2]=0}else a[8888]=A|g,a[I>>2]=e,a[e+24>>2]=I,a[e+12>>2]=e,a[e+8>>2]=e}while(0);if(o=(0|a[8895])-1|0,a[8895]=o,!(0|o)){for(A=36004;A=0|a[A>>2];)A=A+8|0;a[8895]=-1}}}}function x(A,I){I|=0;var g=0,B=0,C=0,t=0,r=0,Q=0,e=0;g=0|a[4+(A|=0)>>2];do{if(1&g)e=A,g=I;else{if(Q=0|a[A>>2],!(3&g))return;if((0|a[8892])==(A+(0-Q)|0)){if(3!=(3&(g=0|a[A+I+4>>2])|0)){e=A+(0-Q)|0,g=Q+I|0;break}return a[8889]=Q+I,a[A+I+4>>2]=-2&g,a[A+(0-Q)+4>>2]=Q+I|1,void(a[A+I>>2]=Q+I)}if(Q>>>0<256){if(g=0|a[A+(0-Q)+8>>2],(0|(B=0|a[A+(0-Q)+12>>2]))==(0|g)){a[8887]=a[8887]&~(1<<(Q>>>3)),e=A+(0-Q)|0,g=Q+I|0;break}a[g+12>>2]=B,a[B+8>>2]=g,e=A+(0-Q)|0,g=Q+I|0;break}r=0|a[A+(0-Q)+24>>2],g=0|a[A+(0-Q)+12>>2];do{if((0|g)==(A+(0-Q)|0)){if(g=0|a[4+(B=A+(0-Q)+16|0)>>2])B=B+4|0;else if(!(g=0|a[B>>2])){B=0;break}for(;;)if(C=0|a[(t=g+20|0)>>2])g=C,B=t;else{if(!(C=0|a[(t=g+16|0)>>2]))break;g=C,B=t}a[B>>2]=0,B=g}else B=0|a[A+(0-Q)+8>>2],a[B+12>>2]=g,a[g+8>>2]=B,B=g}while(0);if(r){if(g=0|a[A+(0-Q)+28>>2],(0|a[35852+(g<<2)>>2])==(A+(0-Q)|0)){if(a[35852+(g<<2)>>2]=B,!B){a[8888]=a[8888]&~(1<<g),e=A+(0-Q)|0,g=Q+I|0;break}}else if(a[((0|a[r+16>>2])==(A+(0-Q)|0)?r+16|0:r+20|0)>>2]=B,!B){e=A+(0-Q)|0,g=Q+I|0;break}a[B+24>>2]=r,0|(g=0|a[A+(0-Q)+16>>2])&&(a[B+16>>2]=g,a[g+24>>2]=B),(g=0|a[A+(0-Q)+16+4>>2])?(a[B+20>>2]=g,a[g+24>>2]=B,e=A+(0-Q)|0,g=Q+I|0):(e=A+(0-Q)|0,g=Q+I|0)}else e=A+(0-Q)|0,g=Q+I|0}}while(0);if(2&(C=0|a[A+I+4>>2]))a[A+I+4>>2]=-2&C,a[e+4>>2]=1|g,a[e+g>>2]=g,r=g;else{if((0|a[8893])==(A+I|0)){if(I=(0|a[8890])+g|0,a[8890]=I,a[8893]=e,a[e+4>>2]=1|I,(0|e)!=(0|a[8892]))return;return a[8892]=0,void(a[8889]=0)}if((0|a[8892])==(A+I|0))return I=(0|a[8889])+g|0,a[8889]=I,a[8892]=e,a[e+4>>2]=1|I,void(a[e+I>>2]=I);r=(-8&C)+g|0;do{if(C>>>0<256){if(B=0|a[A+I+8>>2],(0|(g=0|a[A+I+12>>2]))==(0|B)){a[8887]=a[8887]&~(1<<(C>>>3));break}a[B+12>>2]=g,a[g+8>>2]=B;break}Q=0|a[A+I+24>>2],g=0|a[A+I+12>>2];do{if((0|g)==(A+I|0)){if(g=0|a[A+I+16+4>>2])B=A+I+16+4|0;else{if(!(g=0|a[A+I+16>>2])){B=0;break}B=A+I+16|0}for(;;)if(C=0|a[(t=g+20|0)>>2])g=C,B=t;else{if(!(C=0|a[(t=g+16|0)>>2]))break;g=C,B=t}a[B>>2]=0,B=g}else B=0|a[A+I+8>>2],a[B+12>>2]=g,a[g+8>>2]=B,B=g}while(0);if(0|Q){if(g=0|a[A+I+28>>2],(0|a[35852+(g<<2)>>2])==(A+I|0)){if(a[35852+(g<<2)>>2]=B,!B){a[8888]=a[8888]&~(1<<g);break}}else if(a[((0|a[Q+16>>2])==(A+I|0)?Q+16|0:Q+20|0)>>2]=B,!B)break;a[B+24>>2]=Q,0|(g=0|a[A+I+16>>2])&&(a[B+16>>2]=g,a[g+24>>2]=B),0|(g=0|a[A+I+16+4>>2])&&(a[B+20>>2]=g,a[g+24>>2]=B)}}while(0);if(a[e+4>>2]=1|r,a[e+r>>2]=r,(0|e)==(0|a[8892]))return void(a[8889]=r)}if(C=r>>>3,r>>>0<256)return(g=0|a[8887])&1<<C?(g=35588+(C<<1<<2)+8|0,B=0|a[35588+(C<<1<<2)+8>>2]):(a[8887]=g|1<<C,g=35588+(C<<1<<2)+8|0,B=35588+(C<<1<<2)|0),a[g>>2]=e,a[B+12>>2]=e,a[e+8>>2]=B,void(a[e+12>>2]=35588+(C<<1<<2));if(B=35852+((t=(g=r>>>8)?r>>>0>16777215?31:r>>>(7+(t=14-((520192+(g<<((g+1048320|0)>>>16&8))|0)>>>16&4|(g+1048320|0)>>>16&8|(245760+(t=g<<((g+1048320|0)>>>16&8)<<((520192+(g<<((g+1048320|0)>>>16&8))|0)>>>16&4))|0)>>>16&2)+(t<<((t+245760|0)>>>16&2)>>>15)|0)|0)&1|t<<1:0)<<2)|0,a[e+28>>2]=t,a[e+20>>2]=0,a[e+16>>2]=0,!((g=0|a[8888])&(C=1<<t)))return a[8888]=g|C,a[B>>2]=e,a[e+24>>2]=B,a[e+12>>2]=e,void(a[e+8>>2]=e);g=0|a[B>>2];A:do{if((-8&a[g+4>>2]|0)!=(0|r)){for(t=r<<(31==(0|t)?0:25-(t>>>1)|0);B=0|a[(C=g+16+(t>>>31<<2)|0)>>2];){if((-8&a[B+4>>2]|0)==(0|r)){g=B;break A}t<<=1,g=B}return a[C>>2]=e,a[e+24>>2]=g,a[e+12>>2]=e,void(a[e+8>>2]=e)}}while(0);I=0|a[(A=g+8|0)>>2],a[I+12>>2]=e,a[A>>2]=e,a[e+8>>2]=I,a[e+12>>2]=g,a[e+24>>2]=0}function U(A,I,g,C,t){A|=0,I|=0,g|=0;var r,Q,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0,Y=0,L=0,P=0,K=0,q=0,X=0,j=0,T=0,V=0,W=0,z=0,Z=0,O=0,$=0,AA=0,IA=0,gA=0,BA=0,CA=0,aA=0,tA=0,rA=0,QA=0,eA=0,oA=0,cA=0,iA=0,_A=0;if(Q=h,r=h=h+63&-64,h=h+64|0,!(0==(0|(C|=0))&0==(0|(t|=0)))){for(L=0|a[A>>2],P=0|a[A+4>>2],K=0|a[A+8>>2],q=0|a[A+12>>2],X=0|a[A+16>>2],S=0|a[A+20>>2],x=0|a[A+24>>2],U=0|a[A+28>>2],M=0|a[A+32>>2],J=0|a[A+36>>2],v=0|a[A+40>>2],N=0|a[A+44>>2],R=0|a[A+56>>2],Y=0|a[A+60>>2],c=0,H=0|a[A+48>>2],G=0|a[A+52>>2],i=I;;){if(d=t>>>0<0|0==(0|t)&C>>>0<64){e=(I=r)+64|0;do{a[I>>2]=0,I=I+4|0}while((0|I)<(0|e));I=0;do{B[r+I>>0]=0|B[i+I>>0],I=I+1|0}while(t>>>0>0|0==(0|t)&C>>>0>I>>>0);b=r,c=g,i=r}else b=g;g=20,I=L,e=P,_=v,E=N,n=H,s=G,y=R,p=Y,f=K,w=q,l=X,u=S,D=x,m=U,F=M,k=J;do{z=0|Ga((AA=0|Ga((iA=0|Ga(($=(AA=0|Ga((cA=I+l|0)^n,16))+F|0)^l,12))+cA^AA,8))+$^iA,7),_A=0|Ga((V=0|Ga((QA=0|Ga((T=(V=0|Ga((rA=e+u|0)^s,16))+k|0)^u,12))+rA^V,8))+T^QA,7),eA=0|Ga((W=0|Ga((BA=0|Ga((IA=(W=0|Ga((gA=f+D|0)^y,16))+_|0)^D,12))+gA^W,8))+IA^BA,7),CA=0|Ga((aA=0|Ga((O=0|Ga((j=(aA=0|Ga((Z=w+m|0)^p,16))+E|0)^m,12))+Z^aA,8))+j^O,7),u=0|Ga((_=(p=0|Ga((I=(tA=0|Ga((oA=0|Ga(aA^_A+(iA+cA),16))+(W+IA)^_A,12))+(_A+(iA+cA))|0)^oA,8))+(oA+(W+IA))|0)^tA,7),D=0|Ga((E=(n=0|Ga((e=(IA=0|Ga((tA=0|Ga(eA+(QA+rA)^AA,16))+(aA+j)^eA,12))+(eA+(QA+rA))|0)^tA,8))+(tA+(aA+j))|0)^IA,7),m=0|Ga((F=(s=0|Ga((f=(j=0|Ga((IA=0|Ga(CA+(BA+gA)^V,16))+(AA+$)^CA,12))+(CA+(BA+gA))|0)^IA,8))+(IA+(AA+$))|0)^j,7),l=0|Ga((k=(y=0|Ga((w=(j=0|Ga((W=0|Ga(O+Z+z^W,16))+(V+T)^z,12))+(O+Z+z)|0)^W,8))+(W+(V+T))|0)^j,7),g=g+-2|0}while(0!=(0|g));if(O=(0|ga(i))^I+L,$=(0|ga(i+4|0))^e+P,AA=(0|ga(i+8|0))^f+K,IA=(0|ga(i+12|0))^w+q,gA=(0|ga(i+16|0))^l+X,BA=(0|ga(i+20|0))^u+S,CA=(0|ga(i+24|0))^D+x,aA=(0|ga(i+28|0))^m+U,tA=(0|ga(i+32|0))^F+M,rA=(0|ga(i+36|0))^k+J,QA=(0|ga(i+40|0))^_+v,eA=(0|ga(i+44|0))^E+N,oA=(0|ga(i+48|0))^n+H,cA=(0|ga(i+52|0))^s+G,iA=(0|ga(i+56|0))^y+R,_A=(0|ga(i+60|0))^p+Y,e=G+(0==(0|(I=H+1|0))&1)|0,UC(b,O),UC(b+4|0,$),UC(b+8|0,AA),UC(b+12|0,IA),UC(b+16|0,gA),UC(b+20|0,BA),UC(b+24|0,CA),UC(b+28|0,aA),UC(b+32|0,tA),UC(b+36|0,rA),UC(b+40|0,QA),UC(b+44|0,eA),UC(b+48|0,oA),UC(b+52|0,cA),UC(b+56|0,iA),UC(b+60|0,_A),t>>>0<0|0==(0|t)&C>>>0<65)break;g=0|bC(0|C,0|t,-64,-1),t=0|o(),C=g,g=b+64|0,H=I,G=e,i=i+64|0}if(d&&0|C){t=0;do{B[c+t>>0]=0|B[b+t>>0],t=t+1|0}while((0|t)!=(0|C))}a[A+48>>2]=I,a[A+52>>2]=e}h=Q}function M(A,I,g,C){I|=0,g|=0,C|=0;var t,r,Q,e,c,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0;if(c=0==(0|B[80+(A|=0)>>0])?16777216:0,t=0|a[A+4>>2],r=0|a[A+8>>2],Q=0|a[A+12>>2],e=0|a[A+16>>2],s=0|a[A+20>>2],n=0|a[A+24>>2],E=0|a[A+28>>2],_=0|a[A+32>>2],i=0|a[A+36>>2],C>>>0>0|0==(0|C)&g>>>0>15)for(f=0|a[A>>2];;){if(m=(67108863&(0|ga(I)))+s|0,F=((0|ga(I+3|0))>>>2&67108863)+n|0,D=((0|ga(I+6|0))>>>4&67108863)+E|0,u=((0|ga(I+9|0))>>>6)+_|0,s=((0|ga(I+12|0))>>>8|c)+i|0,i=0|NB(0|m,0,0|f,0),y=0|o(),E=0|bC(0|(y=0|bC(0|(E=0|bC(0|(y=0|bC(0|(E=0|NB(0|F,0,5*e|0,0)),0|o(),0|i,0|y)),0|(i=0|o()),0|(E=0|NB(0|D,0,5*Q|0,0)),0|o())),0|(i=0|o()),0|(y=0|NB(0|u,0,5*r|0,0)),0|o())),0|(i=0|o()),0|(E=0|NB(0|s,0,5*t|0,0)),0|o()),i=0|o(),y=0|NB(0|m,0,0|t,0),h=0|o(),l=0|bC(0|(h=0|bC(0|(l=0|bC(0|(h=0|bC(0|(l=0|NB(0|F,0,0|f,0)),0|o(),0|y,0|h)),0|(y=0|o()),0|(l=0|NB(0|D,0,5*e|0,0)),0|o())),0|(y=0|o()),0|(h=0|NB(0|u,0,5*Q|0,0)),0|o())),0|(y=0|o()),0|(l=0|NB(0|s,0,5*r|0,0)),0|o()),y=0|o(),h=0|NB(0|m,0,0|r,0),p=0|o(),w=0|bC(0|(p=0|bC(0|(w=0|bC(0|(p=0|bC(0|(w=0|NB(0|F,0,0|t,0)),0|o(),0|h,0|p)),0|(h=0|o()),0|(w=0|NB(0|D,0,0|f,0)),0|o())),0|(h=0|o()),0|(p=0|NB(0|u,0,5*e|0,0)),0|o())),0|(h=0|o()),0|(w=0|NB(0|s,0,5*Q|0,0)),0|o()),h=0|o(),p=0|NB(0|m,0,0|Q,0),_=0|o(),n=0|bC(0|(_=0|bC(0|(n=0|bC(0|(_=0|bC(0|(n=0|NB(0|F,0,0|r,0)),0|o(),0|p,0|_)),0|(p=0|o()),0|(n=0|NB(0|D,0,0|t,0)),0|o())),0|(p=0|o()),0|(_=0|NB(0|u,0,0|f,0)),0|o())),0|(p=0|o()),0|(n=0|NB(0|s,0,5*e|0,0)),0|o()),p=0|o(),_=0|NB(0|m,0,0|e,0),m=0|o(),s=0|bC(0|(u=0|bC(0|(D=0|bC(0|(m=0|bC(0|(F=0|NB(0|F,0,0|Q,0)),0|o(),0|_,0|m)),0|(_=0|o()),0|(D=0|NB(0|D,0,0|r,0)),0|o())),0|(_=0|o()),0|(u=0|NB(0|u,0,0|t,0)),0|o())),0|(_=0|o()),0|(s=0|NB(0|s,0,0|f,0)),0|o()),_=0|o(),i=0|CC(0|E,0|i,26),o(),y=0|CC(0|(i=0|bC(0|l,0|y,0|i,0)),0|o(),26),o(),h=0|CC(0|(y=0|bC(0|w,0|h,0|y,0)),0|o(),26),o(),p=0|CC(0|(h=0|bC(0|n,0|p,0|h,0)),0|o(),26),o(),_=0|CC(0|(p=0|bC(0|s,0|_,0|p,0)),0|o(),26),o(),g=0|bC(0|g,0|C,-16,-1),!((C=0|o())>>>0>0|0==(0|C)&g>>>0>15)){g=(5*_|0)+(67108863&E)&67108863,n=(((5*_|0)+(67108863&E)|0)>>>26)+(67108863&i)|0,E=67108863&y,_=67108863&h,i=67108863&p;break}s=(5*_|0)+(67108863&E)&67108863,n=(((5*_|0)+(67108863&E)|0)>>>26)+(67108863&i)|0,E=67108863&y,_=67108863&h,i=67108863&p,I=I+16|0}else g=s;a[A+20>>2]=g,a[A+24>>2]=n,a[A+28>>2]=E,a[A+32>>2]=_,a[A+36>>2]=i}function J(A,I){A|=0;var g=0,C=0,t=0,r=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0;c=0|dg(I|=0),e=0|o(),u=0|$B(0|(u=0|JB(0|B[I+4>>0],0|B[I+5>>0],0|B[I+6>>0])),0|o(),6),D=0|o(),Q=0|$B(0|(Q=0|JB(0|B[I+7>>0],0|B[I+8>>0],0|B[I+9>>0])),0|o(),5),r=0|o(),w=0|$B(0|(w=0|JB(0|B[I+10>>0],0|B[I+11>>0],0|B[I+12>>0])),0|o(),3),l=0|o(),t=0|$B(0|(t=0|JB(0|B[I+13>>0],0|B[I+14>>0],0|B[I+15>>0])),0|o(),2),C=0|o(),p=0|dg(I+16|0),f=0|o(),i=0|$B(0|(i=0|JB(0|B[I+20>>0],0|B[I+21>>0],0|B[I+22>>0])),0|o(),7),g=0|o(),_=0|$B(0|(_=0|JB(0|B[I+23>>0],0|B[I+24>>0],0|B[I+25>>0])),0|o(),5),h=0|o(),E=0|$B(0|(E=0|JB(0|B[I+26>>0],0|B[I+27>>0],0|B[I+28>>0])),0|o(),4),n=0|o(),s=0|$B(0|(s=0|JB(0|B[I+29>>0],0|B[I+30>>0],0|B[I+31>>0])),0|o(),2),o(),m=0|FC(0,0,0|(m=0|CC(0|(y=0|bC(33554428&s|0,0,16777216,0)),0|o(),25)),0|o()),o(),e=0|bC(19&m|0,0,0|c,0|e),c=0|o(),y=0|FC(33554428&s|0,0,33554432&y|0,0),s=0|o(),r=0|bC(0|(I=0|KB(0|(m=0|bC(0|u,0|D,16777216,0)),0|o(),25)),0|o(),0|Q,0|r),Q=0|o(),m=0|FC(0|u,0|D,-33554432&m|0,0),D=0|o(),C=0|bC(0|(I=0|KB(0|(u=0|bC(0|w,0|l,16777216,0)),0|o(),25)),0|o(),0|t,0|C),t=0|o(),u=0|FC(0|w,0|l,-33554432&u|0,0),l=0|o(),I=0|bC(0|i,0|g,0|(I=0|KB(0|(w=0|bC(0|p,0|f,16777216,0)),0|o(),25)),0|o()),g=0|o(),w=0|FC(0|p,0|f,-33554432&w|0,0),f=0|o(),n=0|bC(0|(i=0|KB(0|(p=0|bC(0|_,0|h,16777216,0)),0|o(),25)),0|o(),0|E,0|n),E=0|o(),p=0|FC(0|_,0|h,-33554432&p|0,0),h=0|o(),i=0|bC(0|m,0|D,0|(i=0|CC(0|(_=0|bC(0|e,0|c,33554432,0)),0|o(),26)),0|o()),o(),_=0|FC(0|e,0|c,-67108864&_|0,0),o(),e=0|bC(0|u,0|l,0|(e=0|CC(0|(c=0|bC(0|r,0|Q,33554432,0)),0|o(),26)),0|o()),o(),c=0|FC(0|r,0|Q,-67108864&c|0,0),o(),r=0|bC(0|w,0|f,0|(r=0|CC(0|(Q=0|bC(0|C,0|t,33554432,0)),0|o(),26)),0|o()),o(),Q=0|FC(0|C,0|t,-67108864&Q|0,0),o(),C=0|bC(0|p,0|h,0|(C=0|CC(0|(t=0|bC(0|I,0|g,33554432,0)),0|o(),26)),0|o()),o(),t=0|FC(0|I,0|g,-67108864&t|0,0),o(),I=0|bC(0|y,0|s,0|(I=0|CC(0|(g=0|bC(0|n,0|E,33554432,0)),0|o(),26)),0|o()),o(),g=0|FC(0|n,0|E,-67108864&g|0,0),o(),a[A>>2]=_,a[A+4>>2]=i,a[A+8>>2]=c,a[A+12>>2]=e,a[A+16>>2]=Q,a[A+20>>2]=r,a[A+24>>2]=t,a[A+28>>2]=C,a[A+32>>2]=g,a[A+36>>2]=I}function v(A,I){A|=0;var g=0,B=0,C=0,t=0,r=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0,D=0;e=0|a[(I|=0)>>2],l=0|a[I+4>>2],r=0|a[I+8>>2],f=0|a[I+12>>2],C=0|a[I+16>>2],h=0|a[I+20>>2],g=0|a[I+24>>2],i=0|a[I+28>>2],_=0|a[I+32>>2],D=0|a[I+36>>2],e=0|NB(0|e,((0|e)<0)<<31>>31|0,121666,0),Q=0|o(),l=0|NB(0|l,((0|l)<0)<<31>>31|0,121666,0),u=0|o(),r=0|NB(0|r,((0|r)<0)<<31>>31|0,121666,0),t=0|o(),f=0|NB(0|f,((0|f)<0)<<31>>31|0,121666,0),w=0|o(),C=0|NB(0|C,((0|C)<0)<<31>>31|0,121666,0),B=0|o(),h=0|NB(0|h,((0|h)<0)<<31>>31|0,121666,0),p=0|o(),g=0|NB(0|g,((0|g)<0)<<31>>31|0,121666,0),I=0|o(),i=0|NB(0|i,((0|i)<0)<<31>>31|0,121666,0),y=0|o(),_=0|NB(0|_,((0|_)<0)<<31>>31|0,121666,0),E=0|o(),Q=0|bC(0|(c=0|NB(0|(c=0|KB(0|(s=0|bC(0|(D=0|NB(0|D,((0|D)<0)<<31>>31|0,121666,0)),0|(n=0|o()),16777216,0)),0|o(),25)),0|o(),19,0)),0|o(),0|e,0|Q),e=0|o(),s=0|FC(0|D,0|n,-33554432&s|0,0),n=0|o(),t=0|bC(0|(c=0|KB(0|(D=0|bC(0|l,0|u,16777216,0)),0|o(),25)),0|o(),0|r,0|t),r=0|o(),D=0|FC(0|l,0|u,-33554432&D|0,0),u=0|o(),B=0|bC(0|(c=0|KB(0|(l=0|bC(0|f,0|w,16777216,0)),0|o(),25)),0|o(),0|C,0|B),C=0|o(),l=0|FC(0|f,0|w,-33554432&l|0,0),w=0|o(),I=0|bC(0|(c=0|KB(0|(f=0|bC(0|h,0|p,16777216,0)),0|o(),25)),0|o(),0|g,0|I),g=0|o(),f=0|FC(0|h,0|p,-33554432&f|0,0),p=0|o(),E=0|bC(0|(c=0|KB(0|(h=0|bC(0|i,0|y,16777216,0)),0|o(),25)),0|o(),0|_,0|E),_=0|o(),h=0|FC(0|i,0|y,-33554432&h|0,0),y=0|o(),c=0|bC(0|D,0|u,0|(c=0|CC(0|(i=0|bC(0|Q,0|e,33554432,0)),0|o(),26)),0|o()),o(),i=0|FC(0|Q,0|e,-67108864&i|0,0),o(),Q=0|bC(0|l,0|w,0|(Q=0|CC(0|(e=0|bC(0|t,0|r,33554432,0)),0|o(),26)),0|o()),o(),e=0|FC(0|t,0|r,-67108864&e|0,0),o(),t=0|bC(0|f,0|p,0|(t=0|CC(0|(r=0|bC(0|B,0|C,33554432,0)),0|o(),26)),0|o()),o(),r=0|FC(0|B,0|C,-67108864&r|0,0),o(),B=0|bC(0|h,0|y,0|(B=0|CC(0|(C=0|bC(0|I,0|g,33554432,0)),0|o(),26)),0|o()),o(),C=0|FC(0|I,0|g,-67108864&C|0,0),o(),I=0|bC(0|s,0|n,0|(I=0|CC(0|(g=0|bC(0|E,0|_,33554432,0)),0|o(),26)),0|o()),o(),g=0|FC(0|E,0|_,-67108864&g|0,0),o(),a[A>>2]=i,a[A+4>>2]=c,a[A+8>>2]=e,a[A+12>>2]=Q,a[A+16>>2]=r,a[A+20>>2]=t,a[A+24>>2]=C,a[A+28>>2]=B,a[A+32>>2]=g,a[A+36>>2]=I}function N(A,I,g,B,C){A|=0,g|=0,B|=0,C|=0;var t=0,r=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0;if(!(I|=0))return B?C?(a[C>>2]=0|A,a[C+4>>2]=0&I,C=0,0|(e(0|(B=0)),C)):(C=0,0|(e(0|(B=0)),C)):(0|C&&(a[C>>2]=(A>>>0)%(g>>>0),a[C+4>>2]=0),C=(A>>>0)/(g>>>0)>>>0,0|(e(0|(B=0)),C));do{if(g){if(0|B){if((r=(0|Q(0|B))-(0|Q(0|I))|0)>>>0<=31){s=r+1|0,c=A>>>((r+1|0)>>>0)&r-31>>31|I<<31-r,n=I>>>((r+1|0)>>>0)&r-31>>31,t=0,r=A<<31-r;break}return C?(a[C>>2]=0|A,a[C+4>>2]=I|0&I,C=0,0|(e(0|(B=0)),C)):(C=0,0|(e(0|(B=0)),C))}if(g-1&g|0){s=r=33+(0|Q(0|g))-(0|Q(0|I))|0,c=32-r-1>>31&I>>>((r-32|0)>>>0)|(I<<32-r|A>>>(r>>>0))&r-32>>31,n=r-32>>31&I>>>(r>>>0),t=A<<64-r&32-r>>31,r=(I<<64-r|A>>>((r-32|0)>>>0))&32-r>>31|A<<32-r&r-33>>31;break}return 0|C&&(a[C>>2]=g-1&A,a[C+4>>2]=0),1==(0|g)?(C=0|A,0|(e(0|(B=I|0&I)),C)):(B=I>>>((C=0|ma(0|g))>>>0)|0,C=I<<32-C|A>>>(C>>>0)|0,0|(e(0|B),C))}if(!B)return 0|C&&(a[C>>2]=(I>>>0)%(g>>>0),a[C+4>>2]=0),C=(I>>>0)/(g>>>0)>>>0,0|(e(0|(B=0)),C);if(!A)return 0|C&&(a[C>>2]=0,a[C+4>>2]=(I>>>0)%(B>>>0)),C=(I>>>0)/(B>>>0)>>>0,0|(e(0|(g=0)),C);if(!(B-1&B))return 0|C&&(a[C>>2]=0|A,a[C+4>>2]=B-1&I|0&I),g=0,C=I>>>((0|ma(0|B))>>>0),0|(e(0|g),C);if((r=(0|Q(0|B))-(0|Q(0|I))|0)>>>0<=30){s=r+1|0,c=I<<31-r|A>>>((r+1|0)>>>0),n=I>>>((r+1|0)>>>0),t=0,r=A<<31-r;break}return C?(a[C>>2]=0|A,a[C+4>>2]=I|0&I,C=0,0|(e(0|(B=0)),C)):(C=0,0|(e(0|(B=0)),C))}while(0);if(s){_=0|bC(0|g,B|0&B|0,-1,-1),E=0|o(),i=r,I=n,A=s,r=0;do{h=i,i=t>>>31|i<<1,t=r|t<<1,FC(0|_,0|E,0|(h=c<<1|h>>>31|0),0|(y=c>>>31|I<<1|0)),r=1&(n=(s=0|o())>>31|((0|s)<0?-1:0)<<1),c=0|FC(0|h,0|y,n&(0|g)|0,(((0|s)<0?-1:0)>>31|((0|s)<0?-1:0)<<1)&(B|0&B)|0),I=0|o(),A=A-1|0}while(0!=(0|A));A=0}else i=r,I=n,A=0,r=0;return 0|C&&(a[C>>2]=c,a[C+4>>2]=I),h=-2&(t<<1|0)|r,0|(e(0|(y=(0|t)>>>31|i<<1|0&(0|t>>>31)|A)),h)}function R(A,I,g){A|=0,I|=0;var C,a,r=0,Q=0,e=0;if(a=h,C=h=h+63&-64,h=h+64|0,(g|=0)<<24>>24&&(255&g)<=64){if(0|function(A,I){return 1&(0!=(0|(A|=0))|0!=(0|(I|=0)))|0}(t[A+80>>0]|t[A+80+1>>0]<<8|t[A+80+2>>0]<<16|t[A+80+3>>0]<<24,t[A+80+4>>0]|t[A+80+4+1>>0]<<8|t[A+80+4+2>>0]<<16|t[A+80+4+3>>0]<<24))r=-1;else{r=t[A+352>>0]|t[A+352+1>>0]<<8|t[A+352+2>>0]<<16|t[A+352+3>>0]<<24;do{if(r>>>0>128){if(xA(A,128,0),p(A,A+96|0),r=(t[A+352>>0]|t[A+352+1>>0]<<8|t[A+352+2>>0]<<16|t[A+352+3>>0]<<24)-128|0,B[A+352>>0]=r,B[A+352+1>>0]=r>>8,B[A+352+2>>0]=r>>16,B[A+352+3>>0]=r>>24,r>>>0<129){sA(A+96|0,A+224|0,0|r),Q=t[A+352>>0]|t[A+352+1>>0]<<8|t[A+352+2>>0]<<16|t[A+352+3>>0]<<24,e=A+96|0;break}c(34089,34121,306,34166)}else Q=r,e=A+96|0}while(0);xA(A,Q,0),function(A){0|B[356+(A|=0)>>0]&&function(A){B[88+(A|=0)>>0]=-1,B[A+88+1>>0]=-1,B[A+88+2>>0]=-1,B[A+88+3>>0]=-1,B[A+88+4>>0]=-1,B[A+88+4+1>>0]=-1,B[A+88+4+2>>0]=-1,B[A+88+4+3>>0]=-1}(A),B[A+80>>0]=-1,B[A+80+1>>0]=-1,B[A+80+2>>0]=-1,B[A+80+3>>0]=-1,B[A+80+4>>0]=-1,B[A+80+4+1>>0]=-1,B[A+80+4+2>>0]=-1,B[A+80+4+3>>0]=-1}(A),tI(A+96+(r=t[A+352>>0]|t[A+352+1>>0]<<8|t[A+352+2>>0]<<16|t[A+352+3>>0]<<24)|0,0,256-r|0),p(A,e),tB(C,t[A>>0]|t[A+1>>0]<<8|t[A+2>>0]<<16|t[A+3>>0]<<24,t[A+4>>0]|t[A+4+1>>0]<<8|t[A+4+2>>0]<<16|t[A+4+3>>0]<<24),tB(C+8|0,t[A+8>>0]|t[A+8+1>>0]<<8|t[A+8+2>>0]<<16|t[A+8+3>>0]<<24,t[A+8+4>>0]|t[A+8+4+1>>0]<<8|t[A+8+4+2>>0]<<16|t[A+8+4+3>>0]<<24),tB(C+16|0,t[A+16>>0]|t[A+16+1>>0]<<8|t[A+16+2>>0]<<16|t[A+16+3>>0]<<24,t[A+16+4>>0]|t[A+16+4+1>>0]<<8|t[A+16+4+2>>0]<<16|t[A+16+4+3>>0]<<24),tB(C+24|0,t[A+24>>0]|t[A+24+1>>0]<<8|t[A+24+2>>0]<<16|t[A+24+3>>0]<<24,t[A+24+4>>0]|t[A+24+4+1>>0]<<8|t[A+24+4+2>>0]<<16|t[A+24+4+3>>0]<<24),tB(C+32|0,t[A+32>>0]|t[A+32+1>>0]<<8|t[A+32+2>>0]<<16|t[A+32+3>>0]<<24,t[A+32+4>>0]|t[A+32+4+1>>0]<<8|t[A+32+4+2>>0]<<16|t[A+32+4+3>>0]<<24),tB(C+40|0,t[A+40>>0]|t[A+40+1>>0]<<8|t[A+40+2>>0]<<16|t[A+40+3>>0]<<24,t[A+40+4>>0]|t[A+40+4+1>>0]<<8|t[A+40+4+2>>0]<<16|t[A+40+4+3>>0]<<24),tB(C+48|0,t[A+48>>0]|t[A+48+1>>0]<<8|t[A+48+2>>0]<<16|t[A+48+3>>0]<<24,t[A+48+4>>0]|t[A+48+4+1>>0]<<8|t[A+48+4+2>>0]<<16|t[A+48+4+3>>0]<<24),tB(C+56|0,t[A+56>>0]|t[A+56+1>>0]<<8|t[A+56+2>>0]<<16|t[A+56+3>>0]<<24,t[A+56+4>>0]|t[A+56+4+1>>0]<<8|t[A+56+4+2>>0]<<16|t[A+56+4+3>>0]<<24),sA(0|I,0|C,255&g|0),Lg(A,64),Lg(e,256),r=0}return h=a,0|r}return st(),0}function Y(A){var I,g,B=0,C=0,t=0,r=0,Q=0,e=0,o=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0;I=h,g=h=h+63&-64,h=h+64|0,iC(g,A|=0),B=0|a[g+48>>2],t=0|a[g>>2],r=0|a[g+56>>2],Q=0|a[g+8>>2],e=0|a[g+44>>2],o=0|a[g+60>>2],c=0|a[g+12>>2],i=0|a[g+28>>2],_=0|a[g+16>>2],E=0|a[g+32>>2],C=0|a[g+4>>2],n=0|a[g+20>>2],s=0|a[g+36>>2],y=0|a[g+52>>2],p=0|a[g+24>>2],f=0|a[g+40>>2],w=0;do{H=((v=((D=((D=(k=((k=C+n|0)<<7|k>>>25)^s)+n|0)<<9|D>>>23)^y)+k<<13|(D+k|0)>>>19)^C)+D<<18|(v+D|0)>>>14)^n,F=((S=((J=((J=(u=((u=p+f|0)<<7|u>>>25)^r)+f|0)<<9|J>>>23)^Q)+u<<13|(J+u|0)>>>19)^p)+J<<18|(S+J|0)>>>14)^f,l=((d=((x=((x=(M=((M=e+o|0)<<7|M>>>25)^c)+o|0)<<9|x>>>23)^i)+M<<13|(x+M|0)>>>19)^e)+x<<18|(d+x|0)>>>14)^o,t=((M=(c=((J=(Q=((v=(C=(M+(U=((m=((b=((b=(G=((G=B+t|0)<<7|G>>>25)^_)+t|0)<<9|b>>>23)^E)+G<<13|(b+G|0)>>>19)^B)+b<<18|(m+b|0)>>>14)^t)<<7|(M+U|0)>>>25)^v)+U|0)<<9|v>>>23)^J)+C|0)<<13|J>>>19)^M)+Q|0)<<18|M>>>14)^U,n=((G=(_=((S=(i=x^((S=(p=S^(H+G<<7|(H+G|0)>>>25))+H|0)<<9|S>>>23))+p|0)<<13|S>>>19)^G)+i|0)<<18|G>>>14)^H,f=((k=(s=((b=(E=((d=(e=d^(F+k<<7|(F+k|0)>>>25))+F|0)<<9|d>>>23)^b)+e|0)<<13|b>>>19)^k)+E|0)<<18|k>>>14)^F,o=((u=(r=((D=(y=((m=(B=(l+u<<7|(l+u|0)>>>25)^m)+l|0)<<9|m>>>23)^D)+B|0)<<13|D>>>19)^u)+y|0)<<18|u>>>14)^l,w=w+2|0}while(w>>>0<8);for(a[g>>2]=t,a[g+48>>2]=B,a[g+16>>2]=_,a[g+32>>2]=E,a[g+20>>2]=n,a[g+4>>2]=C,a[g+36>>2]=s,a[g+52>>2]=y,a[g+40>>2]=f,a[g+24>>2]=p,a[g+56>>2]=r,a[g+8>>2]=Q,a[g+60>>2]=o,a[g+44>>2]=e,a[g+12>>2]=c,a[g+28>>2]=i,a[A>>2]=(0|a[A>>2])+t,B=1;a[(v=A+(B<<2)|0)>>2]=(0|a[v>>2])+C,16!=(0|(B=B+1|0));)C=0|a[g+(B<<2)>>2];h=I}function L(A,I,g,B,C){A|=0,I|=0,g|=0,C|=0;var a,t,r,Q,e,o,c,i,_,E,n,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0,Y=0,L=0,P=0,K=0,q=0,X=0,j=0,T=0,V=0,W=0,z=0;(B|=0)?(S=0|ga(B),x=0|ga(B+4|0),U=0|ga(B+8|0),G=0|ga(B+12|0)):(S=1634760805,x=857760878,U=2036477234,G=1797285236),n=0|ga(g),e=0|ga(g+4|0),o=0|ga(g+8|0),c=0|ga(g+12|0),i=0|ga(g+16|0),_=0|ga(g+20|0),E=0|ga(g+24|0),a=0|ga(g+28|0),t=0|ga(I),r=0|ga(I+4|0),Q=0|ga(I+8|0),B=0|ga(I+12|0),g=0,I=S,s=n,y=U,h=i,p=_,f=E,w=a,l=G,u=e,D=o,m=c,F=x,k=t,b=r,d=Q,H=B;do{T=(0|Ga((N=(0|Ga((L=(0|Ga((q=(0|Ga(I+p|0,7))^m)+I|0,9))^d)+q|0,13))^p)+L|0,18))^I,K=(0|Ga((z=(0|Ga((v=(0|Ga((Y=(0|Ga(s+F|0,7))^H)+F|0,9))^f)+Y|0,13))^s)+v|0,18))^F,R=(0|Ga((j=(0|Ga((W=(0|Ga((J=(0|Ga(k+y|0,7))^w)+y|0,9))^u)+J|0,13))^k)+W|0,18))^y,M=(0|Ga((P=(0|Ga((X=(0|Ga((V=(0|Ga(h+l|0,7))^D)+l|0,9))^b)+V|0,13))^h)+X|0,18))^l,I=(0|Ga((D=(0|Ga((u=(0|Ga((s=(0|Ga(V+T|0,7))^z)+T|0,9))^W)+s|0,13))^V)+u|0,18))^T,F=(0|Ga((m=(0|Ga((b=(0|Ga((k=(0|Ga(K+q|0,7))^j)+K|0,9))^X)+k|0,13))^q)+b|0,18))^K,y=(0|Ga((H=(0|Ga((d=(0|Ga((h=(0|Ga(R+Y|0,7))^P)+R|0,9))^L)+h|0,13))^Y)+d|0,18))^R,l=(0|Ga((w=(0|Ga((f=(0|Ga((p=(0|Ga(M+J|0,7))^N)+M|0,9))^v)+p|0,13))^J)+f|0,18))^M,g=g+2|0}while((0|g)<(0|C));UC(A,I+S|0),UC(A+4|0,s+n|0),UC(A+8|0,u+e|0),UC(A+12|0,D+o|0),UC(A+16|0,m+c|0),UC(A+20|0,F+x|0),UC(A+24|0,k+t|0),UC(A+28|0,b+r|0),UC(A+32|0,d+Q|0),UC(A+36|0,H+B|0),UC(A+40|0,y+U|0),UC(A+44|0,h+i|0),UC(A+48|0,p+_|0),UC(A+52|0,f+E|0),UC(A+56|0,w+a|0),UC(A+60|0,l+G|0)}function P(A,I,g,C){A|=0,I|=0,g|=0;var t,r,Q=0,e=0,o=0,c=0,i=0,_=0;switch(r=h,t=h=h+63&-64,h=h+16|0,0|(C|=0)){case 2:if(I>>>0<13)C=-31;else{Q=34359,e=(C=A)+13|0;do{B[C>>0]=0|B[Q>>0],C=C+1|0,Q=Q+1|0}while((0|C)<(0|e));A=A+12|0,e=I+-12|0,Q=6}break;case 1:if(I>>>0<12)C=-31;else{Q=34372,e=(C=A)+12|0;do{B[C>>0]=0|B[Q>>0],C=C+1|0,Q=Q+1|0}while((0|C)<(0|e));A=A+11|0,e=I+-11|0,Q=6}break;default:C=-31}do{if(6==(0|Q)&&!(C=0|kA(g))){if(Bg(t,19),Q=A+(C=0|MI(t))|0,c=e-C|0,e>>>0<=C>>>0){C=-31;break}if(sA(0|A,0|t,C+1|0),c>>>0>=4){if(B[Q>>0]=36,B[Q+1>>0]=109,B[Q+2>>0]=61,B[Q+3>>0]=0,Bg(t,0|a[g+44>>2]),e=Q+3+(A=0|MI(t))|0,(c+-3|0)>>>0<=A>>>0){C=-31;break}if(sA(Q+3|0,0|t,A+1|0),(c+-3-A|0)>>>0>=4){if(B[e>>0]=44,B[e+1>>0]=116,B[e+2>>0]=61,B[e+3>>0]=0,Bg(t,0|a[g+40>>2]),I=e+3+(C=0|MI(t))|0,o=c+-3-A-3-C|0,(c+-3-A-3|0)>>>0<=C>>>0){C=-31;break}if(sA(e+3|0,0|t,C+1|0),o>>>0>=4){if(B[I>>0]=44,B[I+1>>0]=112,B[I+2>>0]=61,B[I+3>>0]=0,Bg(t,0|a[g+48>>2]),(o+-3|0)>>>0<=(Q=0|MI(t))>>>0){C=-31;break}if(sA(I+3|0,0|t,Q+1|0),C=I+3+Q+1|0,(o+-3-Q|0)>>>0>=2&&(B[I+3+Q>>0]=36,B[I+3+Q+1>>0]=0,gA(C,o+-3-Q-1|0,0|a[g+16>>2],0|a[g+20>>2],3),(_=o+-3-Q-1-(i=0|MI(C))|0)>>>0>=2))return B[C+i>>0]=36,B[C+i+1>>0]=0,gA(C+i+1|0,_+-1|0,0|a[g>>2],0|a[g+4>>2],3),h=r,0;C=-31}else C=-31}else C=-31}else C=-31}}while(0);return h=r,0|C}function K(A,I,g,B){A|=0,I|=0,g|=0;var C=0,a=0,t=0,r=0,Q=0,e=0,o=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0,U=0,M=0,J=0,v=0,N=0,R=0;(B|=0)?(C=0|ga(B),a=0|ga(B+4|0),t=0|ga(B+8|0),B=0|ga(B+12|0)):(C=1634760805,a=857760878,t=2036477234,B=1797285236),p=0|ga(g),h=0|ga(g+4|0),r=0|ga(g+8|0),Q=0|ga(g+12|0),e=0|ga(g+16|0),o=0|ga(g+20|0),i=0|ga(g+24|0),_=0|ga(g+28|0),E=0|ga(I),n=0|ga(I+4|0),s=0|ga(I+8|0),y=0,c=0|ga(I+12|0),g=p,I=h;do{l=0|Ga((F=0|Ga((N=0|Ga((m=(F=0|Ga(E^(v=g+C|0),16))+e|0)^g,12))+v^F,8))+m^N,7),R=0|Ga((f=0|Ga((U=0|Ga((h=(f=0|Ga(n^(x=I+a|0),16))+o|0)^I,12))+x^f,8))+h^U,7),M=0|Ga((w=0|Ga((d=0|Ga((k=(w=0|Ga(s^(b=r+t|0),16))+i|0)^r,12))+b^w,8))+k^d,7),H=0|Ga((G=0|Ga((D=0|Ga((p=(G=0|Ga(c^(u=Q+B|0),16))+_|0)^Q,12))+u^G,8))+p^D,7),I=0|Ga((i=(c=0|Ga((C=(S=0|Ga((J=0|Ga(G^R+(N+v),16))+(w+k)^R,12))+(R+(N+v))|0)^J,8))+(J+(w+k))|0)^S,7),r=0|Ga((_=(E=0|Ga((a=(k=0|Ga((S=0|Ga(M+(U+x)^F,16))+(G+p)^M,12))+(M+(U+x))|0)^S,8))+(S+(G+p))|0)^k,7),Q=0|Ga((e=(n=0|Ga((t=(p=0|Ga((k=0|Ga(H+(d+b)^f,16))+(F+m)^H,12))+(H+(d+b))|0)^k,8))+(k+(F+m))|0)^p,7),g=0|Ga((o=(s=0|Ga((B=(p=0|Ga((w=0|Ga(D+u+l^w,16))+(f+h)^l,12))+(D+u+l)|0)^w,8))+(w+(f+h))|0)^p,7),y=y+1|0}while(10!=(0|y));return UC(A,C),UC(A+4|0,a),UC(A+8|0,t),UC(A+12|0,B),UC(A+16|0,E),UC(A+20|0,n),UC(A+24|0,s),UC(A+28|0,c),0}function q(A,I,g,C){A|=0,I|=0,g|=0,C|=0;var t,r,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0;r=h,t=h=h+63&-64,h=h+704|0;A:do{if(!(0==(0|g)&0==(0|C))){if(_=0|CC(0|(y=0|a[A+72>>2]),0|(n=0|a[A+72+4>>2]),3),o(),E=0|$B(0|g,0|C,3),s=0|o(),c=0|CC(0|g,0|C,61),i=0|o(),n=0|bC(0|y,0|n,0|E,0|s),y=0|o(),a[A+72>>2]=n,a[A+72+4>>2]=y,Q=0|a[A+64>>2],e=0|a[A+64+4>>2],y>>>0<s>>>0|(0|y)==(0|s)&n>>>0<E>>>0&&(Q=0|bC(0|Q,0|e,1,0),e=0|o(),a[A+64>>2]=Q,a[A+64+4>>2]=e),Q=0|bC(0|Q,0|e,0|c,0|i),i=0|o(),a[A+64>>2]=Q,a[A+64+4>>2]=i,i=0|FC(128,0,127&_|0,0),(Q=0|o())>>>0>C>>>0|(0|Q)==(0|C)&i>>>0>g>>>0)for(Q=0,e=0;;)if(s=0|B[I+Q>>0],y=0|bC(0|Q,0|e,127&_|0,0),o(),B[A+80+y>>0]=s,Q=0|bC(0|Q,0|e,1,0),!((e=0|o())>>>0<C>>>0|(0|e)==(0|C)&Q>>>0<g>>>0))break A;if(!(0==(0|i)&0==(0|Q))){e=0,c=0;do{s=0|B[I+e>>0],y=0|bC(0|e,0|c,127&_|0,0),o(),B[A+80+y>>0]=s,e=0|bC(0|e,0|c,1,0),c=0|o()}while(c>>>0<Q>>>0|(0|c)==(0|Q)&e>>>0<i>>>0)}if(l(A,A+80|0,t,t+640|0),Q=0|FC(0|g,0|C,0|i,0|Q),(c=0|o())>>>0>0|0==(0|c)&Q>>>0>127){e=I+i|0;do{l(A,e,t,t+640|0),e=e+128|0,Q=0|bC(0|Q,0|c,-128,-1),c=0|o()}while(c>>>0>0|0==(0|c)&Q>>>0>127)}else e=I+i|0;if(!(0==(0|(i=127&Q))&!0)){Q=0,c=0;do{B[A+80+Q>>0]=0|B[e+Q>>0],Q=0|bC(0|Q,0|c,1,0),c=0|o()}while(c>>>0<0|0==(0|c)&Q>>>0<i>>>0)}Lg(t,704)}}while(0);return h=r,0}function X(A,I,g,C){A|=0,g|=0,C|=0;var a,t,r=0,Q=0;for(a=h,t=h=h+63&-64,h=h+2272|0,KA(t+1536|0,I|=0),KA(t+1280|0,C),TB(t,g),VB(t+2112|0,g),YB(t+1792|0,t+2112|0),RI(t+2112|0,t+1792|0,t),YB(t+1952|0,t+2112|0),TB(t+160|0,t+1952|0),RI(t+2112|0,t+1792|0,t+160|0),YB(t+1952|0,t+2112|0),TB(t+320|0,t+1952|0),RI(t+2112|0,t+1792|0,t+320|0),YB(t+1952|0,t+2112|0),TB(t+480|0,t+1952|0),RI(t+2112|0,t+1792|0,t+480|0),YB(t+1952|0,t+2112|0),TB(t+640|0,t+1952|0),RI(t+2112|0,t+1792|0,t+640|0),YB(t+1952|0,t+2112|0),TB(t+800|0,t+1952|0),RI(t+2112|0,t+1792|0,t+800|0),YB(t+1952|0,t+2112|0),TB(t+960|0,t+1952|0),RI(t+2112|0,t+1792|0,t+960|0),YB(t+1952|0,t+2112|0),TB(t+1120|0,t+1952|0),function(A){jC(A|=0),mC(A+40|0),mC(A+80|0)}(A),g=255;;){if(0|B[t+1536+g>>0]){r=g,Q=5;break}if(0|B[t+1280+g>>0]){r=g,Q=5;break}if(!g)break;g=g+-1|0}if(5==(0|Q)&&(0|r)>-1)for(;Cg(t+2112|0,A),(g=0|B[t+1536+r>>0])<<24>>24<=0?g<<24>>24<0&&(YB(t+1952|0,t+2112|0),NI(t+2112|0,t+1952|0,t+(160*(((g<<24>>24)/-2|0)<<24>>24)|0)|0)):(YB(t+1952|0,t+2112|0),RI(t+2112|0,t+1952|0,t+(160*((255&g)>>>1&255)|0)|0)),(g=0|B[t+1280+r>>0])<<24>>24<=0?g<<24>>24<0&&(YB(t+1952|0,t+2112|0),LI(t+2112|0,t+1952|0,160+(120*(((g<<24>>24)/-2|0)<<24>>24)|0)|0)):(YB(t+1952|0,t+2112|0),PI(t+2112|0,t+1952|0,160+(120*((255&g)>>>1&255)|0)|0)),EC(A,t+2112|0),(0|r)>0;)r=r+-1|0;h=a}function j(A,I,g,C,t,r,Q,e){A|=0,I|=0,g|=0,C|=0,t|=0,r|=0,Q|=0,e|=0;var o,c,i=0,_=0,E=0,n=0,s=0,y=0,p=0;if(c=h,o=h=h+63&-64,h=h+16|0,a[o>>2]=0,sa(e),C){n=0,_=0,E=0,i=0;A:for(;;){for(y=i;i=0|B[g+y>>0],255==(0|(s=4&e?0|GI(i):0|SI(i)));){if(!t){s=18;break A}if(!(0|zC(t,i))){s=19;break A}if(!((i=y+1|0)>>>0<C>>>0)){s=17;break A}y=i}if(n=s+(n<<6)|0,(i=_+6|0)>>>0>7){if(_=_+-2|0,E>>>0>=I>>>0){s=13;break}B[A+E>>0]=n>>>_,E=E+1|0}else _=i;if((i=y+1|0)>>>0>=C>>>0){s=16;break}}13==(0|s)?(a[o>>2]=y,a[8886]=68,i=-1):16==(0|s)?(a[o>>2]=i,i=0):17==(0|s)?(a[o>>2]=i,i=0):18==(0|s)?(a[o>>2]=y,i=0):19==(0|s)&&(a[o>>2]=y,i=0),_>>>0>4?(E=0,i=-1):s=21}else n=0,_=0,E=0,i=0,s=21;do{if(21==(0|s))if((1<<_)-1&n)E=0,i=-1;else if(i|2&e||(i=0|pI(g,C,o,t,_>>>1)),i)E=0;else if(0!=(0|t)&&(p=0|a[o>>2])>>>0<C>>>0){for(i=p;;){if(!(0|zC(t,0|B[g+i>>0]))){s=31;break}if((i=i+1|0)>>>0>=C>>>0){s=30;break}}if(30==(0|s)){a[o>>2]=i,i=0;break}if(31==(0|s)){a[o>>2]=i,i=0;break}}else i=0}while(0);return _=0|a[o>>2],Q?a[Q>>2]=g+_:(0|_)!=(0|C)&&(a[8886]=28,i=-1),0|r&&(a[r>>2]=E),h=c,0|i}function T(A,I,g,B){A|=0,I|=0,g|=0;var C=0,a=0,t=0,r=0,Q=0,e=0,o=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0,D=0,m=0,F=0,k=0,b=0,d=0,H=0,G=0,S=0,x=0;(B|=0)?(C=0|ga(B),t=0|ga(B+4|0),a=0|ga(B+8|0),B=0|ga(B+12|0)):(C=1634760805,a=2036477234,B=1797285236,t=857760878),y=0|ga(g),o=0|ga(g+4|0),c=0|ga(g+8|0),i=0|ga(g+12|0),_=0|ga(g+16|0),E=0|ga(g+20|0),n=0|ga(g+24|0),s=0|ga(g+28|0),r=0|ga(I),Q=0|ga(I+4|0),e=0|ga(I+8|0),h=20,g=0|ga(I+12|0);do{H=(0|Ga((w=(0|Ga((D=(0|Ga((k=(0|Ga(E+C|0,7))^i)+C|0,9))^e)+k|0,13))^E)+D|0,18))^C,F=(0|Ga((x=(0|Ga((f=(0|Ga((u=(0|Ga(t+y|0,7))^g)+t|0,9))^n)+u|0,13))^y)+f|0,18))^t,l=(0|Ga((d=(0|Ga((S=(0|Ga((p=(0|Ga(a+r|0,7))^s)+a|0,9))^o)+p|0,13))^r)+S|0,18))^a,I=(0|Ga((m=(0|Ga((b=(0|Ga((G=(0|Ga(B+_|0,7))^c)+B|0,9))^Q)+G|0,13))^_)+b|0,18))^B,C=(0|Ga((c=(0|Ga((o=(0|Ga((y=(0|Ga(G+H|0,7))^x)+H|0,9))^S)+y|0,13))^G)+o|0,18))^H,t=(0|Ga((i=(0|Ga((Q=(0|Ga((r=(0|Ga(F+k|0,7))^d)+F|0,9))^b)+r|0,13))^k)+Q|0,18))^F,a=(0|Ga((g=(0|Ga((e=(0|Ga((_=(0|Ga(l+u|0,7))^m)+l|0,9))^D)+_|0,13))^u)+e|0,18))^l,B=(0|Ga((s=(0|Ga((n=(0|Ga((E=(0|Ga(I+p|0,7))^w)+I|0,9))^f)+E|0,13))^p)+n|0,18))^I,h=h+-2|0}while(0!=(0|h));return UC(A,C),UC(A+4|0,t),UC(A+8|0,a),UC(A+12|0,B),UC(A+16|0,r),UC(A+20|0,Q),UC(A+24|0,e),UC(A+28|0,g),0}function V(A,I,g){I|=0,g|=0;var C,t,r,Q=0,e=0,o=0;switch(r=h,t=h=h+63&-64,h=h+16|0,o=0|a[20+(A|=0)>>2],C=0|a[A+4>>2],a[A+20>>2]=0,a[A+4>>2]=0,0|g){case 2:0|$I(I,34324,9)?I=-32:(I=I+9|0,e=4);break;case 1:0|$I(I,34334,8)?I=-32:(I=I+8|0,e=4);break;default:I=-26}do{if(4==(0|e))if(0==(0|$I(I,34343,3))&&0!=(0|(Q=0|dI(I+3|0,t+4|0))))if(19==(0|a[t+4>>2]))if(0|$I(Q,34347,3))I=-32;else{if(!(I=0|dI(Q+3|0,t+4|0))){I=-32;break}if(a[A+44>>2]=a[t+4>>2],0|$I(I,34351,3))I=-32;else{if(!(I=0|dI(I+3|0,t+4|0))){I=-32;break}if(a[A+40>>2]=a[t+4>>2],0|$I(I,34355,3))I=-32;else{if(!(I=0|dI(I+3|0,t+4|0))){I=-32;break}if(e=0|a[t+4>>2],a[A+48>>2]=e,a[A+52>>2]=e,I=(e=36==(0|B[I>>0]))?I+1|0:I,e){if(a[t+4>>2]=o,0|j(e=0|a[A+16>>2],o,I,0|MI(I),0,t+4|0,t,3)){I=-32;break}if(a[A+20>>2]=a[t+4>>2],I=0|a[t>>2],I=(o=36==(0|B[I>>0]))?I+1|0:I,o){if(a[t+4>>2]=C,0|j(o=0|a[A>>2],C,I,0|MI(I),0,t+4|0,t,3)){I=-32;break}a[A+4>>2]=a[t+4>>2],g=0|a[t>>2],(I=0|kA(A))||(I=0==(0|B[g>>0])?0:-32)}else I=-32}else I=-32}}}else I=-26;else I=-32}while(0);return h=r,0|I}function W(A,I,g){A|=0,I|=0;var C,a,r=0,Q=0;C=h,a=h=h+63&-64,h=h+4032|0,TB(a,g|=0),VB(a+3584|0,g),YB(a+2464|0,a+3584|0),TB(a+160|0,a+2464|0),RI(a+3424|0,g,a+160|0),YB(a+2304|0,a+3424|0),TB(a+320|0,a+2304|0),VB(a+3264|0,a+2464|0),YB(a+2144|0,a+3264|0),TB(a+480|0,a+2144|0),RI(a+3104|0,g,a+480|0),YB(a+1984|0,a+3104|0),TB(a+640|0,a+1984|0),VB(a+2944|0,a+2304|0),YB(a+1824|0,a+2944|0),TB(a+800|0,a+1824|0),RI(a+2784|0,g,a+800|0),YB(a+1664|0,a+2784|0),TB(a+960|0,a+1664|0),VB(a+2624|0,a+2144|0),YB(a+1504|0,a+2624|0),TB(a+1120|0,a+1504|0),g=0;do{Q=0|B[I+g>>0],B[a+1280+(r=g<<1)>>0]=15&Q,B[a+1280+(1|r)>>0]=(255&Q)>>>4,g=g+1|0}while(32!=(0|g));g=0,I=0;do{g=134217728+((r=g+(0|t[(Q=a+1280+I|0)>>0])|0)<<24)>>28,B[Q>>0]=r-(g<<4),I=I+1|0}while(63!=(0|I));g=g+(0|t[a+1280+63>>0])&255,B[a+1280+63>>0]=g,ta(A),BI(a+1344|0,a,g),RI(a+3864|0,A,a+1344|0),g=63;do{EC(a+3744|0,a+3864|0),Cg(a+3864|0,a+3744|0),EC(a+3744|0,a+3864|0),Cg(a+3864|0,a+3744|0),EC(a+3744|0,a+3864|0),Cg(a+3864|0,a+3744|0),EC(a+3744|0,a+3864|0),Cg(a+3864|0,a+3744|0),YB(A,a+3864|0),BI(a+1344|0,a,0|B[a+1280+(g=g+-1|0)>>0]),RI(a+3864|0,A,a+1344|0)}while(0!=(0|g));YB(A,a+3864|0),h=C}function z(A,I,g,C){A|=0,I|=0,g|=0,C|=0;var t,r=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0;t=h,_=h=h+63&-64,h=h+288|0;A:do{if(!(0==(0|g)&0==(0|C))){if(c=0|CC(0|(e=0|a[A+32>>2]),0|(i=0|a[A+32+4>>2]),3),o(),r=0|bC(0|e,0|i,0|(r=0|$B(0|g,0|C,3)),0|o()),i=0|o(),a[A+32>>2]=r,a[A+32+4>>2]=i,i=0|FC(64,0,63&c|0,0),(r=0|o())>>>0>C>>>0|(0|r)==(0|C)&i>>>0>g>>>0)for(r=0,Q=0;;)if(i=0|B[I+r>>0],_=0|bC(0|r,0|Q,63&c|0,0),o(),B[A+40+_>>0]=i,r=0|bC(0|r,0|Q,1,0),!((Q=0|o())>>>0<C>>>0|(0|Q)==(0|C)&r>>>0<g>>>0))break A;if(!(0==(0|i)&0==(0|r))){Q=0,e=0;do{n=0|B[I+Q>>0],E=0|bC(0|Q,0|e,63&c|0,0),o(),B[A+40+E>>0]=n,Q=0|bC(0|Q,0|e,1,0),e=0|o()}while(e>>>0<r>>>0|(0|e)==(0|r)&Q>>>0<i>>>0)}if(H(A,A+40|0,_,_+256|0),r=0|FC(0|g,0|C,0|i,0|r),(e=0|o())>>>0>0|0==(0|e)&r>>>0>63){Q=I+i|0;do{H(A,Q,_,_+256|0),Q=Q+64|0,r=0|bC(0|r,0|e,-64,-1),e=0|o()}while(e>>>0>0|0==(0|e)&r>>>0>63)}else Q=I+i|0;if(!(0==(0|(r&=63))&!0)){e=0,g=0;do{B[A+40+e>>0]=0|B[Q+e>>0],e=0|bC(0|e,0|g,1,0),g=0|o()}while(g>>>0<0|0==(0|g)&e>>>0<r>>>0)}Lg(_,288)}}while(0);return h=t,0}function Z(A,I,g,C){I|=0,g|=0,C|=0;var t=0,r=0,Q=0,e=0,c=0,i=0,_=0,E=0;if(0==(0|(r=0|a[56+(A|=0)>>2]))&0==(0|(t=0|a[A+56+4>>2])))_=7;else{if(e=0|FC(16,0,0|r,0|t),!(0==(0|(i=(c=0|o())>>>0>C>>>0|(0|c)==(0|C)&e>>>0>g>>>0?g:e))&0==(0|(c=c>>>0>C>>>0|(0|c)==(0|C)&e>>>0>g>>>0?C:c)))){e=0,Q=0;do{E=0|B[I+e>>0],r=0|bC(0|r,0|t,0|e,0|Q),o(),B[A+64+r>>0]=E,e=0|bC(0|e,0|Q,1,0),Q=0|o(),r=0|a[A+56>>2],t=0|a[A+56+4>>2]}while(Q>>>0<c>>>0|(0|Q)==(0|c)&e>>>0<i>>>0)}E=0|bC(0|r,0|t,0|i,0|c),e=0|o(),a[A+56>>2]=E,a[A+56+4>>2]=e,e>>>0<0|0==(0|e)&E>>>0<16||(g=0|FC(0|g,0|C,0|i,0|c),C=0|o(),M(A,A+64|0,16,0),a[A+56>>2]=0,a[A+56+4>>2]=0,I=I+i|0,_=7)}if(7==(0|_)&&(t=-16&g,C>>>0>0|0==(0|C)&g>>>0>15?(r=0|FC(0|g,0|C,0|t,0|C),E=0|o(),M(A,I,t,C),C=E,I=I+t|0):r=g,!(0==(0|r)&0==(0|C)))){t=0,g=0;do{_=0|B[I+t>>0],E=0|bC(0|a[A+56>>2],0|a[A+56+4>>2],0|t,0|g),o(),B[A+64+E>>0]=_,t=0|bC(0|t,0|g,1,0),g=0|o()}while(g>>>0<C>>>0|(0|g)==(0|C)&t>>>0<r>>>0);_=0|bC(0|a[A+56>>2],0|a[A+56+4>>2],0|r,0|C),E=0|o(),a[A+56>>2]=_,a[A+56+4>>2]=E}}function O(A,I,g){var B,C;g|=0,B=h,C=h=h+63&-64,h=h+400|0,0==(0|(A|=0))|0==(0|(I|=0))||(bg(C,0,0,64),UC(C+384|0,0|a[I+48>>2]),XC(C,C+384|0,4,0),UC(C+384|0,0|a[I+4>>2]),XC(C,C+384|0,4,0),UC(C+384|0,0|a[I+44>>2]),XC(C,C+384|0,4,0),UC(C+384|0,0|a[I+40>>2]),XC(C,C+384|0,4,0),UC(C+384|0,19),XC(C,C+384|0,4,0),UC(C+384|0,g),XC(C,C+384|0,4,0),UC(C+384|0,0|a[I+12>>2]),XC(C,C+384|0,4,0),0|(g=0|a[I+8>>2])&&(XC(C,g,0|a[I+12>>2],0),1&a[I+56>>2]|0)&&(Lg(0|a[I+8>>2],0|a[I+12>>2]),a[I+12>>2]=0),UC(C+384|0,0|a[I+20>>2]),XC(C,C+384|0,4,0),0|(g=0|a[I+16>>2])&&XC(C,g,0|a[I+20>>2],0),UC(C+384|0,0|a[I+28>>2]),XC(C,C+384|0,4,0),0|(g=0|a[I+24>>2])&&(XC(C,g,0|a[I+28>>2],0),2&a[I+56>>2]|0)&&(Lg(0|a[I+24>>2],0|a[I+28>>2]),a[I+28>>2]=0),UC(C+384|0,0|a[I+36>>2]),XC(C,C+384|0,4,0),0|(g=0|a[I+32>>2])&&XC(C,g,0|a[I+36>>2],0),gC(C,A,64)),h=B}function $(A,I){A|=0,I|=0;var g=0,C=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0;A:do{if(0|A){do{if(2==(0|a[A+36>>2])){if(0==(0|(g=0|a[I>>2]))&&(0|t[I+8>>0])<=1){C=6;break}E=0|a[A+4>>2],_=0}else C=6}while(0);if(6==(0|C)&&(wA(A,I,E=0|a[A+4>>2]),g=0|a[I>>2],_=1),g=0==(0|g)&(Q=0|B[I+8>>0])<<24>>24==0?2:0,C=0|a[A+24>>2],c=0|r(C,0|a[I+4>>2]),i=0|a[A+20>>2],Q=c+g+(0|r(i,255&Q))|0,g>>>0<i>>>0)for(e=C,i=Q,C=(0==(0|(Q>>>0)%(C>>>0))?C+-1|0:-1)+Q|0;;){if(c=1==(0|(i>>>0)%(e>>>0))?i+-1|0:C,C=_?E+(g<<3)|0:(0|a[4+(0|a[A>>2])>>2])+(c<<10)|0,y=0|a[(e=C)>>2],e=0|GB(0|a[e+4>>2],0,0|a[A+28>>2],0),Q=0|o(),n=0|a[I>>2],C=0|B[I+8>>0],s=0|a[I+4>>2],e=0==(0|n)&C<<24>>24==0?s:e,a[I+12>>2]=g,Q=0|XA(A,n,C,g,y,1&((0|e)==(0|s)?0==(0|(0==(0|n)&C<<24>>24==0?0:Q)):0)),Q=(C=0|a[4+(0|a[A>>2])>>2])+((0|r(0|a[A+24>>2],e))<<10)+(Q<<10)|0,e=C+(i<<10)|0,n?F(C+(c<<10)|0,Q,e):k(C+(c<<10)|0,Q,e),(g=g+1|0)>>>0>=(0|a[A+20>>2])>>>0)break A;e=0|a[A+24>>2],i=i+1|0,C=c+1|0}}}while(0)}function AA(A,I,g,C){A|=0,I|=0,g|=0,C|=0;var t,r,Q=0,e=0,o=0;if(t=h,r=h=h+63&-64,h=h+528|0,a[r+512>>2]=0,UC(r+512|0,I),I>>>0<65)(0|bg(r,0,0,I))>=0&&(XC(r,r+512|0,4,0),XC(r,g,C,0),gC(r,A,I));else A:do{if((0|bg(r,0,0,64))>=0&&(XC(r,r+512|0,4,0),XC(r,g,C,0),(0|gC(r,r+448|0,64))>=0)){e=r+448|0,o=(Q=A)+32|0;do{B[Q>>0]=0|B[e>>0],Q=Q+1|0,e=e+1|0}while((0|Q)<(0|o));e=r+448|0,o=64+(Q=r+384|0)|0;do{a[Q>>2]=a[e>>2],Q=Q+4|0,e=e+4|0}while((0|Q)<(0|o));if((I+-32|0)>>>0>64){C=A+32|0,g=I+-32|0;do{if((0|yB(r+448|0,64,r+384|0,64,0,0,0))<0)break A;e=r+448|0,o=(Q=C)+32|0;do{B[Q>>0]=0|B[e>>0],Q=Q+1|0,e=e+1|0}while((0|Q)<(0|o));g=g+-32|0,C=C+32|0,e=r+448|0,o=64+(Q=r+384|0)|0;do{a[Q>>2]=a[e>>2],Q=Q+4|0,e=e+4|0}while((0|Q)<(0|o))}while(g>>>0>64)}else C=A+32|0,g=I+-32|0;(0|yB(r+448|0,g,r+384|0,64,0,0,0))>=0&&sA(0|C,r+448|0,0|g)}}while(0);Lg(r,384),h=t}function IA(A,I,g,C,r,Q,e,c){A|=0,I|=0,r|=0,Q|=0,e|=0,c|=0;var i,_,E=0,n=0;if(i=h,_=h=h+63&-64,h=h+112|0,!(0==(0|(g|=0))&0==(0|(C|=0)))){E=(n=_)+32|0;do{B[n>>0]=0|B[c>>0],n=n+1|0,c=c+1|0}while((0|n)<(0|E));c=t[r+4>>0]|t[r+4+1>>0]<<8|t[r+4+2>>0]<<16|t[r+4+3>>0]<<24,a[_+96>>2]=t[r>>0]|t[r+1>>0]<<8|t[r+2>>0]<<16|t[r+3>>0]<<24,a[_+96+4>>2]=c,c=8;do{B[_+96+c>>0]=Q,Q=0|CC(0|Q,0|e,8),e=0|o(),c=c+1|0}while(16!=(0|c));if(C>>>0>0|0==(0|C)&g>>>0>63)for(Q=C;;){$C(_+32|0,_+96|0,_,0),e=0;do{B[A+e>>0]=B[_+32+e>>0]^B[I+e>>0],e=e+1|0}while(64!=(0|e));for(c=8,e=1;e=e+(0|t[(C=_+96+c|0)>>0])|0,B[C>>0]=e,16!=(0|(c=c+1|0));)e>>>=8;if(e=0|bC(0|g,0|Q,-64,-1),A=A+64|0,I=I+64|0,!((c=0|o())>>>0>0|0==(0|c)&e>>>0>63)){Q=e;break}g=e,Q=c}else Q=g,c=C;if(!(0==(0|Q)&0==(0|c))&&($C(_+32|0,_+96|0,_,0),0|Q)){e=0;do{B[A+e>>0]=B[_+32+e>>0]^B[I+e>>0],e=e+1|0}while((0|e)!=(0|Q))}Lg(_+32|0,64),Lg(_,32)}return h=i,0}function gA(A,I,g,C,a){A|=0,I|=0,g|=0,C|=0;var Q=0,e=0,o=0,i=0,_=0,E=0;sa(a|=0),e=(0|r((C>>>0)/3|0,-3))+C|0,Q=((C>>>0)/3|0)<<2;do{if(e){if(2&a){Q=(2|Q)+(e>>>1)|0;break}Q=Q+4|0;break}}while(0);if(Q>>>0>=I>>>0&&st(),4&a)if(0|C){i=0,a=0,e=0,_=0;do{if(E=_,_=_+1|0,i=i<<8|0|t[g+E>>0],(a=a+8|0)>>>0>5)for(;;){if(E=255&(0|cB(i>>>(a=a+-6|0)&63)),o=e+1|0,B[A+e>>0]=E,!(a>>>0>5)){e=o;break}e=o}}while((0|_)!=(0|C));a&&(E=255&(0|cB(i<<6-a&63)),B[A+e>>0]=E,e=e+1|0)}else e=0;else if(0|C){i=0,a=0,e=0,_=0;do{if(o=_,_=_+1|0,i=i<<8|0|t[g+o>>0],(a=a+8|0)>>>0>5)for(;;){if(E=255&(0|nB(i>>>(a=a+-6|0)&63)),o=e+1|0,B[A+e>>0]=E,!(a>>>0>5)){e=o;break}e=o}}while((0|_)!=(0|C));a&&(E=255&(0|nB(i<<6-a&63)),B[A+e>>0]=E,e=e+1|0)}else e=0;return Q>>>0<e>>>0&&c(35301,35320,230,35336),Q>>>0>e>>>0?tI(A+e|0,61,Q-e|0):Q=e,tI(A+Q|0,0,((E=Q+1|0)>>>0<I>>>0?I:E)-Q|0),0|A}function BA(A,I){I|=0;var g,C,t,r,Q,e,c=0,i=0,_=0,E=0;0==(0|(i=0|a[56+(A|=0)>>2]))&0==(0|(c=0|a[A+56+4>>2]))||(B[A+64+i>>0]=1,c=0|bC(0|i,0|c,1,0),(_=0|o())>>>0<0|0==(0|_)&c>>>0<16&&tI(A+64+c|0,0,14-i+1|0),B[A+80>>0]=1,M(A,A+64|0,16,0)),i=0|a[A+24>>2],E=(t=(-67108864|(C=((E=((_=(0|a[A+28>>2])+(i>>>26)|0)>>>26)+(0|a[A+32>>2])|0)>>>26)+(0|a[A+36>>2])|0))+((((((r=((e=(5*(C>>>26)|0)+(0|a[A+20>>2])|0)>>>26)+(67108863&i)+((5+(67108863&e)|0)>>>26)|0)>>>26)+(67108863&_)|0)>>>26)+(67108863&E)|0)>>>26)|0)>>31&67108863&E|(Q=(t>>>31)-1&67108863)&(((r>>>26)+(67108863&_)|0)>>>26)+(67108863&E),g=0|bC(t>>31&67108863&e|Q&5+(67108863&e)|(t>>31&(e>>>26)+(67108863&i)|Q&r)<<26|0,0,0|a[A+40>>2],0),c=0|o(),c=0|bC(0|(i=0|bC((t>>31&(e>>>26)+(67108863&i)|Q&r)>>>6|(t>>31&67108863&_|Q&(r>>>26)+(67108863&_))<<20|0,0,0|a[A+44>>2],0)),0|o(),0|c,0),i=0|o(),i=0|bC(0|(_=0|bC((t>>31&67108863&_|Q&(r>>>26)+(67108863&_))>>>12|E<<14|0,0,0|a[A+48>>2],0)),0|o(),0|i,0),_=0|o(),_=0|bC(0|(E=0|bC(((t>>>31)-1&t|t>>31&C)<<8|E>>>18|0,0,0|a[A+52>>2],0)),0|o(),0|_,0),o(),UC(I,g),UC(I+4|0,c),UC(I+8|0,i),UC(I+12|0,_),Lg(A,88)}function CA(A,I){var g,B;A|=0,g=h,B=h=h+63&-64,h=h+192|0,d(B+144|0,I|=0),d(B+96|0,B+144|0),d(B+96|0,B+96|0),m(B+96|0,I,B+96|0),m(B+144|0,B+144|0,B+96|0),d(B+48|0,B+144|0),m(B+96|0,B+96|0,B+48|0),d(B+48|0,B+96|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(5!=(0|I));m(B+96|0,B+48|0,B+96|0),d(B+48|0,B+96|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(10!=(0|I));m(B+48|0,B+48|0,B+96|0),d(B,B+48|0),I=1;do{d(B,B),I=I+1|0}while(20!=(0|I));m(B+48|0,B,B+48|0),d(B+48|0,B+48|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(10!=(0|I));m(B+96|0,B+48|0,B+96|0),d(B+48|0,B+96|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(50!=(0|I));m(B+48|0,B+48|0,B+96|0),d(B,B+48|0),I=1;do{d(B,B),I=I+1|0}while(100!=(0|I));m(B+48|0,B,B+48|0),d(B+48|0,B+48|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(50!=(0|I));m(B+96|0,B+48|0,B+96|0),d(B+96|0,B+96|0),I=1;do{d(B+96|0,B+96|0),I=I+1|0}while(5!=(0|I));m(A,B+96|0,B+144|0),h=g}function aA(A,I,g,B,C,t,r){A|=0,I|=0,g|=0,B|=0,C|=0;var Q,e,c=0,i=0;return Q=h,e=h=h+63&-64,h=h+352|0,K(e,t|=0,r|=0,0),A>>>0>g>>>0&&0<C>>>0|0==(0|C)&(A-g|0)>>>0<B>>>0?i=5:g>>>0>A>>>0&&0<C>>>0|0==(0|C)&(g-A|0)>>>0<B>>>0?i=5:c=g,5==(0|i)&&(Rg(0|A,0|g,0|B),c=A),a[e+32>>2]=0,a[e+32+4>>2]=0,a[e+32+8>>2]=0,a[e+32+12>>2]=0,a[e+32+16>>2]=0,a[e+32+20>>2]=0,a[e+32+24>>2]=0,a[e+32+28>>2]=0,0==(0|(r=C>>>0>0|0==(0|C)&B>>>0>32?32:B))&0==(0|(g=C>>>0>0|0==(0|C)&B>>>0>32?0:C))||sA(e+32+32|0,0|c,-2-(i=~C>>>0>4294967295|-1==(0|~C)&~B>>>0>4294967263?~B:-33)+1|0),hB(e+32|0,e+32|0,i=0|bC(0|r,0|g,32,0),0|o(),t+16|0,e),ca(e+96|0,e+32|0),0==(0|r)&0==(0|g)||sA(0|A,e+32+32|0,-2-(i=~C>>>0>4294967295|-1==(0|~C)&~B>>>0>4294967263?~B:-33)+1|0),Lg(e+32|0,64),C>>>0>0|0==(0|C)&B>>>0>32&&Tg(A+r|0,c+r|0,i=0|FC(0|B,0|C,0|r,0|g),0|o(),t+16|0,1,0,e),Lg(e,32),GC(e+96|0,A,B,C),oa(e+96|0,I),Lg(e+96|0,256),h=Q,0}function tA(A,I,g,B,C,t,r){A|=0,I|=0,g|=0,B|=0,C|=0;var Q,e,c=0,i=0;return Q=h,e=h=h+63&-64,h=h+352|0,T(e,t|=0,r|=0,0),A>>>0>g>>>0&&0<C>>>0|0==(0|C)&(A-g|0)>>>0<B>>>0?i=5:g>>>0>A>>>0&&0<C>>>0|0==(0|C)&(g-A|0)>>>0<B>>>0?i=5:c=g,5==(0|i)&&(Rg(0|A,0|g,0|B),c=A),a[e+32>>2]=0,a[e+32+4>>2]=0,a[e+32+8>>2]=0,a[e+32+12>>2]=0,a[e+32+16>>2]=0,a[e+32+20>>2]=0,a[e+32+24>>2]=0,a[e+32+28>>2]=0,0==(0|(r=C>>>0>0|0==(0|C)&B>>>0>32?32:B))&0==(0|(g=C>>>0>0|0==(0|C)&B>>>0>32?0:C))||sA(e+32+32|0,0|c,-2-(i=~C>>>0>4294967295|-1==(0|~C)&~B>>>0>4294967263?~B:-33)+1|0),fC(e+32|0,e+32|0,i=0|bC(0|r,0|g,32,0),0|o(),t+16|0,e),ca(e+96|0,e+32|0),0==(0|r)&0==(0|g)||sA(0|A,e+32+32|0,-2-(i=~C>>>0>4294967295|-1==(0|~C)&~B>>>0>4294967263?~B:-33)+1|0),Lg(e+32|0,64),C>>>0>0|0==(0|C)&B>>>0>32&&XB(A+r|0,c+r|0,i=0|FC(0|B,0|C,0|r,0|g),0|o(),t+16|0,1,0,e),Lg(e,32),GC(e+96|0,A,B,C),oa(e+96|0,I),Lg(e+96|0,256),h=Q,0}function rA(A,I){A|=0;var g,C,a=0;for(g=h,C=h=h+63&-64,h=h+1760|0,TB(C,I|=0),VB(C+1600|0,I),YB(C+1280|0,C+1600|0),RI(C+1600|0,C+1280|0,C),YB(C+1440|0,C+1600|0),TB(C+160|0,C+1440|0),RI(C+1600|0,C+1280|0,C+160|0),YB(C+1440|0,C+1600|0),TB(C+320|0,C+1440|0),RI(C+1600|0,C+1280|0,C+320|0),YB(C+1440|0,C+1600|0),TB(C+480|0,C+1440|0),RI(C+1600|0,C+1280|0,C+480|0),YB(C+1440|0,C+1600|0),TB(C+640|0,C+1440|0),RI(C+1600|0,C+1280|0,C+640|0),YB(C+1440|0,C+1600|0),TB(C+800|0,C+1440|0),RI(C+1600|0,C+1280|0,C+800|0),YB(C+1440|0,C+1600|0),TB(C+960|0,C+1440|0),RI(C+1600|0,C+1280|0,C+960|0),YB(C+1440|0,C+1600|0),TB(C+1120|0,C+1440|0),ta(A),a=252;VB(C+1600|0,A),(I=0|B[31840+a>>0])<<24>>24<=0?I<<24>>24<0&&(YB(C+1440|0,C+1600|0),NI(C+1600|0,C+1440|0,C+(160*(((I<<24>>24)/-2|0)<<24>>24)|0)|0)):(YB(C+1440|0,C+1600|0),RI(C+1600|0,C+1440|0,C+(160*((255&I)>>>1&255)|0)|0)),YB(A,C+1600|0),a;)a=a+-1|0;h=g}function QA(A,I){A|=0;var g,B,C=0;g=h,B=h=h+63&-64,h=h+144|0,d(B+96|0,I|=0),d(B+48|0,B+96|0),d(B+48|0,B+48|0),m(B+48|0,I,B+48|0),m(B+96|0,B+96|0,B+48|0),d(B+96|0,B+96|0),m(B+96|0,B+48|0,B+96|0),d(B+48|0,B+96|0),C=1;do{d(B+48|0,B+48|0),C=C+1|0}while(5!=(0|C));m(B+96|0,B+48|0,B+96|0),d(B+48|0,B+96|0),C=1;do{d(B+48|0,B+48|0),C=C+1|0}while(10!=(0|C));m(B+48|0,B+48|0,B+96|0),d(B,B+48|0),C=1;do{d(B,B),C=C+1|0}while(20!=(0|C));m(B+48|0,B,B+48|0),d(B+48|0,B+48|0),C=1;do{d(B+48|0,B+48|0),C=C+1|0}while(10!=(0|C));m(B+96|0,B+48|0,B+96|0),d(B+48|0,B+96|0),C=1;do{d(B+48|0,B+48|0),C=C+1|0}while(50!=(0|C));m(B+48|0,B+48|0,B+96|0),d(B,B+48|0),C=1;do{d(B,B),C=C+1|0}while(100!=(0|C));m(B+48|0,B,B+48|0),d(B+48|0,B+48|0),C=1;do{d(B+48|0,B+48|0),C=C+1|0}while(50!=(0|C));m(B+96|0,B+48|0,B+96|0),d(B+96|0,B+96|0),d(B+96|0,B+96|0),m(A,B+96|0,I),h=g}function eA(A,I,g,B,C,t,Q,e,c,i,_){A|=0,I|=0,g|=0,B|=0,C|=0,t|=0,Q|=0,i|=0,_|=0;var E=0,n=0,s=0;s=0|NB(0|(c|=0),0,0|(e|=0),0),n=0|o();do{if(n>>>0>0|0==(0|n)&s>>>0>1073741823)a[8886]=22,E=-1;else{if(Q>>>0>0|0==(0|Q)&t>>>0>4294967295){a[8886]=22,E=-1;break}if(Q>>>0<0|0==(0|Q)&t>>>0<2|0!=((s=0|bC(0|t,0|Q,-1,-1))&t|0)|0!=((0|o())&Q|0)){a[8886]=28,E=-1;break}if(0==(0|e)|0==(0|c)){a[8886]=28,E=-1;break}if(!(e>>>0>16777215||(33554431/(c>>>0)|0)>>>0<e>>>0||0<Q>>>0|(0==(0|Q)?(33554431/(e>>>0)|0)>>>0<t>>>0:0))){if(((n=0|r(e<<7,c))+(s=0|r(e<<7,t))|0)>>>0<s>>>0){a[8886]=48,E=-1;break}if((E=n+s+(e<<8|64)|0)>>>0<(e<<8|64)>>>0){a[8886]=48,E=-1;break}if((0|a[A+8>>2])>>>0<E>>>0&&(aa(A),0==(0|hg(A,E)))){E=-1;break}fI(I,g,B,C,A=0|a[A+4>>2],n),E=0;do{cA(A+(0|r(e<<7,E))|0,e,t,Q,A+n|0,A+n+s|0),E=E+1|0}while((0|E)!=(0|c));fI(I,g,A,n,i,_),E=0;break}a[8886]=48,E=-1}}while(0);return 0|E}function oA(A,I,g,C){A|=0,I|=0,g|=0,C|=0;var a=0,r=0,Q=0,e=0;A:do{if(!(0==(0|g)&0==(0|C))){for(a=t[A+352>>0]|t[A+352+1>>0]<<8|t[A+352+2>>0]<<16|t[A+352+3>>0]<<24,Q=I;I=A+96+a|0,C>>>0>0|0==(0|C)&g>>>0>(e=256-a|0)>>>0;){sA(0|I,0|Q,0|e),I=(t[A+352>>0]|t[A+352+1>>0]<<8|t[A+352+2>>0]<<16|t[A+352+3>>0]<<24)+e|0,B[A+352>>0]=I,B[A+352+1>>0]=I>>8,B[A+352+2>>0]=I>>16,B[A+352+3>>0]=I>>24,xA(A,128,0),p(A,A+96|0),a=A+224|0,r=128+(I=A+96|0)|0;do{B[I>>0]=0|B[a>>0],I=I+1|0,a=a+1|0}while((0|I)<(0|r));if(a=(t[A+352>>0]|t[A+352+1>>0]<<8|t[A+352+2>>0]<<16|t[A+352+3>>0]<<24)-128|0,B[A+352>>0]=a,B[A+352+1>>0]=a>>8,B[A+352+2>>0]=a>>16,B[A+352+3>>0]=a>>24,0==(0|(g=0|FC(0|g,0|C,0|e,0)))&0==(0|(C=0|o())))break A;Q=Q+e|0}sA(0|I,0|Q,0|g),e=(t[A+352>>0]|t[A+352+1>>0]<<8|t[A+352+2>>0]<<16|t[A+352+3>>0]<<24)+g|0,B[A+352>>0]=e,B[A+352+1>>0]=e>>8,B[A+352+2>>0]=e>>16,B[A+352+3>>0]=e>>24}}while(0)}function cA(A,I,g,B,C,t){A|=0,g|=0,B|=0,C|=0,t|=0;var Q=0,e=0,c=0,i=0,_=0;if((I|=0)<<5|0){Q=0;do{i=0|ga(A+(Q<<2)|0),a[t+(Q<<2)>>2]=i,Q=Q+1|0}while((0|Q)!=(I<<5|0))}if(!(0==(0|g)&0==(0|B))){Q=0,e=0;do{MB(C+((0|r(I<<5,Q))<<2)|0,t,I<<7),gg(t,t+(I<<5<<2)|0,t+(I<<6<<2)|0,I),MB(C+((0|r(1|Q,I<<5))<<2)|0,t+(I<<5<<2)|0,I<<7),gg(t+(I<<5<<2)|0,t,t+(I<<6<<2)|0,I),Q=0|bC(0|Q,0|e,2,0),e=0|o()}while(e>>>0<B>>>0|(0|e)==(0|B)&Q>>>0<g>>>0);Q=0|bC(0|g,0|B,-1,-1),e=0|o(),c=0,i=0;do{_=0|HC(t,I),o(),EB(t,C+((0|r(I<<5,_&Q))<<2)|0,I<<7),gg(t,t+(I<<5<<2)|0,t+(I<<6<<2)|0,I),_=0|HC(t+(I<<5<<2)|0,I),o(),EB(t+(I<<5<<2)|0,C+((0|r(I<<5,_&Q))<<2)|0,I<<7),gg(t+(I<<5<<2)|0,t,t+(I<<6<<2)|0,I),c=0|bC(0|c,0|i,2,0),i=0|o()}while(i>>>0<B>>>0|(0|i)==(0|B)&c>>>0<g>>>0)}if(I<<5|0){Q=0;do{UC(A+(Q<<2)|0,0|a[t+(Q<<2)>>2]),Q=Q+1|0}while((0|Q)!=(I<<5|0))}}function iA(A,I,g){var B,C,t,r,Q,e,o,c,i,_,E,n,s,y,h,p,f,w,l,u;I|=0,g|=0,u=0|a[(A|=0)>>2],w=0|a[A+4>>2],p=0|a[A+8>>2],y=0|a[A+12>>2],n=0|a[A+16>>2],_=0|a[A+20>>2],c=0|a[A+24>>2],e=0|a[A+28>>2],r=0|a[A+32>>2],C=0|a[A+36>>2],l=0|a[I>>2],f=0|a[I+4>>2],h=0|a[I+8>>2],s=0|a[I+12>>2],E=0|a[I+16>>2],i=0|a[I+20>>2],o=0|a[I+24>>2],Q=0|a[I+28>>2],t=0|a[I+32>>2],B=0|a[I+36>>2],a[A>>2]=(l^u)&0-g^u,a[A+4>>2]=(f^w)&0-g^w,a[A+8>>2]=(h^p)&0-g^p,a[A+12>>2]=(s^y)&0-g^y,a[A+16>>2]=(E^n)&0-g^n,a[A+20>>2]=(i^_)&0-g^_,a[A+24>>2]=(o^c)&0-g^c,a[A+28>>2]=(Q^e)&0-g^e,a[A+32>>2]=(t^r)&0-g^r,a[A+36>>2]=(B^C)&0-g^C,a[I>>2]=(l^u)&0-g^l,a[I+4>>2]=(f^w)&0-g^f,a[I+8>>2]=(h^p)&0-g^h,a[I+12>>2]=(s^y)&0-g^s,a[I+16>>2]=(E^n)&0-g^E,a[I+20>>2]=(i^_)&0-g^i,a[I+24>>2]=(o^c)&0-g^o,a[I+28>>2]=(Q^e)&0-g^Q,a[I+32>>2]=(t^r)&0-g^t,a[I+36>>2]=(B^C)&0-g^B}function _A(A,I,g,B,C,a,t){A|=0,I|=0,g|=0,B|=0,C|=0;var r,Q,e=0;return Q=h,r=h=h+63&-64,h=h+96|0,K(r,a|=0,t|=0,0),RB(r+32|0,32,0,a+16|0,r),0|lC(g,I,B,C,r+32|0)?(Lg(r,32),I=-1):A?(I>>>0>=A>>>0&&0<C>>>0|0==(0|C)&(I-A|0)>>>0<B>>>0?e=8:A>>>0>=I>>>0&&0<C>>>0|0==(0|C)&(A-I|0)>>>0<B>>>0?e=8:g=I,8==(0|e)&&(Rg(0|A,0|I,0|B),g=A),0==(0|(I=C>>>0>0|0==(0|C)&B>>>0>32?32:B))&0==(0|(t=C>>>0>0|0==(0|C)&B>>>0>32?0:C))?hB(r+32|0,r+32|0,32,0,a+16|0,r):(sA(r+32+32|0,0|g,-2-(e=~C>>>0>4294967295|-1==(0|~C)&~B>>>0>4294967263?~B:-33)+1|0),hB(r+32|0,r+32|0,0|bC(0|I,0|t,32,0),0|o(),a+16|0,r),sA(0|A,r+32+32|0,-2-e+1|0)),C>>>0>0|0==(0|C)&B>>>0>32&&Tg(A+I|0,g+I|0,0|FC(0|B,0|C,0|I,0|t),0|o(),a+16|0,1,0,r),Lg(r,32),I=0):I=0,h=Q,0|I}function EA(A,I,g,B,C,a,t){A|=0,I|=0,g|=0,B|=0,C|=0;var r,Q,e=0;return Q=h,r=h=h+63&-64,h=h+96|0,T(r,a|=0,t|=0,0),RC(r+32|0,32,0,a+16|0,r),0|lC(g,I,B,C,r+32|0)?(Lg(r,32),I=-1):A?(I>>>0>=A>>>0&&0<C>>>0|0==(0|C)&(I-A|0)>>>0<B>>>0?e=8:A>>>0>=I>>>0&&0<C>>>0|0==(0|C)&(A-I|0)>>>0<B>>>0?e=8:g=I,8==(0|e)&&(Rg(0|A,0|I,0|B),g=A),0==(0|(I=C>>>0>0|0==(0|C)&B>>>0>32?32:B))&0==(0|(t=C>>>0>0|0==(0|C)&B>>>0>32?0:C))?fC(r+32|0,r+32|0,32,0,a+16|0,r):(sA(r+32+32|0,0|g,-2-(e=~C>>>0>4294967295|-1==(0|~C)&~B>>>0>4294967263?~B:-33)+1|0),fC(r+32|0,r+32|0,0|bC(0|I,0|t,32,0),0|o(),a+16|0,r),sA(0|A,r+32+32|0,-2-e+1|0)),C>>>0>0|0==(0|C)&B>>>0>32&&XB(A+I|0,g+I|0,0|FC(0|B,0|C,0|I,0|t),0|o(),a+16|0,1,0,r),Lg(r,32),I=0):I=0,h=Q,0|I}function nA(A,I,g,C,r){A|=0,C|=0,r|=0;var Q,e,c=0,i=0,_=0,E=0,n=0;if(Q=h,e=h=h+63&-64,h=h+112|0,!(0==(0|(I|=0))&0==(0|(g|=0)))){c=(i=e)+32|0;do{B[i>>0]=0|B[r>>0],i=i+1|0,r=r+1|0}while((0|i)<(0|c));if(i=t[C+4>>0]|t[C+4+1>>0]<<8|t[C+4+2>>0]<<16|t[C+4+3>>0]<<24,a[e+96>>2]=t[C>>0]|t[C+1>>0]<<8|t[C+2>>0]<<16|t[C+3>>0]<<24,a[e+96+4>>2]=i,a[e+96+8>>2]=0,a[e+96+8+4>>2]=0,g>>>0>0|0==(0|g)&I>>>0>63){do{for($C(A,e+96|0,e,0),c=8,r=1;r=r+(0|t[(i=e+96+c|0)>>0])|0,B[i>>0]=r,16!=(0|(c=c+1|0));)r>>>=8;I=0|bC(0|I,0|g,-64,-1),g=0|o(),A=A+64|0}while(g>>>0>0|0==(0|g)&I>>>0>63);0==(0|I)&0==(0|g)||(E=A,n=I,_=8)}else E=A,n=I,_=8;if(8==(0|_)&&($C(e+32|0,e+96|0,e,0),0|n)){r=0;do{B[E+r>>0]=0|B[e+32+r>>0],r=r+1|0}while((0|r)!=(0|n))}Lg(e+32|0,64),Lg(e,32)}return h=Q,0}function sA(A,I,g){A|=0,I|=0;var C,t,r=0;if((0|(g|=0))>=8192)return n(0|A,0|I,0|g),0|A;if(t=0|A,C=A+g|0,(3&A)==(3&I)){for(;3&A;){if(!g)return 0|t;B[A>>0]=0|B[I>>0],A=A+1|0,I=I+1|0,g=g-1|0}for(r=(g=-4&C|0)-64|0;(0|A)<=(0|r);)a[A>>2]=a[I>>2],a[A+4>>2]=a[I+4>>2],a[A+8>>2]=a[I+8>>2],a[A+12>>2]=a[I+12>>2],a[A+16>>2]=a[I+16>>2],a[A+20>>2]=a[I+20>>2],a[A+24>>2]=a[I+24>>2],a[A+28>>2]=a[I+28>>2],a[A+32>>2]=a[I+32>>2],a[A+36>>2]=a[I+36>>2],a[A+40>>2]=a[I+40>>2],a[A+44>>2]=a[I+44>>2],a[A+48>>2]=a[I+48>>2],a[A+52>>2]=a[I+52>>2],a[A+56>>2]=a[I+56>>2],a[A+60>>2]=a[I+60>>2],A=A+64|0,I=I+64|0;for(;(0|A)<(0|g);)a[A>>2]=a[I>>2],A=A+4|0,I=I+4|0}else for(g=C-4|0;(0|A)<(0|g);)B[A>>0]=0|B[I>>0],B[A+1>>0]=0|B[I+1>>0],B[A+2>>0]=0|B[I+2>>0],B[A+3>>0]=0|B[I+3>>0],A=A+4|0,I=I+4|0;for(;(0|A)<(0|C);)B[A>>0]=0|B[I>>0],A=A+1|0,I=I+1|0;return 0|t}function yA(A,I,g){var C,t;if(A|=0,g|=0,C=h,t=h=h+63&-64,h=h+960|0,b(t+384|0,I|=0),a[t+384>>2]=1+(0|a[t+384>>2]),CA(t+384|0,t+384|0),m(t+336|0,32320,t+384|0),lI(t+336|0,t+336|0),d(t+288|0,t+336|0),m(t+240|0,t+336|0,t+288|0),$A(t+480|0,t+240|0,t+336|0),m(t+288|0,t+288|0,32320),$A(t+480|0,t+288|0,t+480|0),function(A,I){var g,B;A|=0,g=h,B=h=h+63&-64,h=h+192|0,d(B+144|0,I|=0),m(B+96|0,B+144|0,I),d(B+144|0,B+96|0),d(B+48|0,B+144|0),d(B+48|0,B+48|0),m(B+48|0,B+48|0,B+144|0),m(B+96|0,B+48|0,I),d(B+48|0,B+96|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(5!=(0|I));m(B+96|0,B+48|0,B+96|0),d(B+48|0,B+96|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(10!=(0|I));m(B+48|0,B+48|0,B+96|0),d(B,B+48|0),I=1;do{d(B,B),I=I+1|0}while(20!=(0|I));m(B+48|0,B,B+48|0),d(B+48|0,B+48|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(10!=(0|I));m(B+96|0,B+48|0,B+96|0),d(B+48|0,B+96|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(50!=(0|I));m(B+48|0,B+48|0,B+96|0),d(B,B+48|0),I=1;do{d(B,B),I=I+1|0}while(100!=(0|I));m(B+48|0,B,B+48|0),d(B+48|0,B+48|0),I=1;do{d(B+48|0,B+48|0),I=I+1|0}while(50!=(0|I));m(B+96|0,B+48|0,B+96|0),d(B+96|0,B+96|0),I=1;do{d(B+96|0,B+96|0),I=I+1|0}while(4!=(0|I));m(A,B+96|0,B+144|0),h=g}(t+480|0,t+480|0),pA(A,t+480|0),I=1&B[A+1>>0],lI(t+432|0,t+336|0),NA(t+336|0,t+432|0,I),jC(t+288|0),NA(t+288|0,32320,I),OA(t+336|0,t+336|0,t+288|0),mC(t+192|0),$A(t+144|0,t+336|0,t+192|0),OA(t+48|0,t+336|0,t+192|0),CA(t+96|0,t+144|0),m(t,t+48|0,t+96|0),pA(A,t),B[A+31>>0]=B[A+31>>0]|g,!(0|YA(t+800|0,A)))return VB(t+640|0,t+800|0),EC(t+520|0,t+640|0),Cg(t+640|0,t+520|0),EC(t+520|0,t+640|0),Cg(t+640|0,t+520|0),YB(t+800|0,t+640|0),yg(A,t+800|0),void(h=C);i()}function hA(A,I){var g,B,C;A|=0,I|=0,g=h,B=h=h+63&-64,h=h+672|0,mC(B+528|0),d(B+480|0,I),m(B+480|0,64,B+480|0),$A(B+240|0,B+480|0,B+528|0),m(B+240|0,B+240|0,32416),mC(B+624|0),lI(B+624|0,B+624|0),$A(B+432|0,B+480|0,16),m(B+192|0,B+480|0,16),OA(B+192|0,B+624|0,B+192|0),m(B+192|0,B+192|0,B+432|0),C=1-(0|QI(B+384|0,B+240|0,B+192|0))|0,m(B+336|0,B+384|0,I),la(B+336|0,B+336|0),lI(B+336|0,B+336|0),NA(B+384|0,B+336|0,C),NA(B+624|0,B+480|0,C),OA(B+576|0,B+480|0,B+528|0),m(B+576|0,B+576|0,B+624|0),m(B+576|0,B+576|0,32464),OA(B+576|0,B+576|0,B+192|0),$A(B+144|0,B+384|0,B+384|0),m(B+144|0,B+144|0,B+192|0),m(B+96|0,B+576|0,32512),d(B+288|0,B+384|0),OA(B+48|0,B+528|0,B+288|0),$A(B,B+528|0,B+288|0),m(A,B+144|0,B),m(A+40|0,B+48|0,B+96|0),m(A+80|0,B+96|0,B),m(A+120|0,B+144|0,B+48|0),h=g}function pA(A,I){A|=0;var g,C,t=0;g=h,C=h=h+63&-64,h=h+48|0,mA(C,I|=0),I=0|a[C>>2],B[A>>0]=I,B[A+1>>0]=I>>>8,B[A+2>>0]=I>>>16,t=0|a[C+4>>2],B[A+3>>0]=t<<2|I>>>24,B[A+4>>0]=t>>>6,B[A+5>>0]=t>>>14,I=0|a[C+8>>2],B[A+6>>0]=I<<3|t>>>22,B[A+7>>0]=I>>>5,B[A+8>>0]=I>>>13,t=0|a[C+12>>2],B[A+9>>0]=t<<5|I>>>21,B[A+10>>0]=t>>>3,B[A+11>>0]=t>>>11,I=0|a[C+16>>2],B[A+12>>0]=I<<6|t>>>19,B[A+13>>0]=I>>>2,B[A+14>>0]=I>>>10,B[A+15>>0]=I>>>18,I=0|a[C+20>>2],B[A+16>>0]=I,B[A+17>>0]=I>>>8,B[A+18>>0]=I>>>16,t=0|a[C+24>>2],B[A+19>>0]=t<<1|I>>>24,B[A+20>>0]=t>>>7,B[A+21>>0]=t>>>15,I=0|a[C+28>>2],B[A+22>>0]=I<<3|t>>>23,B[A+23>>0]=I>>>5,B[A+24>>0]=I>>>13,t=0|a[C+32>>2],B[A+25>>0]=t<<4|I>>>21,B[A+26>>0]=t>>>4,B[A+27>>0]=t>>>12,I=0|a[C+36>>2],B[A+28>>0]=I<<6|t>>>20,B[A+29>>0]=I>>>2,B[A+30>>0]=I>>>10,B[A+31>>0]=I>>>18,h=g}function fA(A,I){var g,B,C;A|=0,g=h,B=h=h+63&-64,h=h+864|0,$A(B+336|0,80+(I|=0)|0,I+40|0),OA(B,I+80|0,I+40|0),m(B+336|0,B+336|0,B),m(B+288|0,I,I+40|0),d(B+240|0,B+288|0),m(B+240|0,B+336|0,B+240|0),mC(B+480|0),QI(B+624|0,B+480|0,B+240|0),m(B+816|0,B+624|0,B+336|0),m(B+768|0,B+624|0,B+288|0),m(B+48|0,B+816|0,B+768|0),m(B+48|0,B+48|0,I+120|0),m(B+576|0,I,64),m(B+528|0,I+40|0,64),m(B+672|0,B+816|0,32368),m(B+384|0,I+120|0,B+48|0),C=0|tC(B+384|0),UI(B+192|0,I),UI(B+144|0,I+40|0),UI(B+720|0,B+768|0),NA(B+192|0,B+528|0,C),NA(B+144|0,B+576|0,C),NA(B+720|0,B+672|0,C),m(B+96|0,B+192|0,B+48|0),xB(B+144|0,B+144|0,0|tC(B+96|0)),OA(B+432|0,I+80|0,B+144|0),m(B+432|0,B+720|0,B+432|0),la(B+432|0,B+432|0),pA(A,B+432|0),h=g}function wA(A,I,g){A|=0,I|=0,g|=0;var B,C,r=0,Q=0,e=0;if(B=h,C=h=h+63&-64,h=h+4096|0,Ua(C+3072|0),Ua(C+2048|0),0!=(0|A)&0!=(0|I)&&(a[C+2048>>2]=a[I>>2],a[C+2048+4>>2]=0,a[C+2048+8>>2]=a[I+4>>2],a[C+2048+8+4>>2]=0,a[C+2048+16>>2]=t[I+8>>0],a[C+2048+16+4>>2]=0,a[C+2048+24>>2]=a[A+16>>2],a[C+2048+24+4>>2]=0,a[C+2048+32>>2]=a[A+8>>2],a[C+2048+32+4>>2]=0,a[C+2048+40>>2]=a[A+36>>2],a[C+2048+40+4>>2]=0,0|a[A+20>>2])){I=0;do{(r=127&I)||(e=0|bC(0|a[C+2048+48>>2],0|a[C+2048+48+4>>2],1,0),Q=0|o(),a[C+2048+48>>2]=e,a[C+2048+48+4>>2]=Q,Ua(C),Ua(C+1024|0),F(C+3072|0,C+2048|0,C),F(C+3072|0,C,C+1024|0)),Q=0|a[C+1024+(r<<3)+4>>2],a[(e=g+(I<<3)|0)>>2]=a[C+1024+(r<<3)>>2],a[e+4>>2]=Q,I=I+1|0}while(I>>>0<(0|a[A+20>>2])>>>0)}h=B}function lA(A,I,g,B){A|=0,I|=0,g|=0,B|=0;var C,t,r,Q,e=0,o=0,c=0;Q=h,r=h=h+63&-64,h=h+64|0,o=52+(e=r+8|0)|0;do{a[e>>2]=0,e=e+4|0}while((0|e)<(0|o));e=0|MI(A),a[r+36>>2]=e,a[r+20>>2]=e,a[r+4>>2]=e,o=0|u(e),a[r+32>>2]=o,C=0|u(e),a[r+16>>2]=C,t=0|u(e),a[r>>2]=t;do{if(0==(0|o)|0==(0|C)|0==(0|t))S(o),S(C),S(t),e=-22;else{if(!(c=0|u(e))){S(o),S(C),S(t),e=-22;break}if(0|(e=0|V(r,A,B))){S(0|a[r+32>>2]),S(0|a[r+16>>2]),S(0|a[r>>2]),S(c);break}B=0|MA(0|a[r+40>>2],0|a[r+44>>2],0|a[r+52>>2],I,g,0|a[r+16>>2],0|a[r+20>>2],c,0|a[r+4>>2],0,0,B),S(0|a[r+32>>2]),S(0|a[r+16>>2]),e=0==(0|B)&&0==(0|XI(c,0|a[r>>2],0|a[r+4>>2]))?0:-35,S(c),S(0|a[r>>2])}}while(0);return h=Q,0|e}function uA(A,I,g,B,C,a,t,r,Q,e,c){var i;A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0,r|=0,Q|=0,i=h,h=h+352|0,DB(i+16|0,64,0,e|=0,c|=0),ca(i+80|0,i+16|0),Lg(i+16|0,64),GC(i+80|0,t,r,Q),I=0|FC(0,0,0|r,0|Q),o(),GC(i+80|0,35440,15&I,0),GC(i+80|0,g,B,C),I=0|FC(0,0,0|B,0|C),o(),GC(i+80|0,35440,15&I,0),tB(i+336|0,r,Q),GC(i+80|0,i+336|0,8,0),tB(i+336|0,B,C),GC(i+80|0,i+336|0,8,0),oa(i+80|0,i),Lg(i+80|0,256),I=0|ba(i,a),Lg(i,16);do{if(A){if(I){tI(0|A,0,0|B),I=-1;break}Ig(A,g,B,C,e,1,c),I=0;break}}while(0);return h=i,0|I}function DA(A,I){A|=0,I|=0;var g,C,a=0,r=0,Q=0;g=h,C=h=h+63&-64,h=h+464|0,a=0;do{Q=0|B[I+a>>0],B[C+(r=a<<1)>>0]=15&Q,B[C+(1|r)>>0]=(255&Q)>>>4,a=a+1|0}while(32!=(0|a));I=0,a=0;do{I=134217728+((r=I+(0|t[(Q=C+a|0)>>0])|0)<<24)>>28,B[Q>>0]=r-(I<<4),a=a+1|0}while(63!=(0|a));B[C+63>>0]=I+(0|t[C+63>>0]),ta(A),I=1;do{Qa(C+64|0,I>>>1,0|B[C+I>>0]),PI(C+304|0,A,C+64|0),YB(A,C+304|0),I=I+2|0}while(I>>>0<64);VB(C+304|0,A),EC(C+184|0,C+304|0),Cg(C+304|0,C+184|0),EC(C+184|0,C+304|0),Cg(C+304|0,C+184|0),EC(C+184|0,C+304|0),Cg(C+304|0,C+184|0),YB(A,C+304|0),I=0;do{Qa(C+64|0,I>>>1,0|B[C+I>>0]),PI(C+304|0,A,C+64|0),YB(A,C+304|0),I=I+2|0}while(I>>>0<64);h=g}function mA(A,I){var g,B,C,t,r,Q,e,o,c,i,_;A|=0,c=0|a[(I|=0)>>2],_=0|a[I+4>>2],e=0|a[I+8>>2],Q=0|a[I+12>>2],r=0|a[I+16>>2],i=0|a[I+20>>2],C=0|a[I+24>>2],B=0|a[I+28>>2],g=0|a[I+32>>2],t=(((((o=((19*((((((((((((16777216+(19*(I=0|a[I+36>>2])|0)|0)>>>25)+c>>26)+_>>25)+e>>26)+Q>>25)+r>>26)+i>>25)+C>>26)+B>>25)+g>>26)+I>>25)|0)+c>>26)+_|0)>>25)+e>>26)+Q>>25)+r>>26)+i|0,a[A>>2]=(19*((((((((((((16777216+(19*I|0)|0)>>>25)+c>>26)+_>>25)+e>>26)+Q>>25)+r>>26)+i>>25)+C>>26)+B>>25)+g>>26)+I>>25)|0)+c&67108863,a[A+4>>2]=33554431&o,a[A+8>>2]=(o>>25)+e&67108863,a[A+12>>2]=((o>>25)+e>>26)+Q&33554431,a[A+16>>2]=(((o>>25)+e>>26)+Q>>25)+r&67108863,a[A+20>>2]=33554431&t,a[A+24>>2]=(t>>25)+C&67108863,a[A+28>>2]=((t>>25)+C>>26)+B&33554431,a[A+32>>2]=(((t>>25)+C>>26)+B>>25)+g&67108863,a[A+36>>2]=((((t>>25)+C>>26)+B>>25)+g>>26)+I&33554431}function FA(A,I,g,B,C,t){g|=0,B|=0,C|=0;var r,Q=0,e=0;r=(I|=0)>>>0>0|0==(0|I)&(A|=0)>>>0>32768?A:32768,I=I>>>0>0|0==(0|I)&A>>>0>32768?I:0,a[(t|=0)>>2]=8;A:do{if(I>>>0<0|0==(0|I)&r>>>0<g>>>5>>>0){a[C>>2]=1,I=0|ia(0|r,0|I,a[t>>2]<<2|0,0),A=0|o(),a[B>>2]=1,A=0|CC(0|I,0|A,1),I=0|o(),g=1;do{if(t=0|$B(1,0,0|g),g=g+1|0,(C=0|o())>>>0>I>>>0|(0|C)==(0|I)&t>>>0>A>>>0)break A;a[B>>2]=g}while(g>>>0<63)}else{for(a[B>>2]=1,A=1;Q=0|$B(1,0,0|A),!((e=0|o())>>>0>0|0==(0|e)&Q>>>0>g>>>11>>>0);)if(A=A+1|0,a[B>>2]=A,A>>>0>=63){A=63;break}B=0|CC(0|(B=0|CC(0|r,0|I,2)),0|o(),0|A),e=(Q=0|o())>>>0<0|0==(0|Q)&B>>>0<1073741823?B:1073741823,a[C>>2]=(e>>>0)/((0|a[t>>2])>>>0)|0}}while(0)}function kA(A){A|=0;var I=0,g=0;do{if(A)if(0|a[A>>2])if((0|a[A+4>>2])>>>0>=16){if(0==(0|a[A+8>>2])&&0|a[A+12>>2]){I=-18;break}if(I=0|a[A+20>>2],!(0|a[A+16>>2]))return 0|(0==(0|I)?-6:-19);if(I>>>0>=8){if(0==(0|a[A+24>>2])&&0|a[A+28>>2]){I=-20;break}if(0==(0|a[A+32>>2])&&0|a[A+36>>2]){I=-21;break}if((I=0|a[A+44>>2])>>>0>=8)if(I>>>0<=2097152)if(I>>>0>=(g=0|a[A+48>>2])<<3>>>0)if(0|a[A+40>>2])if(g){if(!(g>>>0>16777215))return 0|(0==(0|(A=0|a[A+52>>2]))?-28:A>>>0>16777215?-29:0);I=-17}else I=-16;else I=-12;else I=-14;else I=-15;else I=-14}else I=-6}else I=-2;else I=-1;else I=-25}while(0);return 0|I}function bA(A,I,g,C,t,r){var Q,e;if(A|=0,g|=0,C|=0,t|=0,r|=0,Q=h,e=h=h+63&-64,h=h+192|0,((I|=0)-1&255)>63&&st(),0!=(0|g)&C<<24>>24!=0&&(255&C)<=64)return B[e+128>>0]=I,B[e+128+1>>0]=C,B[e+128+2>>0]=1,B[e+128+3>>0]=1,Ca(e+128+4|0),tB(e+128+8|0,0,0),a[e+128+16>>2]=0,a[e+128+16+4>>2]=0,a[e+128+16+8>>2]=0,a[e+128+16+12>>2]=0,t?WB(e+128|0,t):(a[e+128+32>>2]=0,a[e+128+32+4>>2]=0,a[e+128+32+8>>2]=0,a[e+128+32+12>>2]=0),r?jB(e+128|0,r):(a[e+128+48>>2]=0,a[e+128+48+4>>2]=0,a[e+128+48+8>>2]=0,a[e+128+48+12>>2]=0),mI(A,e+128|0),tI(e+(255&C)|0,0,128-(255&C)|0),sA(0|e,0|g,255&C|0),oA(A,e,128,0),Lg(e,128),void(h=Q);st()}function dA(A,I,g){A|=0,I|=0;var C,t=0,r=0,Q=0;C=h,h=h+192|0,(g|=0)>>>0>128?(Og(A),q(A,I,g,0),fB(A,C),I=C,Q=64):Q=g,Og(A),t=128+(g=C+64|0)|0;do{a[g>>2]=909522486,g=g+4|0}while((0|g)<(0|t));if(!(r=0==(0|Q))&&(B[C+64>>0]=54^B[I>>0],1!=(0|Q))){g=1;do{B[(t=C+64+g|0)>>0]=B[t>>0]^B[I+g>>0],g=g+1|0}while((0|g)!=(0|Q))}q(A,C+64|0,128,0),Og(A+208|0),t=128+(g=C+64|0)|0;do{a[g>>2]=1549556828,g=g+4|0}while((0|g)<(0|t));if(!r&&(B[C+64>>0]=92^B[I>>0],1!=(0|Q))){g=1;do{B[(r=C+64+g|0)>>0]=B[r>>0]^B[I+g>>0],g=g+1|0}while((0|g)!=(0|Q))}return q(A+208|0,C+64|0,128,0),Lg(C+64|0,128),Lg(C,64),h=C,0}function HA(A,I,g){A|=0,I|=0;var C,t=0,r=0,Q=0;C=h,h=h+96|0,(g|=0)>>>0>64?(Fg(A),z(A,I,g,0),lB(A,C),I=C,Q=32):Q=g,Fg(A),t=64+(g=C+32|0)|0;do{a[g>>2]=909522486,g=g+4|0}while((0|g)<(0|t));if(!(r=0==(0|Q))&&(B[C+32>>0]=54^B[I>>0],1!=(0|Q))){g=1;do{B[(t=C+32+g|0)>>0]=B[t>>0]^B[I+g>>0],g=g+1|0}while((0|g)!=(0|Q))}z(A,C+32|0,64,0),Fg(A+104|0),t=64+(g=C+32|0)|0;do{a[g>>2]=1549556828,g=g+4|0}while((0|g)<(0|t));if(!r&&(B[C+32>>0]=92^B[I>>0],1!=(0|Q))){g=1;do{B[(r=C+32+g|0)>>0]=B[r>>0]^B[I+g>>0],g=g+1|0}while((0|g)!=(0|Q))}return z(A+104|0,C+32|0,64,0),Lg(C+32|0,64),Lg(C,32),h=C,0}function GA(A,I){A|=0,I|=0;var g,C,t=0,r=0;g=h,C=h=h+63&-64,h=h+128|0,a[C+64>>2]=0,a[C+64+4>>2]=0,a[C+64+8>>2]=0,a[C+64+12>>2]=0,a[C+64+16>>2]=0,a[C+64+20>>2]=0,a[C+64+24>>2]=0,a[C+64+28>>2]=0,B[C+64>>0]=1,a[(r=C+64+32|0)>>2]=a[8504],a[r+4>>2]=a[8505],a[r+8>>2]=a[8506],a[r+12>>2]=a[8507],a[r+16>>2]=a[8508],a[r+20>>2]=a[8509],a[r+24>>2]=a[8510],a[r+28>>2]=a[8511],a[C+32>>2]=0,a[C+32+4>>2]=0,a[C+32+8>>2]=0,a[C+32+12>>2]=0,a[C+32+16>>2]=0,a[C+32+20>>2]=0,a[C+32+24>>2]=0,a[C+32+28>>2]=0,t=(r=C)+32|0;do{B[r>>0]=0|B[I>>0],r=r+1|0,I=I+1|0}while((0|r)<(0|t));eB(C+64|0,C),D(C+64|0),I=C+64|0,t=(r=A)+32|0;do{B[r>>0]=0|B[I>>0],r=r+1|0,I=I+1|0}while((0|r)<(0|t));h=g}function SA(A,I){A|=0,I|=0;var g,C,t=0,r=0;g=h,C=h=h+63&-64,h=h+128|0,a[C+64>>2]=0,a[C+64+4>>2]=0,a[C+64+8>>2]=0,a[C+64+12>>2]=0,a[C+64+16>>2]=0,a[C+64+20>>2]=0,a[C+64+24>>2]=0,a[C+64+28>>2]=0,a[(r=C+64+32|0)>>2]=a[8504],a[r+4>>2]=a[8505],a[r+8>>2]=a[8506],a[r+12>>2]=a[8507],a[r+16>>2]=a[8508],a[r+20>>2]=a[8509],a[r+24>>2]=a[8510],a[r+28>>2]=a[8511],a[C+32>>2]=0,a[C+32+4>>2]=0,a[C+32+8>>2]=0,a[C+32+12>>2]=0,a[C+32+16>>2]=0,a[C+32+20>>2]=0,a[C+32+24>>2]=0,a[C+32+28>>2]=0,t=(r=C)+32|0;do{B[r>>0]=0|B[I>>0],r=r+1|0,I=I+1|0}while((0|r)<(0|t));eB(C+64|0,C),D(C+64|0),I=C+64|0,t=(r=A)+32|0;do{B[r>>0]=0|B[I>>0],r=r+1|0,I=I+1|0}while((0|r)<(0|t));h=g}function xA(A,I,g){var C,a;I|=0,g|=0,C=0|bC(t[64+(A|=0)>>0]|t[A+64+1>>0]<<8|t[A+64+2>>0]<<16|t[A+64+3>>0]<<24|0,t[A+64+4>>0]|t[A+64+4+1>>0]<<8|t[A+64+4+2>>0]<<16|t[A+64+4+3>>0]<<24|0,0|I,0|g),a=0|o(),B[A+64>>0]=C,B[A+64+1>>0]=C>>8,B[A+64+2>>0]=C>>16,B[A+64+3>>0]=C>>24,B[A+64+4>>0]=a,B[A+64+4+1>>0]=a>>8,B[A+64+4+2>>0]=a>>16,B[A+64+4+3>>0]=a>>24,I=0|bC(t[A+72>>0]|t[A+72+1>>0]<<8|t[A+72+2>>0]<<16|t[A+72+3>>0]<<24|0,t[A+72+4>>0]|t[A+72+4+1>>0]<<8|t[A+72+4+2>>0]<<16|t[A+72+4+3>>0]<<24|0,1&(a>>>0<g>>>0|(0|a)==(0|g)&C>>>0<I>>>0)|0,0),g=0|o(),B[A+72>>0]=I,B[A+72+1>>0]=I>>8,B[A+72+2>>0]=I>>16,B[A+72+3>>0]=I>>24,B[A+72+4>>0]=g,B[A+72+4+1>>0]=g>>8,B[A+72+4+2>>0]=g>>16,B[A+72+4+3>>0]=g>>24}function UA(A,I){A|=0;var g,B=0;return g=h,B=h=h+63&-64,h=h+480|0,0|_B(I|=0)?(J(B+336|0,I),d(B+288|0,B+336|0),mC(B+240|0),OA(B+240|0,B+240|0,B+288|0),d(B+144|0,B+240|0),mC(B+192|0),$A(B+192|0,B+192|0,B+288|0),d(B+96|0,B+192|0),m(B+48|0,16,B+144|0),lI(B+48|0,B+48|0),OA(B+48|0,B+48|0,B+96|0),m(B,B+48|0,B+96|0),mC(B+384|0),I=0|QI(B+432|0,B+384|0,B),m(A,B+432|0,B+192|0),m(A+40|0,B+432|0,A),m(A+40|0,A+40|0,B+48|0),m(A,A,B+336|0),$A(A,A,A),la(A,A),m(A+40|0,B+240|0,A+40|0),mC(A+80|0),m(A+120|0,A,A+40|0),A=0-(0|(B=0|tC(A+120|0)|1-I)|zB(A+40|0))|0):A=-1,h=g,0|A}function MA(A,I,g,B,C,t,r,Q,e,o,c,i){var _,E,n;A|=0,I|=0,g|=0,B|=0,C|=0,t|=0,r|=0,Q|=0,o|=0,c|=0,i|=0,n=h,E=h=h+63&-64,h=h+64|0,_=0|u(e|=0);do{if(_){if(a[E>>2]=_,a[E+4>>2]=e,a[E+8>>2]=B,a[E+12>>2]=C,a[E+16>>2]=t,a[E+20>>2]=r,a[E+24>>2]=0,a[E+24+4>>2]=0,a[E+24+8>>2]=0,a[E+24+12>>2]=0,a[E+40>>2]=A,a[E+44>>2]=I,a[E+48>>2]=g,a[E+52>>2]=g,a[E+56>>2]=0,0|(I=0|TA(E,i))){Lg(_,e),S(_);break}if(0|Q&&sA(0|Q,0|_,0|e),0!=(0|o)&0!=(0|c)&&0|P(o,c,E,i)){Lg(_,e),Lg(o,c),S(_),I=-31;break}Lg(_,e),S(_),I=0}else I=-22}while(0);return h=n,0|I}function JA(A,I,g,B,C,t,r,Q,e,c,i,_){return A|=0,I|=0,g|=0,B|=0,C|=0,t|=0,r|=0,Q|=0,e|=0,c|=0,c=h,h=h+336|0,DB(c,64,0,i|=0,_|=0),ca(c+64|0,c),Lg(c,64),GC(c+64|0,r,Q,e),r=0|FC(0,0,0|Q,0|e),o(),GC(c+64|0,35440,15&r,0),Ig(A,B,C,t,i,1,_),GC(c+64|0,A,C,t),i=0|FC(0,0,0|C,0|t),o(),GC(c+64|0,35440,15&i,0),tB(c+320|0,Q,e),GC(c+64|0,c+320|0,8,0),tB(c+320|0,C,t),GC(c+64|0,c+320|0,8,0),oa(c+64|0,I),Lg(c+64|0,256),0|g&&(a[g>>2]=16,a[g+4>>2]=0),h=c,0}function vA(A,I){var g,B,C=0;return B=h,g=h=h+63&-64,h=h+288|0,J(40+(A|=0)|0,I|=0),mC(A+80|0),d(g+240|0,A+40|0),m(g+192|0,g+240|0,16),OA(g+240|0,g+240|0,A+80|0),$A(g+192|0,g+192|0,A+80|0),d(g+144|0,g+192|0),m(g+144|0,g+144|0,g+192|0),d(A,g+144|0),m(A,A,g+192|0),m(A,A,g+240|0),QA(A,A),m(A,A,g+144|0),m(A,A,g+240|0),d(g+96|0,A),m(g+96|0,g+96|0,g+192|0),OA(g+48|0,g+96|0,g+240|0),0|zB(g+48|0)?C=4:($A(g,g+96|0,g+240|0),0|zB(g)?(m(A,A,64),C=4):A=-1),4==(0|C)&&((0|(C=0|tC(A)))==((0|t[I+31>>0])>>>7|0)&&lI(A,A),m(A+120|0,A,A+40|0),A=0),h=B,0|A}function NA(A,I,g){var B,C,t,r,Q,e,o,c,i,_,E,n,s,y,h,p,f,w,l;I|=0,g|=0,l=0|a[(A|=0)>>2],f=0|a[A+4>>2],h=0|a[A+8>>2],s=0|a[A+12>>2],E=0|a[A+16>>2],i=0|a[A+20>>2],o=0|a[A+24>>2],Q=0|a[A+28>>2],t=0|a[A+32>>2],B=0|a[A+36>>2],w=(a[I+4>>2]^f)&0-g,p=(a[I+8>>2]^h)&0-g,y=(a[I+12>>2]^s)&0-g,n=(a[I+16>>2]^E)&0-g,_=(a[I+20>>2]^i)&0-g,c=(a[I+24>>2]^o)&0-g,e=(a[I+28>>2]^Q)&0-g,r=(a[I+32>>2]^t)&0-g,C=(a[I+36>>2]^B)&0-g,a[A>>2]=(a[I>>2]^l)&0-g^l,a[A+4>>2]=w^f,a[A+8>>2]=p^h,a[A+12>>2]=y^s,a[A+16>>2]=n^E,a[A+20>>2]=_^i,a[A+24>>2]=c^o,a[A+28>>2]=e^Q,a[A+32>>2]=r^t,a[A+36>>2]=C^B}function RA(A){var I,g,C=0,r=0,Q=0;I=h,g=h=h+63&-64,h=h+48|0,r=A|=0,Q=(C=g)+32|0;do{B[C>>0]=0|B[r>>0],C=C+1|0,r=r+1|0}while((0|C)<(0|Q));C=t[A+36+4>>0]|t[A+36+4+1>>0]<<8|t[A+36+4+2>>0]<<16|t[A+36+4+3>>0]<<24,a[g+32>>2]=t[A+36>>0]|t[A+36+1>>0]<<8|t[A+36+2>>0]<<16|t[A+36+3>>0]<<24,a[g+32+4>>2]=C,oB(g,g,40,0,A+32|0,A),r=g,Q=(C=A)+32|0;do{B[C>>0]=0|B[r>>0],C=C+1|0,r=r+1|0}while((0|C)<(0|Q));r=0|a[g+32>>2],Q=0|a[g+32+4>>2],B[A+36>>0]=r,B[A+36+1>>0]=r>>8,B[A+36+2>>0]=r>>16,B[A+36+3>>0]=r>>24,B[A+36+4>>0]=Q,B[A+36+4+1>>0]=Q>>8,B[A+36+4+2>>0]=Q>>16,B[A+36+4+3>>0]=Q>>24,DC(A),h=I}function YA(A,I){var g,B,C,a,r;return C=h,r=h=h+63&-64,h=h+384|0,J(40+(A|=0)|0,I|=0),mC(A+80|0),d(r+336|0,A+40|0),m(r+288|0,r+336|0,16),OA(r+336|0,r+336|0,A+80|0),$A(r+288|0,r+288|0,A+80|0),d(r+240|0,r+288|0),m(r+240|0,r+240|0,r+288|0),d(A,r+240|0),m(A,A,r+288|0),m(A,A,r+336|0),QA(A,A),m(A,A,r+240|0),m(A,A,r+336|0),d(r+192|0,A),m(r+192|0,r+192|0,r+288|0),OA(r+144|0,r+192|0,r+336|0),$A(r+96|0,r+192|0,r+336|0),g=0|zB(r+144|0),B=0|zB(r+96|0),m(r,A,64),NA(A,r,1-g|0),lI(r+48|0,A),a=0|tC(A),NA(A,r+48|0,(0|t[I+31>>0])>>>7^a),m(A+120|0,A,A+40|0),h=C,(B|g)-1|0}function LA(A,I,g,B,C,a,t,r,Q,e,o){var c;A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0,r|=0,Q|=0,c=h,h=h+352|0,RB(c+16|0,64,0,e|=0,o|=0),ca(c+80|0,c+16|0),Lg(c+16|0,64),GC(c+80|0,t,r,Q),tB(c+336|0,r,Q),GC(c+80|0,c+336|0,8,0),GC(c+80|0,g,B,C),tB(c+336|0,B,C),GC(c+80|0,c+336|0,8,0),oa(c+80|0,c),Lg(c+80|0,256),I=0|ba(c,a),Lg(c,16);do{if(A){if(I){tI(0|A,0,0|B),I=-1;break}Tg(A,g,B,C,e,1,0,o),I=0;break}}while(0);return h=c,0|I}function PA(A){A|=0;var I=0,g=0,C=0,t=0;A:do{g=65,I=35361;do{if((0|B[I>>0])==(255&A)<<24>>24){t=6;break A}I=I+1|0,C=0!=(0|(g=g+-1|0))}while(C&0!=(3&I|0));C?t=6:I=0}while(0);A:do{if(6==(0|t)&&(0|B[I>>0])!=(255&A)<<24>>24){C=0|r(255&A,16843009);I:do{if(g>>>0>3){do{if((-2139062144&(t=a[I>>2]^C)^-2139062144)&t+-16843009|0)break I;I=I+4|0,g=g+-4|0}while(g>>>0>3);if(!g){I=0;break A}}}while(0);for(;;){if((0|B[I>>0])==(255&A)<<24>>24)break A;if(!(g=g+-1|0)){I=0;break}I=I+1|0}}}while(0);return 0|I}function KA(A,I){A|=0,I|=0;var g=0,C=0,a=0,r=0,Q=0;g=0;do{B[A+g>>0]=(0|t[I+(g>>>3)>>0])>>>(7&g)&1,g=g+1|0}while(256!=(0|g));Q=0;do{a=A+Q|0;A:do{if(0|B[a>>0]){r=1;do{if((g=r+Q|0)>>>0>=256)break A;I=0|B[A+g>>0];I:do{if(I<<24>>24){if(((C=I<<24>>24<<r)+(I=0|B[a>>0])|0)<16){B[a>>0]=C+I,B[A+g>>0]=0;break}if((I-C|0)<-15)break A;for(B[a>>0]=I-C;0|B[(I=A+g|0)>>0];)if(B[I>>0]=0,(g=g+1|0)>>>0>=256)break I;B[I>>0]=1}}while(0);r=r+1|0}while(r>>>0<7)}}while(0);Q=Q+1|0}while(256!=(0|Q))}function qA(A,I,g,B,C,t,r){var Q,e;A|=0,I|=0,g|=0,B|=0,C|=0,t|=0,Q=h,e=h=h+63&-64,h=h+560|0,dC(e+192|0,r|=0),Xg(e+128|0,t,32,0),q(e+192|0,e+128+32|0,32,0),q(e+192|0,g,B,C),fB(e+192|0,e+64|0),Rg(A+32|0,t+32|0,32),D(e+64|0),DA(e+400|0,e+64|0),yg(A,e+400|0),dC(e+192|0,r),q(e+192|0,A,64,0),q(e+192|0,g,B,C),fB(e+192|0,e),D(e),WC(e+128|0),f(A+32|0,e,e+128|0,e+64|0),Lg(e+128|0,64),Lg(e+64|0,64),0|I&&(a[I>>2]=64,a[I+4>>2]=0),h=Q}function XA(A,I,g,B,C,t){A|=0,I|=0,g|=0,B|=0,C|=0,t|=0;var Q=0;do{if(I){if(Q=(0|a[A+24>>2])-(0|a[A+20>>2])|0,t){Q=B+-1+Q|0;break}Q=Q+((0==(0|B))<<31>>31)|0;break}if(!(g<<24>>24)){Q=B+-1|0;break}if(Q=0|r(0|a[A+20>>2],255&g),t){Q=B+-1+Q|0;break}Q=Q+((0==(0|B))<<31>>31)|0;break}while(0);return NB(0|C,0,0|C,0),NB(0|o(),0,0|Q,0),t=0|FC(Q+-1|0,0,0|o(),0),C=0|o(),0==(0|I)|g<<24>>24==3?(Q=0,B=0):(Q=0|r(0|a[A+20>>2],1+(255&g)|0),B=0),A=0|GB(0|(I=0|bC(0|t,0|C,0|Q,0|B)),0|(g=0|o()),0|a[A+24>>2],0),o(),0|A}function jA(A,I,g,B,C){B|=0,C|=0;var t,r,Q,e=0;if(Q=h,r=h=h+63&-64,h=h+64|0,(g|=0)>>>0>0|0==(0|g)&(I|=0)>>>0>4294967295|(t=0|MI(A|=0))>>>0>127)a[8886]=28,g=-1;else{e=(g=r)+60|0;do{a[g>>2]=0,g=g+4|0}while((0|g)<(0|e));(e=0|function(A){var I;return(I=0|u(A|=0))&&3&a[I+-4>>2]?(tI(0|I,0,0|A),0|I):0|I}(t))?(a[r+16>>2]=e,a[r+8>>2]=e,a[r>>2]=e,a[r+20>>2]=t,a[r+12>>2]=t,a[r+4>>2]=t,a[r+24>>2]=0,a[r+24+4>>2]=0,a[r+24+8>>2]=0,a[r+24+12>>2]=0,0|V(r,A,C)?(a[8886]=28,g=-1):g=(0|a[r+40>>2])==(0|I)?(0|a[r+44>>2])!=(B>>>10|0)&1:1,S(e)):g=-1}return h=Q,0|g}function TA(A,I){I|=0;var g,B,C=0,t=0,Q=0;if(B=h,g=h=h+63&-64,h=h+48|0,!(C=0|kA(A|=0)))if((I+-1|0)>>>0<=1){if(t=0|a[A+44>>2],C=0|a[A+48>>2],Q=0|r(t=((t>>>0<C<<3>>>0?C<<3:t)>>>0)/(C<<2>>>0)|0,C<<2),a[g>>2]=0,a[g+8>>2]=a[A+40>>2],a[g+12>>2]=-1,a[g+16>>2]=Q,a[g+20>>2]=t,a[g+24>>2]=t<<2,a[g+28>>2]=C,a[g+32>>2]=a[A+52>>2],a[g+36>>2]=I,!(C=0|function(A,I){A|=0,I|=0;var g,B,C=0;B=h,g=h=h+63&-64,h=h+80|0;do{if(0==(0|A)|0==(0|I))C=-25;else{if(C=0|u(a[A+20>>2]<<3),a[A+4>>2]=C,C){if(C=0|nI(A,0|a[A+16>>2])){_C(A,0|a[I+56>>2]);break}O(g,I,0|a[A+36>>2]),Lg(g+64|0,8),DI(g,A),Lg(g,72),C=0;break}C=-22}}while(0);return h=B,0|C}(g,A))){if(0|a[g+8>>2]){C=0;do{iI(g,C),C=C+1|0}while(C>>>0<(0|a[g+8>>2])>>>0)}!function(A,I){var g,B,C=0,t=0;if(g=h,B=h=h+63&-64,h=h+2048|0,0!=(0|(A|=0))&0!=(0|(I|=0))){if(da(B+1024|0,(0|a[4+(0|a[I>>2])>>2])+(a[I+24>>2]<<10)-1024|0),(0|a[I+28>>2])>>>0>1){C=1;do{t=(t=0|a[I+24>>2])-1+(0|r(t,C))|0,Pg(B+1024|0,(0|a[4+(0|a[I>>2])>>2])+(t<<10)|0),C=C+1|0}while(C>>>0<(0|a[I+28>>2])>>>0)}!function(A,I){A|=0,I|=0;var g=0,B=0;g=0;do{tB(A+(g<<3)|0,0|a[(B=I+(g<<3)|0)>>2],0|a[B+4>>2]),g=g+1|0}while(128!=(0|g))}(B,B+1024|0),AA(0|a[A>>2],0|a[A+4>>2],B,1024),Lg(B+1024|0,1024),Lg(B,1024),_C(I,0|a[A+56>>2])}h=g}(A,g),C=0}}else C=-26;return h=B,0|C}function VA(A,I,g,B,C,a){var t,r;return I|=0,g|=0,B|=0,C|=0,a|=0,r=h,t=h=h+63&-64,h=h+592|0,0!=(0|mg(32+(A|=0)|0))&&0==(0|gI(A))&&0!=(0|uB(C))&&0==(0|gI(C))&&0==(0|vA(t+424|0,C))?(dC(t+96|0,a),q(t+96|0,A,32,0),q(t+96|0,C,32,0),q(t+96|0,I,g,B),fB(t+96|0,t+32|0),D(t+32|0),X(t+304|0,t+32|0,t+424|0,A+32|0),yg(t,t+304|0),g=0|ka(t,A),g=0|((0|t)==(0|A)?-1:g)|XI(A,t,32)):g=-1,h=r,0|g}function WA(A,I,g,C,t){A|=0,I|=0,g|=0,t|=0;var r,Q,e,c=0,i=0,_=0,E=0,n=0;return e=h,Q=h=h+63&-64,h=h+48|0,(r=0|Dg(C|=0,Q+40|0,Q+36|0,Q+32|0))?(_=0|$B(1,0,0|a[Q+40>>2]),E=0|o(),!((45+(c=(i=(c=0|function(A){return 0|$g(A|=0,1+(0|MI(A))|0)}(r))?c-r|0:0|MI(r))+(r-C)|0)|0)>>>0>102|(c+45|0)>>>0<i>>>0||0!=(0|eA(A,I,g,r,i,_,E,0|a[Q+36>>2],0|a[Q+32>>2],Q,32)))&&(sA(0|t,0|C,0|c),B[t+c>>0]=36,n=0|OI(t+c+1|0,t+102-(t+c+1)|0,Q),Lg(Q,32),0!=(0|n)&n>>>0<(t+102|0)>>>0)?B[n>>0]=0:t=0):t=0,h=e,0|t}function zA(A,I,g){A|=0,I|=0,g|=0;var C,t,r=0,Q=0;C=h,t=h=h+63&-64,h=h+128|0,a[(Q=t+64+32|0)>>2]=0,a[Q+4>>2]=0,a[Q+8>>2]=0,a[Q+12>>2]=0,a[Q+16>>2]=0,a[Q+20>>2]=0,a[Q+24>>2]=0,a[Q+28>>2]=0,r=32+(Q=t+64|0)|0;do{B[Q>>0]=0|B[I>>0],Q=Q+1|0,I=I+1|0}while((0|Q)<(0|r));a[t+32>>2]=0,a[t+32+4>>2]=0,a[t+32+8>>2]=0,a[t+32+12>>2]=0,a[t+32+16>>2]=0,a[t+32+20>>2]=0,a[t+32+24>>2]=0,a[t+32+28>>2]=0,I=g,r=(Q=t)+32|0;do{B[Q>>0]=0|B[I>>0],Q=Q+1|0,I=I+1|0}while((0|Q)<(0|r));iB(t+64|0,t),WI(A,t+64|0),h=C}function ZA(A,I){A|=0,I|=0;var g=0,C=0;A:do{if(255&I){if(3&A)do{if((C=0|B[A>>0])<<24>>24==0||C<<24>>24==(255&I)<<24>>24)break A;A=A+1|0}while(0!=(3&A|0));C=0|r(255&I,16843009),g=0|a[A>>2];I:do{if(!((-2139062144&g^-2139062144)&g+-16843009))do{if((-2139062144&(g^=C)^-2139062144)&g+-16843009|0)break I;g=0|a[(A=A+4|0)>>2]}while(!((-2139062144&g^-2139062144)&g+-16843009|0))}while(0);for(;(C=0|B[A>>0])<<24>>24!=0&&C<<24>>24!=(255&I)<<24>>24;)A=A+1|0}else A=A+(0|MI(A))|0}while(0);return 0|A}function OA(A,I,g){var B,C,t,r,Q,e,o,c,i;A|=0,g|=0,i=(0|a[4+(I|=0)>>2])-(0|a[g+4>>2])|0,c=(0|a[I+8>>2])-(0|a[g+8>>2])|0,o=(0|a[I+12>>2])-(0|a[g+12>>2])|0,e=(0|a[I+16>>2])-(0|a[g+16>>2])|0,Q=(0|a[I+20>>2])-(0|a[g+20>>2])|0,r=(0|a[I+24>>2])-(0|a[g+24>>2])|0,t=(0|a[I+28>>2])-(0|a[g+28>>2])|0,C=(0|a[I+32>>2])-(0|a[g+32>>2])|0,B=(0|a[I+36>>2])-(0|a[g+36>>2])|0,a[A>>2]=(0|a[I>>2])-(0|a[g>>2]),a[A+4>>2]=i,a[A+8>>2]=c,a[A+12>>2]=o,a[A+16>>2]=e,a[A+20>>2]=Q,a[A+24>>2]=r,a[A+28>>2]=t,a[A+32>>2]=C,a[A+36>>2]=B}function $A(A,I,g){var B,C,t,r,Q,e,o,c,i;A|=0,I|=0,i=(0|a[4+(g|=0)>>2])+(0|a[I+4>>2])|0,c=(0|a[g+8>>2])+(0|a[I+8>>2])|0,o=(0|a[g+12>>2])+(0|a[I+12>>2])|0,e=(0|a[g+16>>2])+(0|a[I+16>>2])|0,Q=(0|a[g+20>>2])+(0|a[I+20>>2])|0,r=(0|a[g+24>>2])+(0|a[I+24>>2])|0,t=(0|a[g+28>>2])+(0|a[I+28>>2])|0,C=(0|a[g+32>>2])+(0|a[I+32>>2])|0,B=(0|a[g+36>>2])+(0|a[I+36>>2])|0,a[A>>2]=(0|a[g>>2])+(0|a[I>>2]),a[A+4>>2]=i,a[A+8>>2]=c,a[A+12>>2]=o,a[A+16>>2]=e,a[A+20>>2]=Q,a[A+24>>2]=r,a[A+28>>2]=t,a[A+32>>2]=C,a[A+36>>2]=B}function AI(A,I){A|=0;var g,C,r,Q=0;C=h,r=h=h+63&-64,h=h+160|0,g=0|B[(I|=0)>>0],Q=0;do{B[r+128+Q>>0]=0|B[I+(63-Q)>>0],B[r+96+Q>>0]=0|B[I+(31-Q)>>0],Q=Q+1|0}while(32!=(0|Q));B[r+128+31>>0]=127&B[r+128+31>>0],B[r+96+31>>0]=127&B[r+96+31>>0],J(r+48|0,r+128|0),J(r,r+96|0),a[r+48>>2]=(0-((0|t[I+32>>0])>>>7)&19)+(0|a[r+48>>2])+(38*(0|a[r>>2])|0),I=1;do{a[(Q=r+48+(I<<2)|0)>>2]=(0|a[Q>>2])+(38*(0|a[r+(I<<2)>>2])|0),I=I+1|0}while(10!=(0|I));mA(r+48|0,r+48|0),yA(A,r+48|0,-128&g),h=C}function II(A,I,g,B,C,t,r,Q,e,o,c,i){return A|=0,I|=0,g|=0,B|=0,C|=0,t|=0,r|=0,Q|=0,e|=0,o|=0,o=h,h=h+336|0,RB(o,64,0,c|=0,i|=0),ca(o+64|0,o),Lg(o,64),GC(o+64|0,r,Q,e),tB(o+320|0,Q,e),GC(o+64|0,o+320|0,8,0),Tg(A,B,C,t,c,1,0,i),GC(o+64|0,A,C,t),tB(o+320|0,C,t),GC(o+64|0,o+320|0,8,0),oa(o+64|0,I),Lg(o+64|0,256),0|g&&(a[g>>2]=16,a[g+4>>2]=0),h=o,0}function gI(A){A|=0;var I,g,C=0,a=0,r=0,Q=0;I=h,g=h=h+63&-64,h=h+16|0,B[g>>0]=0,B[g+1>>0]=0,B[g+2>>0]=0,B[g+3>>0]=0,B[g+4>>0]=0,B[g+5>>0]=0,B[g+6>>0]=0,r=0;do{C=0|B[A+r>>0],a=0;do{B[(Q=g+a|0)>>0]=B[Q>>0]|B[32096+(a<<5)+r>>0]^C,a=a+1|0}while(7!=(0|a));r=r+1|0}while(31!=(0|r));C=127&B[A+31>>0],a=0;do{B[(Q=g+a|0)>>0]=B[Q>>0]|C^B[32096+(a<<5)+31>>0],a=a+1|0}while(7!=(0|a));C=0,a=0;do{a=(0|t[g+C>>0])-1|a,C=C+1|0}while(7!=(0|C));return h=I,a>>>8&1|0}function BI(A,I,g){var B,C,a;A|=0,I|=0,B=h,a=h=h+63&-64,h=h+160|0,g=((g|=0)<<24>>24)-((0-(255&(C=0|Pa(g)))&g<<24>>24)<<1)&255,function(A){mC(A|=0),mC(A+40|0),mC(A+80|0),jC(A+120|0)}(A),HB(A,I,0|Da(g,1)),HB(A,I+160|0,0|Da(g,2)),HB(A,I+320|0,0|Da(g,3)),HB(A,I+480|0,0|Da(g,4)),HB(A,I+640|0,0|Da(g,5)),HB(A,I+800|0,0|Da(g,6)),HB(A,I+960|0,0|Da(g,7)),HB(A,I+1120|0,0|Da(g,8)),UI(a,A+40|0),UI(a+40|0,A),UI(a+80|0,A+80|0),lI(a+120|0,A+120|0),HB(A,a,C),h=B}function CI(A,I,g,B,C,t,r,Q,e,o,c){g|=0,B|=0,C|=0,t|=0,r|=0,Q|=0,e|=0,o|=0,c|=0,tI(0|(A|=0),0,0|(I|=0));do{if(!(g>>>0>0|0==(0|g)&I>>>0>4294967295)){if(g>>>0<0|0==(0|g)&I>>>0<16){a[8886]=28,I=-1;break}if((e|t)>>>0>0|0==(e|t|0)&(Q|C)>>>0>4294967295|o>>>0>2147483648){a[8886]=22,I=-1;break}if(e>>>0<0|0==(0|e)&Q>>>0<3|o>>>0<8192){a[8886]=28,I=-1;break}if(1==(0|c)){I=(0!=(0|oC(Q,o>>>10,B,C,r,A,I)))<<31>>31;break}a[8886]=28,I=-1;break}a[8886]=22,I=-1}while(0);return 0|I}function aI(A,I,g,C){var t,r;A|=0,g|=0,C|=0,t=h,r=h=h+63&-64,h=h+64|0,((I|=0)-1&255)>63&&st(),B[r>>0]=I,B[r+1>>0]=0,B[r+2>>0]=1,B[r+3>>0]=1,Ca(r+4|0),tB(r+8|0,0,0),a[r+16>>2]=0,a[r+16+4>>2]=0,a[r+16+8>>2]=0,a[r+16+12>>2]=0,g?WB(r,g):(a[r+32>>2]=0,a[r+32+4>>2]=0,a[r+32+8>>2]=0,a[r+32+12>>2]=0),C?jB(r,C):(a[r+48>>2]=0,a[r+48+4>>2]=0,a[r+48+8>>2]=0,a[r+48+12>>2]=0),mI(A,r),h=t}function tI(A,I,g){I|=0;var C,t=0;if(C=(A|=0)+(g|=0)|0,I&=255,(0|g)>=67){for(;3&A;)B[A>>0]=I,A=A+1|0;for(t=I|I<<8|I<<16|I<<24;(0|A)<=((-4&C)-64|0);)a[A>>2]=t,a[A+4>>2]=t,a[A+8>>2]=t,a[A+12>>2]=t,a[A+16>>2]=t,a[A+20>>2]=t,a[A+24>>2]=t,a[A+28>>2]=t,a[A+32>>2]=t,a[A+36>>2]=t,a[A+40>>2]=t,a[A+44>>2]=t,a[A+48>>2]=t,a[A+52>>2]=t,a[A+56>>2]=t,a[A+60>>2]=t,A=A+64|0;for(;(0|A)<(-4&C|0);)a[A>>2]=t,A=A+4|0}for(;(0|A)<(0|C);)B[A>>0]=I,A=A+1|0;return C-g|0}function rI(A,I,g,B,C,t,r,Q,e,o,c){g|=0,B|=0,C|=0,t|=0,r|=0,Q|=0,e|=0,o|=0,c|=0,tI(0|(A|=0),0,0|(I|=0));do{if(!(g>>>0>0|0==(0|g)&I>>>0>4294967295)){if(g>>>0<0|0==(0|g)&I>>>0<16){a[8886]=28,I=-1;break}if((e|t)>>>0>0|0==(e|t|0)&(Q|C)>>>0>4294967295|o>>>0>2147483648){a[8886]=22,I=-1;break}if(0==(0|Q)&0==(0|e)|o>>>0<8192){a[8886]=28,I=-1;break}if(2==(0|c)){I=(0!=(0|eC(Q,o>>>10,B,C,r,A,I)))<<31>>31;break}a[8886]=28,I=-1;break}a[8886]=22,I=-1}while(0);return 0|I}function QI(A,I,g){var B,C,a;return A|=0,I|=0,B=h,a=h=h+63&-64,h=h+288|0,d(a+240|0,g|=0),m(a+240|0,a+240|0,g),d(A,a+240|0),m(A,A,g),m(A,A,I),QA(A,A),m(A,A,a+240|0),m(A,A,I),d(a+192|0,A),m(a+192|0,a+192|0,g),OA(a+144|0,a+192|0,I),$A(a+96|0,a+192|0,I),m(a+48|0,I,64),$A(a+48|0,a+192|0,a+48|0),g=0|zB(a+144|0),I=0|zB(a+96|0),C=0|zB(a+48|0),m(a,A,64),NA(A,a,C|I),la(A,A),h=B,I|g|0}function eI(A,I){A|=0;var g=0;g=67108863&(0|ga(I|=0)),a[A>>2]=g,g=(0|ga(I+3|0))>>>2&67108611,a[A+4>>2]=g,g=(0|ga(I+6|0))>>>4&67092735,a[A+8>>2]=g,g=(0|ga(I+9|0))>>>6&66076671,a[A+12>>2]=g,g=(0|ga(I+12|0))>>>8&1048575,a[A+16>>2]=g,a[A+20>>2]=0,a[A+20+4>>2]=0,a[A+20+8>>2]=0,a[A+20+12>>2]=0,a[A+20+16>>2]=0,g=0|ga(I+16|0),a[A+40>>2]=g,g=0|ga(I+20|0),a[A+44>>2]=g,g=0|ga(I+24|0),a[A+48>>2]=g,I=0|ga(I+28|0),a[A+52>>2]=I,a[A+56>>2]=0,a[A+56+4>>2]=0,B[A+80>>0]=0}function oI(A,I,g,B,C,t){A|=0,I|=0,g|=0,B|=0,C|=0,t|=0;var r=0,Q=0,e=0;do{if(C>>>0<0|0==(0|C)&B>>>0<64||(r=0|bC(0|B,0|C,-64,-1),(Q=0|o())>>>0>0|0==(0|Q)&r>>>0>4294967231))e=10;else{if(0|wC(g,g+64|0,r,Q,t)){if(!A){e=10;break}tI(0|A,0,0|r),e=10;break}0|I&&(a[I>>2]=r,a[I+4>>2]=Q),A?(Rg(0|A,g+64|0,0|r),B=0):B=0}}while(0);return 10==(0|e)&&(I?(a[I>>2]=0,a[I+4>>2]=0,B=-1):B=-1),0|B}function cI(A,I,g,C){var a,t;if(A|=0,I|=0,C|=0,t=h,a=h=h+63&-64,h=h+320|0,0!=(0|uB(g|=0))&&0==(0|gI(g))&&0==(0|YA(a,g))&&0!=(0|qB(a))){g=0;do{B[A+g>>0]=0|B[I+g>>0],g=g+1|0}while(32!=(0|g));0|C&&TC(A),B[A+31>>0]=127&B[A+31>>0],W(a+160|0,A,a),yg(A,a+160|0),g=0|mB(A)?-1:(0!=(0|Hg(I,32)))<<31>>31}else g=-1;return h=t,0|g}function iI(A,I){I|=0;var g,C,t=0,r=0;if(g=h,C=h=h+63&-64,h=h+32|0,0|(A|=0)&&0|(t=0|a[A+28>>2])){a[C>>2]=I,r=0;do{if(B[C+8>>0]=r,t){I=0;do{a[C+4>>2]=I,a[C+12>>2]=0,a[C+16>>2]=a[C>>2],a[C+16+4>>2]=a[C+4>>2],a[C+16+8>>2]=a[C+8>>2],a[C+16+12>>2]=a[C+12>>2],$(A,C+16|0),I=I+1|0,t=0|a[A+28>>2]}while(I>>>0<t>>>0)}else t=0;r=r+1|0}while(4!=(0|r))}h=g}function _I(A,I,g,C){A|=0,g|=0,C|=0;var t,r,Q=0;if(t=h,r=h=h+63&-64,h=h+192|0,((I|=0)-1&255)>63&&st(),!((C+-1&255)>63|0==(0|g))){B[r+128>>0]=I,B[r+128+1>>0]=C,B[r+128+2>>0]=1,B[r+128+3>>0]=1,Ca(r+128+4|0),tB(r+128+8|0,0,0),Q=48+(I=r+128+16|0)|0;do{a[I>>2]=0,I=I+4|0}while((0|I)<(0|Q));return mI(A,r+128|0),tI(r+(255&C)|0,0,128-(255&C)|0),sA(0|r,0|g,255&C|0),oA(A,r,128,0),Lg(r,128),void(h=t)}st()}function EI(A,I,g,B,C,r){var Q,e,o;return A|=0,I|=0,g|=0,B|=0,r|=0,e=h,Q=h=h+63&-64,h=h+32|0,o=t[4+(C|=0)>>0]|t[C+4+1>>0]<<8|t[C+4+2>>0]<<16|t[C+4+3>>0]<<24,a[Q+16>>2]=t[C>>0]|t[C+1>>0]<<8|t[C+2>>0]<<16|t[C+3>>0]<<24,a[Q+16+4>>2]=o,a[Q+16+8>>2]=0,a[Q+16+8+4>>2]=0,tB(Q,g,B),a[Q+8>>2]=0,a[Q+8+4>>2]=0,(I+-16|0)>>>0>48?(a[8886]=28,g=-1):g=0|Yg(A,I,0,0,0,r,32,Q,Q+16|0),h=e,0|g}function nI(A,I){A|=0,I|=0;var g,B,C=0;B=h,g=h=h+63&-64,h=h+16|0;do{if(0!=(0|A)&&0!=(0|I)&&1024==(0|(I<<10>>>0)/(I>>>0))&&(C=0|u(12),a[A>>2]=C,0!=(0|C))){if(a[C+4>>2]=0,a[C>>2]=0,C=0|BC(g,I<<10),a[8886]=C,C)a[g>>2]=0;else if(0|(C=0|a[g>>2])){a[a[A>>2]>>2]=C,a[4+(0|a[A>>2])>>2]=C,a[8+(0|a[A>>2])>>2]=I<<10,C=0;break}S(0|a[A>>2]),a[A>>2]=0,C=-22}else C=-22}while(0);return h=B,0|C}function sI(A,I,g,B,C,r,Q,e,c,i,_){var E;return A|=0,I|=0,g|=0,B|=0,C|=0,r|=0,Q|=0,e|=0,c|=0,i|=0,_|=0,E=h,h=h+48|0,a[E+32>>2]=0,K(E,i,_,0),I=t[i+16+4>>0]|t[i+16+4+1>>0]<<8|t[i+16+4+2>>0]<<16|t[i+16+4+3>>0]<<24,a[E+32+4>>2]=t[i+16>>0]|t[i+16+1>>0]<<8|t[i+16+2>>0]<<16|t[i+16+3>>0]<<24,a[E+32+4+4>>2]=I,I=0|function(A,I,g,B,C,a,t,r,Q,e){var c;A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0,r|=0,c=h,h=h+352|0,FB(c+16|0,64,0,Q|=0,e|=0),ca(c+80|0,c+16|0),Lg(c+16|0,64),GC(c+80|0,a,t,r),a=0|FC(0,0,0|t,0|r),o(),GC(c+80|0,35456,15&a,0),GC(c+80|0,I,g,B),a=0|FC(0,0,0|g,0|B),o(),GC(c+80|0,35456,15&a,0),tB(c+336|0,t,r),GC(c+80|0,c+336|0,8,0),tB(c+336|0,g,B),GC(c+80|0,c+336|0,8,0),oa(c+80|0,c),Lg(c+80|0,256),t=0|ba(c,C),Lg(c,16);do{if(A){if(t){tI(0|A,0,0|g),t=-1;break}Zg(A,I,g,B,Q,1,e),t=0;break}}while(0);return h=c,0|t}(A,g,B,C,r,Q,e,c,E+32|0,E),Lg(E,32),h=E,0|I}function yI(A,I,g,B,C,r,Q,e,c,i,_,E){return A|=0,I|=0,g|=0,B|=0,C|=0,r|=0,Q|=0,e|=0,c|=0,i|=0,_|=0,E|=0,i=h,h=h+48|0,a[i+32>>2]=0,K(i,_,E,0),E=t[_+16+4>>0]|t[_+16+4+1>>0]<<8|t[_+16+4+2>>0]<<16|t[_+16+4+3>>0]<<24,a[i+32+4>>2]=t[_+16>>0]|t[_+16+1>>0]<<8|t[_+16+2>>0]<<16|t[_+16+3>>0]<<24,a[i+32+4+4>>2]=E,function(A,I,g,B,C,t,r,Q,e,c,i){var _;A|=0,I|=0,g|=0,B|=0,C|=0,t|=0,r|=0,Q|=0,e|=0,_=h,h=h+336|0,FB(_,64,0,c|=0,i|=0),ca(_+64|0,_),Lg(_,64),GC(_+64|0,r,Q,e),r=0|FC(0,0,0|Q,0|e),o(),GC(_+64|0,35456,15&r,0),Zg(A,B,C,t,c,1,i),GC(_+64|0,A,C,t),c=0|FC(0,0,0|C,0|t),o(),GC(_+64|0,35456,15&c,0),tB(_+320|0,Q,e),GC(_+64|0,_+320|0,8,0),tB(_+320|0,C,t),GC(_+64|0,_+320|0,8,0),oa(_+64|0,I),Lg(_+64|0,256),0|g&&(a[g>>2]=16,a[g+4>>2]=0),h=_}(A,I,g,B,C,r,Q,e,c,i+32|0,i),Lg(i,32),h=i,0}function hI(A,I,g,C,t,r,Q){I|=0,g|=0,C|=0,t|=0,r|=0,Q|=0;var e,o,c,i=0;c=h,e=h=h+63&-64,h=h+16|0,o=128+(i=A|=0)|0;do{B[i>>0]=0,i=i+1|0}while((0|i)<(0|o));do{if(!((r|C)>>>0>0|0==(r|C|0)&(t|g)>>>0>4294967295|Q>>>0>2147483648)){if(r>>>0<0|0==(0|r)&t>>>0<3|Q>>>0<8192){a[8886]=28,g=-1;break}vB(e,16),g=(0!=(0|pC(t,Q>>>10,I,g,e,A)))<<31>>31;break}a[8886]=22,g=-1}while(0);return h=c,0|g}function pI(A,I,g,C,t){A|=0,I|=0,g|=0,C|=0,t|=0;var r=0,Q=0;A:do{if(t){for(Q=0|a[g>>2];;){if(Q>>>0>=I>>>0){r=4;break}if((r=0|B[A+Q>>0])<<24>>24!=61){if(!C){r=9;break}if(!(0|zC(C,r<<24>>24))){r=9;break}}else t=t+-1|0;if(Q=Q+1|0,a[g>>2]=Q,!t){t=0;break A}}if(4==(0|r)){a[8886]=68,t=-1;break}if(9==(0|r)){a[8886]=28,t=-1;break}}else t=0}while(0);return 0|t}function fI(A,I,g,B,C,a){var t,r;if(g|=0,B|=0,C|=0,a|=0,t=h,r=h=h+63&-64,h=h+464|0,HA(r+240|0,A|=0,I|=0),NC(r+240|0,g,B,0),0|a){A=0,I=0;do{SC(r+448|0,A=A+1|0),sA(r+32|0,r+240|0,208),NC(r+32|0,r+448|0,4,0),aB(r+32|0,r),sA(C+I|0,0|r,0|((B=a-I|0)>>>0<32?B:32)),I=A<<5}while(I>>>0<a>>>0)}Lg(r+240|0,208),h=t}function wI(A,I,g,C,t,r,Q){I|=0,g|=0,C|=0,t|=0,r|=0,Q|=0;var e,o,c,i=0;c=h,e=h=h+63&-64,h=h+16|0,o=128+(i=A|=0)|0;do{B[i>>0]=0,i=i+1|0}while((0|i)<(0|o));do{if(!((r|C)>>>0>0|0==(r|C|0)&(t|g)>>>0>4294967295|Q>>>0>2147483648)){if(0==(0|t)&0==(0|r)|Q>>>0<8192){a[8886]=28,g=-1;break}vB(e,16),g=(0!=(0|hC(t,Q>>>10,I,g,e,A)))<<31>>31;break}a[8886]=22,g=-1}while(0);return h=c,0|g}function lI(A,I){var g,B,C,t,r,Q,e,o,c;A|=0,c=0-(0|a[4+(I|=0)>>2])|0,o=0-(0|a[I+8>>2])|0,e=0-(0|a[I+12>>2])|0,Q=0-(0|a[I+16>>2])|0,r=0-(0|a[I+20>>2])|0,t=0-(0|a[I+24>>2])|0,C=0-(0|a[I+28>>2])|0,B=0-(0|a[I+32>>2])|0,g=0-(0|a[I+36>>2])|0,a[A>>2]=0-(0|a[I>>2]),a[A+4>>2]=c,a[A+8>>2]=o,a[A+12>>2]=e,a[A+16>>2]=Q,a[A+20>>2]=r,a[A+24>>2]=t,a[A+28>>2]=C,a[A+32>>2]=B,a[A+36>>2]=g}function uI(A,I){I|=0;var g,B=0,C=0;if(g=0|CC(0|(C=0|a[32+(A|=0)>>2]),0|(B=0|a[A+32+4>>2]),3),o(),(63&g)>>>0<56)56-(63&g)|0&&sA(A+40+(63&g)|0,32848,56-(63&g)|0);else{64-(63&g)|0&&sA(A+40+(63&g)|0,32848,64-(63&g)|0),H(A,A+40|0,I,I+256|0),C=56+(B=A+40|0)|0;do{a[B>>2]=0,B=B+4|0}while((0|B)<(0|C));C=0|a[A+32>>2],B=0|a[A+32+4>>2]}vI(A+96|0,C,B),H(A,A+40|0,I,I+256|0)}function DI(A,I){A|=0;var g,B,C=0;if(g=h,B=h=h+63&-64,h=h+1024|0,0|a[28+(I|=0)>>2]){C=0;do{UC(A+64|0,0),UC(A+68|0,C),AA(B,1024,A,72),rB((0|a[4+(0|a[I>>2])>>2])+((0|r(0|a[I+24>>2],C))<<10)|0,B),UC(A+64|0,1),AA(B,1024,A,72),rB((0|a[4+(0|a[I>>2])>>2])+(1+(0|r(0|a[I+24>>2],C))<<10)|0,B),C=C+1|0}while(C>>>0<(0|a[I+28>>2])>>>0)}Lg(B,1024),h=g}function mI(A,I){I|=0;var g=0,C=0,a=0,r=0;!function(A){var I,g=0,C=0;C=32912,I=64+(g=A|=0)|0;do{B[g>>0]=0|B[C>>0],g=g+1|0,C=C+1|0}while((0|g)<(0|I));tI(A+64|0,0,293)}(A|=0),g=0;do{r=0|wB(I+(g<<3)|0),a=0|o(),r=(t[(C=A+(g<<3)|0)>>0]|t[C+1>>0]<<8|t[C+2>>0]<<16|t[C+3>>0]<<24)^r,a=(t[C+4>>0]|t[C+4+1>>0]<<8|t[C+4+2>>0]<<16|t[C+4+3>>0]<<24)^a,B[C>>0]=r,B[C+1>>0]=r>>8,B[C+2>>0]=r>>16,B[C+3>>0]=r>>24,B[C+4>>0]=a,B[C+4+1>>0]=a>>8,B[C+4+2>>0]=a>>16,B[C+4+3>>0]=a>>24,g=g+1|0}while(8!=(0|g))}function FI(A){var I,g,B,C,a,r,Q=0;return a=0|t[7+(A|=0)>>0],r=0|$B(0|t[A+6>>0],0,8),Q=0|o(),C=0|$B(0|t[A+5>>0],0,16),Q=0|Q|o(),B=0|$B(0|t[A+4>>0],0,24),Q=0|(Q=0|Q|o())|t[A+3>>0],g=0|$B(0|t[A+2>>0],0,40),Q=0|Q|o(),I=0|$B(0|t[A+1>>0],0,48),Q=0|Q|o(),A=0|$B(0|t[A>>0],0,56),e(0|Q|o()|0),r|a|C|B|g|I|A|0}function kI(A,I,g,B,C,t){I|=0,C|=0,t|=0;var r,Q=0;return r=h,Q=h=h+63&-64,h=h+16|0,Rg(64+(A|=0)|0,0|(g|=0),0|(B|=0)),sC(A,Q,A+64|0,B,C,t),64==(0|a[Q>>2])&0==(0|a[Q+4>>2])?0|I?(Q=0|bC(0|B,0|C,64,0),B=0|o(),a[I>>2]=Q,a[I+4>>2]=B,B=0):B=0:(0|I&&(a[I>>2]=0,a[I+4>>2]=0),tI(0|A,0,B+64|0),B=-1),h=r,0|B}function bI(A,I,g,C,a){I|=0,g|=0,C|=0,a|=0;var t=0,r=0,Q=0,e=0,c=0;return(A|=0)>>>0<=63&&(e=0|NB(0|g,0,0|I,0),!((c=0|o())>>>0>0|0==(0|c)&e>>>0>1073741823))&&(B[a>>0]=36,B[a+1>>0]=55,B[a+2>>0]=36,B[a+3>>0]=0|B[35361+A>>0],0!=(0|(t=0|eg(a+4|0,54,I,30))))&&0!=(0|(r=0|eg(t,a+58-t|0,g,30)))&&0!=(0|(Q=0|OI(r,a+58-r|0,C)))&Q>>>0<(a+58|0)>>>0?B[Q>>0]=0:a=0,0|a}function dI(A,I){I|=0;var g,C=0,t=0,r=0,Q=0;g=0|B[(A|=0)>>0];A:do{if((g+-48&255)<=9){for(t=g,r=0,Q=A;;){if(!(r>>>0<429496730&((t=(t<<24>>24)-48|0)>>>0>~(C=10*r|0)>>>0^1))){C=0;break A}if(r=(t>>>0>~C>>>0?0:t)+C|0,((t=0|B[(C=Q+1|0)>>0])-48&255)>9)break;Q=C}(0|C)!=(0|A)&&(0|Q)==(0|A)|g<<24>>24!=48?a[I>>2]=r:C=0}else C=0}while(0);return 0|C}function HI(A,I,g,C,a,t){var r,Q;if(A|=0,I|=0,a|=0,t|=0,Q=h,r=h=h+63&-64,h=h+32|0,(C|=0)>>>0<0|0==(0|C)&(g|=0)>>>0<32||(xg(r,32,0,a,t),0!=(0|lC(I+16|0,I+32|0,0|bC(0|g,0|C,-32,-1),0|o(),r))))A=-1;else{nC(A,I,g,C,a,t),g=A+32|0;do{B[A>>0]=0,A=A+1|0}while((0|A)<(0|g));A=0}return h=Q,0|A}function GI(A){return((0-((0-(95^(A|=0))|0)>>>8&63^63|(0-(45^A)|0)>>>8&62^62|((A+65439|0)>>>8^255)&A+185&((122-A|0)>>>8&255^255)|((A+-65|0)>>>8^255)&A+-65&((90-A|0)>>>8&255^255)|((A+65488|0)>>>8^255)&A+4&((57-A|0)>>>8&255^255))|0)>>>8&255^255)&(0-(65^A)|0)>>>8|(0-(95^A)|0)>>>8&63^63|(0-(45^A)|0)>>>8&62^62|((A+65439|0)>>>8^255)&A+185&((122-A|0)>>>8&255^255)|((A+-65|0)>>>8^255)&A+-65&((90-A|0)>>>8&255^255)|((A+65488|0)>>>8^255)&A+4&((57-A|0)>>>8&255^255)|0}function SI(A){return((0-((0-(47^(A|=0))|0)>>>8&63^63|(0-(43^A)|0)>>>8&62^62|((A+65439|0)>>>8^255)&A+185&((122-A|0)>>>8&255^255)|((A+-65|0)>>>8^255)&A+-65&((90-A|0)>>>8&255^255)|((A+65488|0)>>>8^255)&A+4&((57-A|0)>>>8&255^255))|0)>>>8&255^255)&(0-(65^A)|0)>>>8|(0-(47^A)|0)>>>8&63^63|(0-(43^A)|0)>>>8&62^62|((A+65439|0)>>>8^255)&A+185&((122-A|0)>>>8&255^255)|((A+-65|0)>>>8^255)&A+-65&((90-A|0)>>>8&255^255)|((A+65488|0)>>>8^255)&A+4&((57-A|0)>>>8&255^255)|0}function xI(A,I){I|=0;var g=0,B=0;if(g=0|CC(0|a[72+(A|=0)>>2],0|a[A+72+4>>2],3),o(),(127&g)>>>0<112)112-(127&g)|0&&sA(A+80+(127&g)|0,33616,112-(127&g)|0);else{128-(127&g)|0&&sA(A+80+(127&g)|0,33616,128-(127&g)|0),l(A,A+80|0,I,I+640|0),B=112+(g=A+80|0)|0;do{a[g>>2]=0,g=g+4|0}while((0|g)<(0|B))}BB(A+192|0,A+64|0,16),l(A,A+80|0,I,I+640|0)}function UI(A,I){var g,B,C,t,r,Q,e,o,c;A|=0,c=0|a[4+(I|=0)>>2],o=0|a[I+8>>2],e=0|a[I+12>>2],Q=0|a[I+16>>2],r=0|a[I+20>>2],t=0|a[I+24>>2],C=0|a[I+28>>2],B=0|a[I+32>>2],g=0|a[I+36>>2],a[A>>2]=a[I>>2],a[A+4>>2]=c,a[A+8>>2]=o,a[A+12>>2]=e,a[A+16>>2]=Q,a[A+20>>2]=r,a[A+24>>2]=t,a[A+28>>2]=C,a[A+32>>2]=B,a[A+36>>2]=g}function MI(A){A|=0;var I=0,g=0,C=0;A:do{if(3&A)for(I=A,g=A;;){if(!(0|B[g>>0]))break A;if(!(3&(I=g=g+1|0))){I=g,C=5;break}}else I=A,C=5}while(0);if(5==(0|C)){for(;!((-2139062144&(g=0|a[I>>2])^-2139062144)&g+-16843009);)I=I+4|0;if((255&g)<<24>>24)do{I=I+1|0}while(0!=(0|B[I>>0]))}return I-A|0}function JI(A,I){I|=0;var g=0;a[(A|=0)>>2]=1634760805,a[A+4>>2]=857760878,a[A+8>>2]=2036477234,a[A+12>>2]=1797285236,g=0|ga(I),a[A+16>>2]=g,g=0|ga(I+4|0),a[A+20>>2]=g,g=0|ga(I+8|0),a[A+24>>2]=g,g=0|ga(I+12|0),a[A+28>>2]=g,g=0|ga(I+16|0),a[A+32>>2]=g,g=0|ga(I+20|0),a[A+36>>2]=g,g=0|ga(I+24|0),a[A+40>>2]=g,I=0|ga(I+28|0),a[A+44>>2]=I}function vI(A,I,g){I|=0,g|=0;var C=0;B[7+(A|=0)>>0]=I,C=0|CC(0|I,0|g,8),o(),B[A+6>>0]=C,C=0|CC(0|I,0|g,16),o(),B[A+5>>0]=C,C=0|CC(0|I,0|g,24),o(),B[A+4>>0]=C,B[A+3>>0]=g,C=0|CC(0|I,0|g,40),o(),B[A+2>>0]=C,C=0|CC(0|I,0|g,48),o(),B[A+1>>0]=C,g=0|CC(0|I,0|g,56),o(),B[A>>0]=g}function NI(A,I,g){var B,C;g|=0,B=h,C=h=h+63&-64,h=h+48|0,$A(A|=0,40+(I|=0)|0,I),OA(A+40|0,I+40|0,I),m(A+80|0,A,g+40|0),m(A+40|0,A+40|0,g),m(A+120|0,g+120|0,I+120|0),m(A,I+80|0,g+80|0),$A(C,A,A),OA(A,A+80|0,A+40|0),$A(A+40|0,A+80|0,A+40|0),OA(A+80|0,C,A+120|0),$A(A+120|0,C,A+120|0),h=B}function RI(A,I,g){var B,C;g|=0,B=h,C=h=h+63&-64,h=h+48|0,$A(A|=0,40+(I|=0)|0,I),OA(A+40|0,I+40|0,I),m(A+80|0,A,g),m(A+40|0,A+40|0,g+40|0),m(A+120|0,g+120|0,I+120|0),m(A,I+80|0,g+80|0),$A(C,A,A),OA(A,A+80|0,A+40|0),$A(A+40|0,A+80|0,A+40|0),$A(A+80|0,C,A+120|0),OA(A+120|0,C,A+120|0),h=B}function YI(A,I,g){A|=0,I|=0,g|=0;var C,a,t=0;a=h,C=h=h+63&-64,h=h+160|0,t=0;do{B[A+t>>0]=0|B[I+t>>0],t=t+1|0}while(32!=(0|t));return 0|g&&TC(A),B[A+31>>0]=127&B[A+31>>0],DA(C,A),yg(A,C),g=0|mB(A)?-1:(0!=(0|Hg(I,32)))<<31>>31,h=a,0|g}function LI(A,I,g){var B,C;g|=0,B=h,C=h=h+63&-64,h=h+48|0,$A(A|=0,40+(I|=0)|0,I),OA(A+40|0,I+40|0,I),m(A+80|0,A,g+40|0),m(A+40|0,A+40|0,g),m(A+120|0,g+80|0,I+120|0),$A(C,I+80|0,I+80|0),OA(A,A+80|0,A+40|0),$A(A+40|0,A+80|0,A+40|0),OA(A+80|0,C,A+120|0),$A(A+120|0,C,A+120|0),h=B}function PI(A,I,g){var B,C;g|=0,B=h,C=h=h+63&-64,h=h+48|0,$A(A|=0,40+(I|=0)|0,I),OA(A+40|0,I+40|0,I),m(A+80|0,A,g),m(A+40|0,A+40|0,g+40|0),m(A+120|0,g+80|0,I+120|0),$A(C,I+80|0,I+80|0),OA(A,A+80|0,A+40|0),$A(A+40|0,A+80|0,A+40|0),$A(A+80|0,C,A+120|0),OA(A+120|0,C,A+120|0),h=B}function KI(A){var I,g;return I=h,g=h=h+63&-64,h=h+288|0,d(g+240|0,A|=0),d(g+192|0,A+40|0),d(g+144|0,A+80|0),OA(g+48|0,g+192|0,g+240|0),m(g+48|0,g+48|0,g+144|0),m(g,g+240|0,g+192|0),m(g,g,16),d(g+96|0,g+144|0),$A(g,g,g+96|0),OA(g+48|0,g+48|0,g),A=0|zB(g+48|0),h=I,0|A}function qI(A,I){A|=0,I|=0;var g,C,a=0;g=h,C=h=h+63&-64,h=h+208|0,a=0;do{B[A+a>>0]=0|B[I+a>>0],a=a+1|0}while(32!=(0|a));return B[A>>0]=-8&B[A>>0],B[A+31>>0]=63&B[A+31>>0]|64,DA(C+40|0,A),function(A,I,g){var B,C;A|=0,B=h,C=h=h+63&-64,h=h+96|0,$A(C+48|0,g|=0,I|=0),OA(C,g,I),CA(C,C),m(A,C+48|0,C),h=B}(C,C+40+40|0,C+40+80|0),pA(A,C),h=g,0}function XI(A,I,g){var C,r;if(A|=0,I|=0,g|=0,C=h,r=h=h+63&-64,h=h+16|0,a[r+4>>2]=A,a[r>>2]=I,B[r+8>>0]=0,0|g){A=0;do{B[r+8>>0]=B[r+8>>0]|B[(0|a[r>>2])+A>>0]^B[(0|a[r+4>>2])+A>>0],A=A+1|0}while((0|A)!=(0|g))}return h=C,((511+(0|t[r+8>>0])|0)>>>8&1)-1|0}function jI(A,I,g,B,C,a,t,r){var Q,e;return A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,e=h,Q=h=h+63&-64,h=h+32|0,0|Ug(Q,t|=0,r|=0)?B=-1:(B=0|kB(A,I,g,B,C,a,Q),Lg(Q,32)),h=e,0|B}function TI(A,I){A|=0;var g,C,t=0;if(g=h,C=h=h+63&-64,h=h+64|0,!(((I|=0)-1&255)>63)){B[C>>0]=I,B[C+1>>0]=0,B[C+2>>0]=1,B[C+3>>0]=1,Ca(C+4|0),tB(C+8|0,0,0),t=48+(I=C+16|0)|0;do{a[I>>2]=0,I=I+4|0}while((0|I)<(0|t));return mI(A,C),void(h=g)}st()}function VI(A,I,g,B,C,a,t,r){var Q,e;return A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,e=h,Q=h=h+63&-64,h=h+32|0,0|Ug(Q,t|=0,r|=0)?B=-1:(UB(A,I,g,B,C,a,Q),Lg(Q,32),B=0),h=e,0|B}function WI(A,I){A|=0,I|=0;var g,C,a=0,t=0;g=h,C=h=h+63&-64,h=h+64|0,a=(t=C)+64|0;do{B[t>>0]=0|B[I>>0],t=t+1|0,I=I+1|0}while((0|t)<(0|a));D(C),I=C,a=(t=A)+32|0;do{B[t>>0]=0|B[I>>0],t=t+1|0,I=I+1|0}while((0|t)<(0|a));Lg(C,64),h=g}function zI(A,I,g,B,C,a,t,r){var Q,e;return A|=0,I|=0,C|=0,t|=0,r|=0,Q=h,e=h=h+63&-64,h=h+80|0,0==(0|(g|=0))&0==(0|(B|=0))||(UC(e+64|0,a|=0),UC(e+64+4|0,t),JI(e,r),Gg(e,C,e+64|0),U(e,I,A,g,B),Lg(e,64)),h=Q,0}function ZI(A,I,g){var C,t;A|=0,I|=0,g|=0,C=h,t=h=h+63&-64,h=h+16|0,a[t+8>>2]=A,a[t+4>>2]=I,a[t>>2]=0,A=0;do{a[t>>2]=a[t>>2]|255&(B[(0|a[t+4>>2])+A>>0]^B[(0|a[t+8>>2])+A>>0]),A=A+1|0}while((0|A)!=(0|g));return h=C,((511+(0|a[t>>2])|0)>>>8&1)-1|0}function OI(A,I,g){I|=0,g|=0;var B=0,C=0,a=0,r=0;for(r=A|=0,A=0;;){B=0,a=A,A=0;do{C=a,a=a+1|0,A=(0|t[g+C>>0])<<B|A,B=B+8|0,C=a>>>0<32}while(C&B>>>0<24);if(!(A=0|eg(r,I,A,B))){A=0;break}if(I=I+r-A|0,!C)break;r=A,A=a}return 0|A}function $I(A,I,g){I|=0,g|=0;var C=0,a=0;C=0|B[(A|=0)>>0];A:do{if(C<<24>>24)for(;;){if(g=g+-1|0,!(C<<24>>24==(a=0|B[I>>0])<<24>>24&0!=(0|g)&a<<24>>24!=0))break A;if(I=I+1|0,!((C=0|B[(A=A+1|0)>>0])<<24>>24)){C=0;break}}else C=0}while(0);return(255&C)-(0|t[I>>0])|0}function Ag(A,I){A|=0,I|=0;var g,C,t=0,r=0;for(C=h,g=h=h+63&-64,h=h+16|0,t=0,r=0;;){if(0|xC(g,0|B[I>>0])){t=3;break}if(I=I+1|0,r=a[g>>2]<<t|r,(t=t+6|0)>>>0>=30){t=5;break}}return 3==(0|t)?(a[A>>2]=0,I=0):5==(0|t)&&(a[A>>2]=r),h=C,0|I}function Ig(A,I,g,B,C,a,t){A|=0,I|=0,C|=0,a|=0,t|=0;var r,Q=0;return Q=0|FC(0,1,0|(Q=0|CC(0|(Q=0|bC(0|(g|=0),0|(B|=0),63,0)),0|o(),6)),0|o()),(r=0|o())>>>0<0|0==(0|r)&Q>>>0<a>>>0?(st(),0):0|Zg(A,I,g,B,C,a,t)}function gg(A,I,g,B){I|=0;var C=0,a=0,t=0;if(iC(g|=0,(A|=0)+(((B|=0)<<5)-16<<2)|0),B<<1|0){C=0;do{LB(g,A+((t=C<<4)<<2)|0),Y(g),iC(I+((a=C<<3)<<2)|0,g),LB(g,A+((16|t)<<2)|0),Y(g),iC(I+(a+(B<<4)<<2)|0,g),C=C+2|0}while(C>>>0<B<<1>>>0)}}function Bg(A,I){A|=0,I|=0;var g,C,a=0,t=0,Q=0,e=0;for(g=h,C=h=h+63&-64,h=h+16|0,t=10;e=255&((Q=I)+(0|r(I=(I>>>0)/10|0,-10))|48),B[C+(a=t+-1|0)>>0]=e,Q>>>0>9&0!=(0|a);)t=a;sA(0|A,C+a|0,0|(e=11-t|0)),B[A+e>>0]=0,h=g}function Cg(A,I){var g,B;g=h,B=h=h+63&-64,h=h+48|0,d(A|=0,I|=0),d(A+80|0,I+40|0),b(A+120|0,I+80|0),$A(A+40|0,I,I+40|0),d(B,A+40|0),$A(A+40|0,A+80|0,A),OA(A+80|0,A+80|0,A),OA(A,B,A+40|0),OA(A+120|0,A+120|0,A+80|0),h=g}function ag(A,I,g){var C,a;if(A|=0,I|=0,g|=0,a=h,C=h=h+63&-64,h=h+16|0,B[C>>0]=0,0|function(A,I,g){A|=0,I|=0;var C,a,r=0;if(a=h,C=h=h+63&-64,h=h+336|0,0|function(A){A|=0;var I,g,C=0,a=0,r=0,Q=0;I=h,g=h=h+63&-64,h=h+16|0,B[g>>0]=0,B[g+1>>0]=0,B[g+2>>0]=0,B[g+3>>0]=0,B[g+4>>0]=0,B[g+5>>0]=0,B[g+6>>0]=0,r=0;do{C=0|B[A+r>>0],a=0;do{B[(Q=g+a|0)>>0]=B[Q>>0]|B[33744+(a<<5)+r>>0]^C,a=a+1|0}while(7!=(0|a));r=r+1|0}while(31!=(0|r));C=127&B[A+31>>0],a=0;do{B[(Q=g+a|0)>>0]=B[Q>>0]|C^B[33744+(a<<5)+31>>0],a=a+1|0}while(7!=(0|a));C=0,a=0;do{a=(0|t[g+C>>0])-1|a,C=C+1|0}while(7!=(0|C));return h=I,a>>>8&1|0}(g|=0))r=-1;else{r=0;do{B[A+r>>0]=0|B[I+r>>0],r=r+1|0}while(32!=(0|r));for(B[A>>0]=-8&B[A>>0],B[A+31>>0]=63&B[A+31>>0]|64,J(C+288|0,g),mC(C+240|0),jC(C+192|0),UI(C+144|0,C+288|0),mC(C+96|0),r=254,I=0;g=I,iA(C+240|0,C+144|0,g^=I=(0|t[A+(r>>>3)>>0])>>>(7&r)&1),iA(C+192|0,C+96|0,g),OA(C+48|0,C+144|0,C+96|0),OA(C,C+240|0,C+192|0),$A(C+240|0,C+240|0,C+192|0),$A(C+192|0,C+144|0,C+96|0),m(C+96|0,C+48|0,C+240|0),m(C+192|0,C+192|0,C),d(C+48|0,C),d(C,C+240|0),$A(C+144|0,C+96|0,C+192|0),OA(C+192|0,C+96|0,C+192|0),m(C+240|0,C,C+48|0),OA(C,C,C+48|0),d(C+192|0,C+192|0),v(C+96|0,C),d(C+144|0,C+144|0),$A(C+48|0,C+48|0,C+96|0),m(C+96|0,C+288|0,C+192|0),m(C+192|0,C,C+48|0),r;)r=r+-1|0;iA(C+240|0,C+144|0,I),iA(C+192|0,C+96|0,I),CA(C+192|0,C+192|0),m(C+240|0,C+240|0,C+192|0),pA(A,C+240|0),r=0}return h=a,0|r}(A,I,g))I=-1;else{I=0;do{B[C>>0]=B[C>>0]|B[A+I>>0],I=I+1|0}while(32!=(0|I));I=0-((511+(0|t[C>>0])|0)>>>8&1)|0}return h=a,0|I}function tg(A,I,g,C,a,t){if(A|=0,(C|=0)>>>0<0|0==(0|C)&(g|=0)>>>0<32)A=-1;else{nC(A,I|=0,g,C,a|=0,t|=0),kC(A+16|0,A+32|0,g=0|bC(0|g,0|C,-32,-1),0|o(),A),g=A+16|0;do{B[A>>0]=0,A=A+1|0}while((0|A)<(0|g));A=0}return 0|A}function rg(A,I,g){A|=0,I|=0;var C,a,t=0,r=0;a=h,r=h=h+63&-64,h=h+64|0,Xg(r,g|=0,32,0),t=r,C=(g=I)+32|0;do{B[g>>0]=0|B[t>>0],g=g+1|0,t=t+1|0}while((0|g)<(0|C));return Lg(r,64),r=0|ea(A,I),h=a,0|r}function Qg(A,I,g,B,C,a,t){var r,Q;return A|=0,I|=0,C|=0,t|=0,r=h,Q=h=h+63&-64,h=h+80|0,0==(0|(g|=0))&0==(0|(B|=0))||(UC(Q+64|0,a|=0),JI(Q,t),Kg(Q,C,Q+64|0),U(Q,I,A,g,B),Lg(Q,64)),h=r,0}function eg(A,I,g,C){A|=0,I|=0,g|=0,C|=0;var a=0,t=0;A:do{if(C)for(t=0;;){if(!I){A=0;break A}if(a=A+1|0,B[A>>0]=0|B[35361+(63&g)>>0],(t=t+6|0)>>>0>=C>>>0){A=a;break}A=a,I=I+-1|0,g>>>=6}}while(0);return 0|A}function og(A,I,g,B,C,a,t,r,Q,e){var o,c;return A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0,r|=0,Q|=0,e|=0,o=h,c=h=h+63&-64,h=h+16|0,Na(c),B=0|eA(c,A,I,g,B,C,a,t,r,Q,e),Ma(c),h=o,0|B}function cg(A,I,g,B,C,a,t){var r,Q;return A|=0,I|=0,g|=0,B|=0,C|=0,Q=h,r=h=h+63&-64,h=h+32|0,0|Mg(r,a|=0,t|=0)?g=-1:(g=0|yC(A,I,g,B,C,r),Lg(r,32)),h=Q,0|g}function ig(A,I,g){var C,a;return A|=0,C=h,a=h=h+63&-64,h=h+160|0,Xg(I|=0,g|=0,32,0),B[I>>0]=-8&B[I>>0],B[I+31>>0]=63&B[I+31>>0]|64,DA(a,I),yg(A,a),Rg(0|I,0|g,32),Rg(I+32|0,0|A,32),h=C,0}function _g(A,I,g,B,C,a,t){var r,Q;return A|=0,I|=0,g|=0,B|=0,C|=0,Q=h,r=h=h+63&-64,h=h+32|0,0|Mg(r,a|=0,t|=0)?g=-1:(g=0|uC(A,I,g,B,C,r),Lg(r,32)),h=Q,0|g}function Eg(A,I){I|=0;var g,C,a,r=0;C=h,a=h=h+63&-64,h=h+48|0,g=32+(r=A|=0)|0;do{B[r>>0]=0|B[I>>0],r=r+1|0,I=I+1|0}while((0|r)<(0|g));r=0|t[A+31>>0],B[A+31>>0]=127&r,J(a,A),yA(A,a,128&r),h=C}function ng(A,I,g,B,C,a,t,r){var Q,e;return A|=0,I|=0,g|=0,B|=0,a|=0,t|=0,Q=h,e=h=h+63&-64,h=h+32|0,T(e,C|=0,r|=0,0),C=0|XB(A,I,g,B,C+16|0,a,t,e),Lg(e,32),h=Q,0|C}function sg(A,I,g,B){A|=0,I|=0,g|=0,B|=0;A:do{if(B>>>0>0|0==(0|B)&g>>>0>4294967295)a[8886]=22,g=-1;else{switch(0|fa(A,I,g)){case 0:g=0;break A;case-35:a[8886]=28}g=-1}}while(0);return 0|g}function yg(A,I){var g,C;A|=0,g=h,C=h=h+63&-64,h=h+144|0,CA(C+96|0,80+(I|=0)|0),m(C+48|0,I,C+96|0),m(C,I+40|0,C+96|0),pA(A,C),I=(0|tC(C+48|0))<<7,B[A+31>>0]=I^(0|t[A+31>>0]),h=g}function hg(A,I){A|=0;var g,B,C=0;return g=h,C=h=h+63&-64,h=h+16|0,B=0|BC(C,I|=0),a[8886]=B,B?(a[C>>2]=0,C=0):C=0|a[C>>2],a[A>>2]=C,a[A+4>>2]=C,a[A+8>>2]=0==(0|C)?0:I,h=g,0|C}function pg(A,I,g,B){A|=0,I|=0,g|=0,B|=0;A:do{if(B>>>0>0|0==(0|B)&g>>>0>4294967295)a[8886]=22,g=-1;else{switch(0|wa(A,I,g)){case 0:g=0;break A;case-35:a[8886]=28}g=-1}}while(0);return 0|g}function fg(A,I,g,B,C,a,t,r){var Q,e;return A|=0,I|=0,g|=0,B|=0,a|=0,t|=0,Q=h,e=h=h+63&-64,h=h+32|0,K(e,C|=0,r|=0,0),C=0|Tg(A,I,g,B,C+16|0,a,t,e),h=Q,0|C}function wg(A,I,g,B,C,a,t,r){var Q;return A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,Q=h,h=h+32|0,0|VC(Q,t|=0,r|=0)?B=-1:(B=0|OB(A,I,g,B,C,a,Q),Lg(Q,32)),h=Q,0|B}function lg(A,I,g,B,C,a,t){return I|=0,C|=0,a|=0,t|=0,0|((B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<16?-1:0|jI(A|=0,I+16|0,I,g=0|bC(0|g,0|B,-16,-1),0|o(),C,a,t))}function ug(A,I,g,B,C,a,t,r){var Q;return A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,Q=h,h=h+32|0,0|VC(Q,t|=0,r|=0)?B=-1:(IC(A,I,g,B,C,a,Q),Lg(Q,32),B=0),h=Q,0|B}function Dg(A,I,g,C){I|=0,g|=0,C|=0;var a=0;return 0|(36==(0|B[(A|=0)>>0])&&55==(0|B[A+1>>0])&&36==(0|B[A+2>>0])&&0==(0|xC(I,0|B[A+3>>0]))&&0!=(0|(a=0|Ag(g,A+4|0)))?0|Ag(C,a):0)}function mg(A){A|=0;var I=0,g=0,C=0,a=0,t=0;for(a=0,t=32,I=1;a=(255&(g=0|B[A+(t=t+-1|0)>>0]))-(255&(C=0|B[34016+t>>0]))>>8&(I&=255)|255&a,t;)I&=(65535+(255&(C^g))|0)>>>8;return 0!=(0|a)|0}function Fg(A){return a[32+(A|=0)>>2]=0,a[A+32+4>>2]=0,a[A>>2]=a[8140],a[A+4>>2]=a[8141],a[A+8>>2]=a[8142],a[A+12>>2]=a[8143],a[A+16>>2]=a[8144],a[A+20>>2]=a[8145],a[A+24>>2]=a[8146],a[A+28>>2]=a[8147],0}function kg(A,I,g,B){return B=0|bC(0|bC(0|(g|=0),0|(B|=0),0|(A|=0),0|(I|=0)),0|o(),0|(B=0|NB(-2&(B=0|$B(0|A,0|I,1))|0,1&(0|o())|0,0|g,0)),0|o()),e(0|o()),0|B}function bg(A,I,g,B){A|=0,I|=0,g|=0,B|=0;do{if(!(g>>>0>64|(B+-1|0)>>>0>63)){if(0==(0|I)|0==(0|g)){TI(A,255&B),I=0;break}_I(A,255&B,I,255&g),I=0;break}I=-1}while(0);return 0|I}function dg(A){var I,g,B,C=0;return g=0|t[(A|=0)>>0],B=0|$B(0|t[A+1>>0],0,8),C=0|o(),I=0|$B(0|t[A+2>>0],0,16),C=0|C|o(),A=0|$B(0|t[A+3>>0],0,24),e(0|C|o()|0),B|g|I|A|0}function Hg(A,I){A|=0,I|=0;var g,C,a=0;g=h,C=h=h+63&-64,h=h+16|0,B[C>>0]=0,a=0;do{B[C>>0]=B[C>>0]|B[A+a>>0],a=a+1|0}while((0|a)!=(0|I));return h=g,(511+(0|t[C>>0])|0)>>>8&1|0}function Gg(A,I,g){A|=0,I|=0;var B=0;(g|=0)?(B=0|ga(g),a[A+48>>2]=B,g=0|ga(g+4|0)):(a[A+48>>2]=0,g=0),a[A+52>>2]=g,B=0|ga(I),a[A+56>>2]=B,B=0|ga(I+4|0),a[A+60>>2]=B}function Sg(A,I,g){var B,C;A|=0,I|=0,g|=0,B=h,C=h=h+63&-64,h=h+384|0,KC(C,0,0,24),MC(C,I,32,0),MC(C,g,32,0),Ba(C,A,24),h=B}function xg(A,I,g,B,C){var a,t;return A|=0,I|=0,g|=0,a=h,t=h=h+63&-64,h=h+32|0,T(t,B|=0,C|=0,0),B=0|RC(A,I,g,B+16|0,t),Lg(t,32),h=a,0|B}function Ug(A,I,g){var B,C;return A|=0,C=h,B=h=h+63&-64,h=h+32|0,0|ag(B,g|=0,I|=0)?A=-1:(K(A,35520,B,0),A=0),h=C,0|A}function Mg(A,I,g){var B,C;return A|=0,C=h,B=h=h+63&-64,h=h+32|0,0|ag(B,g|=0,I|=0)?A=-1:(T(A,35472,B,0),A=0),h=C,0|A}function Jg(A,I,g,B,C){var a;return A|=0,a=h,h=h+32|0,zg(a,I|=0,g|=0,B|=0,C|=0),C=0|ka(A,a),C=0|((0|a)==(0|A)?-1:C)|XI(a,A,32),h=a,0|C}function vg(A,I,g,B,C,a,t){return I|=0,C|=0,a|=0,t|=0,0|((B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<16?-1:0|wg(A|=0,I+16|0,I,g=0|bC(0|g,0|B,-16,-1),0|o(),C,a,t))}function Ng(A,I,g,B,C,a,t){return A|=0,I|=0,C|=0,a|=0,t|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967279?(st(),0):0|VI(A+16|0,A,I,g,B,C,a,t)}function Rg(A,I,g){var C=0;if((0|(I|=0))<(0|(A|=0))&(0|A)<(I+(g|=0)|0)){for(C=A,I=I+g|0,A=A+g|0;(0|g)>0;)I=I-1|0,g=g-1|0,B[(A=A-1|0)>>0]=0|B[I>>0];A=C}else sA(A,I,g);return 0|A}function Yg(A,I,g,B,C,a,t,r,Q){return B|=0,((I|=0)-1|0)>>>0>63|(t|=0)>>>0>64?B=-1:(function(A,I,g,B,C,a,t,r,Q){var e,o;A|=0,g|=0,B|=0,t|=0,r|=0,Q|=0,e=h,o=h=h+63&-64,h=h+368|0,0==(0|(I|=0))&(0!=(0|(C|=0))|0!=(0|(a|=0)))&&st(),A||st(),(B+-1&255)>63&&st(),0!=(0|g)|t<<24>>24==0||st(),(255&t)>64&&st(),t<<24>>24?bA(o,B,g,t,r,Q):aI(o,B,r,Q),oA(o,I,C,a),R(o,A,B),h=e}(A|=0,g|=0,a|=0,255&I,B,C|=0,255&t,r|=0,Q|=0),B=0),0|B}function Lg(A,I){var g,C;if(A|=0,I|=0,g=h,C=h=h+63&-64,h=h+16|0,a[C>>2]=A,0|I){A=0;do{B[(0|a[C>>2])+A>>0]=0,A=A+1|0}while((0|A)!=(0|I))}h=g}function Pg(A,I){A|=0,I|=0;var g=0,B=0,C=0,t=0;g=0;do{t=I+(g<<3)|0,C=a[4+(B=A+(g<<3)|0)>>2]^a[t+4>>2],a[B>>2]=a[B>>2]^a[t>>2],a[B+4>>2]=C,g=g+1|0}while(128!=(0|g))}function Kg(A,I,g){A|=0,I|=0,g=(g|=0)?0|ga(g):0,a[A+48>>2]=g,g=0|ga(I),a[A+52>>2]=g,g=0|ga(I+4|0),a[A+56>>2]=g,I=0|ga(I+8|0),a[A+60>>2]=I}function qg(A,I){var g,C;I|=0,C=h,h=h+64|0,CB(A|=0,C),A=C,g=I+32|0;do{B[I>>0]=0|B[A>>0],I=I+1|0,A=A+1|0}while((0|I)<(0|g));return h=C,0}function Xg(A,I,g,B){var C,a;return A|=0,I|=0,g|=0,B|=0,C=h,a=h=h+63&-64,h=h+208|0,Og(a),q(a,I,g,B),fB(a,A),h=C,0}function jg(A,I,g,B,C){var a;return A|=0,I|=0,g|=0,B|=0,a=h,h=h+208|0,HA(a,C|=0,32),NC(a,I,g,B),aB(a,A),h=a,0}function Tg(A,I,g,B,C,a,t,r){return A|=0,I|=0,C|=0,a|=0,t|=0,r|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967295?(st(),0):0|zI(A,I,g,B,C,a,t,r)}function Vg(A,I,g,B,C){var a,t;return A|=0,I|=0,g|=0,B|=0,a=h,t=h=h+63&-64,h=h+96|0,eI(t,C|=0),Z(t,I,g,B),BA(t,A),h=a,0}function Wg(A,I,g,B,C){var a;return A|=0,I|=0,g|=0,B|=0,a=h,h=h+416|0,dA(a,C|=0,32),YC(a,I,g,B),CB(a,A),h=a,0}function zg(A,I,g,B,C){var a;return A|=0,I|=0,g|=0,B|=0,a=h,h=h+416|0,Ia(a,C|=0,32),qC(a,I,g,B),qg(a,A),h=a,0}function Zg(A,I,g,B,C,a,t){return A|=0,I|=0,C|=0,a|=0,t|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967295?(st(),0):0|Qg(A,I,g,B,C,a,t)}function Og(A){var I,g=0;a[64+(A|=0)>>2]=0,a[A+64+4>>2]=0,a[A+64+8>>2]=0,a[A+64+12>>2]=0,g=32912,I=A+64|0;do{a[A>>2]=a[g>>2],A=A+4|0,g=g+4|0}while((0|A)<(0|I));return 0}function $g(A,I){A|=0,I|=0;var g=0;A:do{if(I)for(g=I;;){if(36==(0|B[(I=A+(g=g+-1|0)|0)>>0]))break A;if(!g){I=0;break}}else I=0}while(0);return 0|I}function AB(A){var I;return A|=0,((I=0|a[9016])+A|0)>>>0>(0|E())>>>0&&0==(0|s(I+A|0))?(a[8886]=48,0|(A=-1)):(a[9016]=I+A,0|(A=I))}function IB(A,I,g,B){var C,a;return I|=0,g|=0,B|=0,C=h,a=h=h+63&-64,h=h+64|0,fB(A|=0,a),qA(I,g,a,64,0,B,1),h=C,0}function gB(A,I,g){var B,C;return I|=0,g|=0,B=h,C=h=h+63&-64,h=h+64|0,fB(A|=0,C),A=0|VA(I,C,64,0,g,1),h=B,0|A}function BB(A,I,g){A|=0,I|=0;var B=0,C=0;if((g|=0)>>>3|0){B=0;do{vI(A+(B<<3)|0,0|a[(C=I+(B<<3)|0)>>2],0|a[C+4>>2]),B=B+1|0}while((0|B)!=(g>>>3|0))}}function CB(A,I){var g;return I|=0,g=h,h=h+64|0,fB(A|=0,g),q(A+208|0,g,64,0),fB(A+208|0,I),Lg(g,64),h=g,0}function aB(A,I){var g;return I|=0,g=h,h=h+32|0,lB(A|=0,g),z(A+104|0,g,32,0),lB(A+104|0,I),Lg(g,32),h=g,0}function tB(A,I,g){I|=0,g|=0,B[(A|=0)>>0]=I,B[A+1>>0]=I>>8,B[A+2>>0]=I>>16,B[A+3>>0]=I>>24,B[A+4>>0]=g,B[A+4+1>>0]=g>>8,B[A+4+2>>0]=g>>16,B[A+4+3>>0]=g>>24}function rB(A,I){A|=0,I|=0;var g=0,B=0,C=0,t=0;g=0;do{t=0|wB(I+(g<<3)|0),C=0|o(),a[(B=A+(g<<3)|0)>>2]=t,a[B+4>>2]=C,g=g+1|0}while(128!=(0|g))}function QB(A,I,g,B,C,a,t){return A|=0,I|=0,C|=0,a|=0,t|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967279?(st(),0):0|ug(A+16|0,A,I,g,B,C,a,t)}function eB(A,I){A|=0,I|=0;var g=0,C=0,a=0;for(g=0,C=0;g=(0|t[(a=A+C|0)>>0])-(0|t[I+C>>0])-g|0,B[a>>0]=g,64!=(0|(C=C+1|0));)g=g>>>8&1}function oB(A,I,g,B,C,a){return A|=0,I|=0,C|=0,a|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967295?(st(),0):0|function(A,I,g,B,C,a){return(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967295?(st(),0):0|Qg(A|=0,I|=0,g,B,C|=0,0,a|=0)}(A,I,g,B,C,a)}function cB(A){return(0-(62^(A|=0))|0)>>>8&45^45|(A+65510|0)>>>8&255&A+65|(0-(63^A)|0)>>>8&95^95|(A+65484|0)>>>8&A+71&((A+65510|0)>>>8&255^255)|(A+65474|0)>>>8&A+252&((A+65484|0)>>>8&255^255)|0}function iB(A,I){A|=0,I|=0;var g=0,C=0,a=0;for(g=0,C=0;g=g+(0|t[(a=A+C|0)>>0])+(0|t[I+C>>0])|0,B[a>>0]=g,32!=(0|(C=C+1|0));)g>>>=8}function _B(A){var I=0,g=0;I=127&B[31+(A|=0)>>0]^127,g=30;do{I|=~B[A+g>>0],g=g+-1|0}while(0!=(0|g));return 1&((236-(A=0|t[A>>0])&511+(255&I))>>>8|A)^1|0}function EB(A,I,g){A|=0,I|=0;var B=0,C=0;if((g|=0)>>>2|0){B=0;do{a[(C=A+(B<<2)|0)>>2]=a[C>>2]^a[I+(B<<2)>>2],B=B+1|0}while((0|B)!=(g>>>2|0))}}function nB(A){return(0-(62^(A|=0))|0)>>>8&43^43|(A+65510|0)>>>8&255&A+65|(0-(63^A)|0)>>>8&47^47|(A+65484|0)>>>8&A+71&((A+65510|0)>>>8&255^255)|(A+65474|0)>>>8&A+252&((A+65484|0)>>>8&255^255)|0}function sB(A,I,g){var B,C;A|=0,I|=0,B=h,C=h=h+63&-64,h=h+32|0,SA(C,g|=0),zA(A,I,C),h=B}function yB(A,I,g,B,C,a,t){return B|=0,((I|=0)-1|0)>>>0>63|(t|=0)>>>0>64?B=-1:(function(A,I,g,B,C,a,t){var r,Q;A|=0,g|=0,B|=0,t|=0,r=h,Q=h=h+63&-64,h=h+368|0,0==(0|(I|=0))&(0!=(0|(C|=0))|0!=(0|(a|=0)))&&st(),A||st(),(B+-1&255)>63&&st(),0!=(0|g)|t<<24>>24==0||st(),(255&t)>64&&st(),t<<24>>24?_I(Q,B,g,t):TI(Q,B),oA(Q,I,C,a),R(Q,A,B),h=r}(A|=0,g|=0,a|=0,255&I,B,C|=0,255&t),B=0),0|B}function hB(A,I,g,B,C,a){return A|=0,I|=0,C|=0,a|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967295?(st(),0):0|zI(A,I,g,B,C,0,0,a)}function pB(A,I){var g,B;return A|=0,I|=0,g=h,B=h=h+63&-64,h=h+32|0,vB(B,32),ig(A,I,B),Lg(B,32),h=g,0}function fB(A,I){var g,B;return I|=0,g=h,B=h=h+63&-64,h=h+704|0,xI(A|=0,B),BB(I,A,64),Lg(B,704),Lg(A,208),h=g,0}function wB(A){var I;return I=t[(A|=0)>>0]|t[A+1>>0]<<8|t[A+2>>0]<<16|t[A+3>>0]<<24,e(t[A+4>>0]|t[A+4+1>>0]<<8|t[A+4+2>>0]<<16|t[A+4+3>>0]<<24|0),0|I}function lB(A,I){var g,B;return I|=0,g=h,B=h=h+63&-64,h=h+288|0,uI(A|=0,B),aC(I,A),Lg(B,288),Lg(A,104),h=g,0}function uB(A){var I=0,g=0;I=127&B[31+(A|=0)>>0]^127,g=30;do{I|=~B[A+g>>0],g=g+-1|0}while(0!=(0|g));return(236-(0|t[A>>0])&511+(255&I))>>>8&1^1|0}function DB(A,I,g,B,C){return A|=0,B|=0,C|=0,(g|=0)>>>0>0|0==(0|g)&(I|=0)>>>0>4294967295?(st(),0):0|FB(A,I,g,B,C)}function mB(A){var I=0,g=0;I=1^B[(A|=0)>>0],g=1;do{I=B[A+g>>0]|I,g=g+1|0}while(31!=(0|g));return(511+(255&(127&B[A+31>>0]|I))|0)>>>8&1|0}function FB(A,I,g,B,C){return A|=0,B|=0,C|=0,(g|=0)>>>0>0|0==(0|g)&(I|=0)>>>0>4294967295?(st(),0):0|function(A,I,g,B,C){var a,t;return A|=0,B|=0,a=h,t=h=h+63&-64,h=h+64|0,0==(0|(I|=0))&0==(0|(g|=0))||(JI(t,C|=0),Kg(t,B,0),tI(0|A,0,0|I),U(t,A,A,I,g),Lg(t,64)),h=a,0}(A,I,g,B,C)}function kB(A,I,g,B,C,a,t){return 0|_A(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0)}function bB(A,I,g){var B,C;return B=0|CC(0|(A|=0),0|(I|=0),0|(g|=0)),C=0|o(),g=0|$B(0|A,0|I,64-g|0),e(0|o()|C|0),g|B|0}function dB(A,I,g){var B,C;return B=0|$B(0|(A|=0),0|(I|=0),0|(g|=0)),C=0|o(),g=0|CC(0|A,0|I,64-g|0),e(0|o()|C|0),g|B|0}function HB(A,I,g){NA(A|=0,I|=0,255&(g|=0)),NA(A+40|0,I+40|0,255&g),NA(A+80|0,I+80|0,255&g),NA(A+120|0,I+120|0,255&g)}function GB(A,I,g,B){var C;return C=h,h=h+16|0,N(A|=0,I|=0,g|=0,B|=0,0|C),h=C,0|(e(0|a[C+4>>2]),0|a[C>>2])}function SB(A){A|=0;var I=0,g=0,C=0;for(I=1,g=0;I=I+(0|t[(C=A+g|0)>>0])|0,B[C>>0]=I,4!=(0|(g=g+1|0));)I>>>=8}function xB(A,I,g){var B,C;A|=0,g|=0,B=h,C=h=h+63&-64,h=h+48|0,lI(C,I|=0),UI(A,I),NA(A,C,g),h=B}function UB(A,I,g,B,C,a,t){return aA(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0),0}function MB(A,I,g){A|=0,I|=0;var B=0;if((g|=0)>>>2|0){B=0;do{a[A+(B<<2)>>2]=a[I+(B<<2)>>2],B=B+1|0}while((0|B)!=(g>>>2|0))}}function JB(A,I,g){var B;return A|=0,g|=0,I=0|$B(255&(I|=0)|0,0,8),B=0|o(),g=0|$B(255&g|0,0,16),e(0|B|o()|0),I|255&A|g|0}function vB(A,I){A|=0;var g=0,C=0;if(0|(I|=0)){g=0;do{C=255&(0|La()),B[A+g>>0]=C,g=g+1|0}while((0|g)!=(0|I))}}function NB(A,I,g,B){var C,a;return I|=0,B|=0,C=0|function(A,I){var g,B,C;return C=((g=0|r(65535&(I|=0),65535&(A|=0)))>>>16)+(0|r(65535&I,A>>>16))|0,B=0|r(I>>>16,65535&A),0|(e((C>>>16)+(0|r(I>>>16,A>>>16))+(((65535&C)+B|0)>>>16)|0),C+B<<16|65535&g|0)}(A|=0,g|=0),a=0|o(),0|(e((0|r(I,g))+(0|r(B,A))+a|0&a|0),0|C)}function RB(A,I,g,B,C){return A|=0,B|=0,C|=0,(g|=0)>>>0>0|0==(0|g)&(I|=0)>>>0>4294967295?(st(),0):0|function(A,I,g,B,C){var a,t;return A|=0,B|=0,a=h,t=h=h+63&-64,h=h+64|0,0==(0|(I|=0))&0==(0|(g|=0))||(JI(t,C|=0),Gg(t,B,0),tI(0|A,0,0|I),U(t,A,A,I,g),Lg(t,64)),h=a,0}(A,I,g,B,C)}function YB(A,I){m(A|=0,I|=0,I+120|0),m(A+40|0,I+40|0,I+80|0),m(A+80|0,I+80|0,I+120|0),m(A+120|0,I,I+40|0)}function LB(A,I){A|=0,I|=0;var g=0,B=0;g=0;do{a[(B=A+(g<<2)|0)>>2]=a[B>>2]^a[I+(g<<2)>>2],g=g+1|0}while(16!=(0|g))}function PB(A){A|=0;do{vB(A,32),B[A+31>>0]=31&B[A+31>>0]}while(!(0|mg(A)&&0==(0|Hg(A,32))))}function KB(A,I,g){return A|=0,I|=0,(0|(g|=0))<32?(e(I>>g|0),A>>>g|(I&(1<<g)-1)<<32-g):(e(0|((0|I)<0?-1:0)),I>>g-32|0)}function qB(A){var I,g;return I=h,g=h=h+63&-64,h=h+160|0,rA(g,A|=0),A=0|zB(g),h=I,0|A}function XB(A,I,g,B,C,a,t,r){return 0|IA(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0,r|=0)}function jB(A,I){I|=0;var g=0;A=16+(g=48+(A|=0)|0)|0;do{B[g>>0]=0|B[I>>0],g=g+1|0,I=I+1|0}while((0|g)<(0|A))}function TB(A,I){$A(A|=0,40+(I|=0)|0,I),OA(A+40|0,I+40|0,I),UI(A+80|0,I+80|0),m(A+120|0,I+120|0,112)}function VB(A,I){var g,B;A|=0,g=h,B=h=h+63&-64,h=h+128|0,function(A,I){UI(A|=0,I|=0),UI(A+40|0,I+40|0),UI(A+80|0,I+80|0)}(B,I|=0),Cg(A,B),h=g}function WB(A,I){I|=0;var g=0;A=16+(g=32+(A|=0)|0)|0;do{B[g>>0]=0|B[I>>0],g=g+1|0,I=I+1|0}while((0|g)<(0|A))}function zB(A){var I,g;return I=h,g=h=h+63&-64,h=h+32|0,pA(g,A|=0),A=0|Hg(g,32),h=I,0|A}function ZB(A,I){A|=0,I|=0;var g=0,C=0;g=0;do{B[(C=A+g|0)>>0]=B[C>>0]^B[I+g>>0],g=g+1|0}while(8!=(0|g))}function OB(A,I,g,B,C,a,t){return 0|EA(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0)}function $B(A,I,g){return A|=0,(0|(g|=0))<32?(e((I|=0)<<g|(A&(1<<g)-1<<32-g)>>>32-g|0),A<<g):(e(A<<g-32|0),0)}function AC(A,I,g){A|=0,I|=0,g|=0;var B=0;B=0;do{Sa(A,A),B=B+1|0}while((0|B)!=(0|I));w(A,A,g)}function IC(A,I,g,B,C,a,t){return tA(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0),0}function gC(A,I,g){return(g|=0)>>>0<256?0|R(A|=0,I|=0,255&g):(c(34180,34200,107,34253),0)}function BC(A,I){A|=0;var g=0;return(I|=0)>>>0<=4294967168&&0!=(0|(g=0|function(A){var I,g=0,B=0,C=0,t=0;if((A|=0)>>>0>=4294967168)return a[8886]=48,0;if(!(B=0|u(76+(I=A>>>0<11?16:A+11&-8)|0)))return 0;do{if(63&B){if(g=(C=((B+63&-64)-8-(B+-8)|0)>>>0>15?(B+63&-64)-8|0:56+(B+63&-64)|0)-(B+-8)|0,3&(A=0|a[B+-4>>2])){a[C+4>>2]=(-8&A)-g|1&a[C+4>>2]|2,a[C+((-8&A)-g)+4>>2]=1|a[C+((-8&A)-g)+4>>2],a[B+-4>>2]=g|1&a[B+-4>>2]|2,a[C+4>>2]=1|a[C+4>>2],x(B+-8|0,g),t=C,A=C;break}a[C>>2]=(0|a[B+-8>>2])+g,a[C+4>>2]=(-8&A)-g,t=C,A=C;break}t=B+-8|0,A=B+-8|0}while(0);return 3&(A=0|a[(g=A+4|0)>>2])|0&&(-8&A)>>>0>(I+16|0)>>>0&&(C=t+I|0,a[g>>2]=I|1&A|2,a[C+4>>2]=(-8&A)-I|3,a[(B=t+(-8&A)+4|0)>>2]=1|a[B>>2],x(C,(-8&A)-I|0)),0|t+8}(I)))?(a[A>>2]=g,I=0):I=48,0|I}function CC(A,I,g){return A|=0,I|=0,(0|(g|=0))<32?(e(I>>>g|0),A>>>g|(I&(1<<g)-1)<<32-g):(e(0),I>>>g-32|0)}function aC(A,I){A|=0,I|=0;var g=0;g=0;do{SC(A+(g<<2)|0,0|a[I+(g<<2)>>2]),g=g+1|0}while(8!=(0|g))}function tC(A){var I,g;return g=h,I=h=h+63&-64,h=h+32|0,pA(I,A|=0),h=g,1&B[I>>0]|0}function rC(A,I,g){NA(A|=0,I|=0,255&(g|=0)),NA(A+40|0,I+40|0,255&g),NA(A+80|0,I+80|0,255&g)}function QC(A,I,g,B,C,a,t){return 0|yB(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0)}function eC(A,I,g,B,C,a,t){return 0|MA(A|=0,I|=0,1,g|=0,B|=0,C|=0,16,a|=0,t|=0,0,0,2)}function oC(A,I,g,B,C,a,t){return 0|MA(A|=0,I|=0,1,g|=0,B|=0,C|=0,16,a|=0,t|=0,0,0,1)}function cC(A){A|=0;var I=0;for(I=0;0|B[A+I>>0];)if((I=I+1|0)>>>0>=102){I=102;break}return 0|I}function iC(A,I){A|=0,I|=0;var g=0;g=0;do{a[A+(g<<2)>>2]=a[I+(g<<2)>>2],g=g+1|0}while(16!=(0|g))}function _C(A,I){(function(A,I){A|=0,0|(I|=0)&&(0|(I=0|a[A>>2])&&Lg(0|a[I+4>>2],a[A+16>>2]<<10),0|(I=0|a[A+4>>2])&&Lg(I,a[A+20>>2]<<3))})(A|=0,4&(I|=0)),S(0|a[A+4>>2]),a[A+4>>2]=0,function(A){var I=0;0|(A|=0)&&0|(I=0|a[A>>2])&&S(I),S(A)}(0|a[A>>2]),a[A>>2]=0}function EC(A,I){m(A|=0,I|=0,I+120|0),m(A+40|0,I+40|0,I+80|0),m(A+80|0,I+80|0,I+120|0)}function nC(A,I,g,B,C,a){return 0|ng(A|=0,I|=0,g|=0,B|=0,C|=0,0,0,a|=0)}function sC(A,I,g,B,C,a){return qA(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,0),0}function yC(A,I,g,B,C,a){return 0|HI(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0)}function hC(A,I,g,B,C,a){return 0|MA(A|=0,I|=0,1,g|=0,B|=0,C|=0,16,0,32,a|=0,128,2)}function pC(A,I,g,B,C,a){return 0|MA(A|=0,I|=0,1,g|=0,B|=0,C|=0,16,0,32,a|=0,128,1)}function fC(A,I,g,B,C,a){return 0|IA(A|=0,I|=0,g|=0,B|=0,C|=0,0,0,a|=0)}function wC(A,I,g,B,C){return 0|VA(A|=0,I|=0,g|=0,B|=0,C|=0,0)}function lC(A,I,g,B,C){return 0|function(A,I,g,B,C){var a,t;return A|=0,a=h,t=h=h+63&-64,h=h+16|0,Vg(t,I|=0,g|=0,B|=0,C|=0),C=0|ba(A,t),h=a,0|C}(A|=0,I|=0,g|=0,B|=0,C|=0)}function uC(A,I,g,B,C,a){return 0|tg(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0)}function DC(A){B[32+(A|=0)>>0]=1,B[A+32+1>>0]=0,B[A+32+2>>0]=0,B[A+32+3>>0]=0}function mC(A){var I;a[(A|=0)>>2]=1,I=36+(A=A+4|0)|0;do{a[A>>2]=0,A=A+4|0}while((0|A)<(0|I))}function FC(A,I,g,B){return 0|(e(0|(B=(I|=0)-(B|=0)-((g|=0)>>>0>(A|=0)>>>0|0)>>>0)),A-g>>>0|0)}function kC(A,I,g,B,C){return 0|Vg(A|=0,I|=0,g|=0,B|=0,C|=0)}function bC(A,I,g,B){return 0|(e((I|=0)+(B|=0)+((A|=0)+(g|=0)>>>0>>>0<A>>>0|0)>>>0|0),A+g>>>0|0)}function dC(A,I){I|=0,Og(A|=0),0|I&&q(A,33968,34,0)}function HC(A,I){var g;return g=0|a[(A|=0)-64+((I|=0)<<7)>>2],e(0|a[A+-64+(I<<7)+4>>2]),0|g}function GC(A,I,g,B){return 0|function(A,I,g,B){return Z(A|=0,I|=0,g|=0,B|=0),0}(A|=0,I|=0,g|=0,B|=0)}function SC(A,I){I|=0,B[3+(A|=0)>>0]=I,B[A+2>>0]=I>>>8,B[A+1>>0]=I>>>16,B[A>>0]=I>>>24}function xC(A,I){return A|=0,I=0|PA(255&(I|=0)),a[A>>2]=0==(0|I)?0:I-35361|0,(0==(0|I))<<31>>31|0}function UC(A,I){I|=0,B[(A|=0)>>0]=I,B[A+1>>0]=I>>8,B[A+2>>0]=I>>16,B[A+3>>0]=I>>24}function MC(A,I,g,B){return XC(A|=0,I|=0,g|=0,B|=0),0}function JC(A,I){return A|=0,vB(I|=0,32),0|ea(A,I)}function vC(A){return(0|t[2+(A|=0)>>0])<<8|0|t[A+3>>0]|(0|t[A+1>>0])<<16|(0|t[A>>0])<<24|0}function NC(A,I,g,B){return z(A|=0,I|=0,g|=0,B|=0),0}function RC(A,I,g,B,C){return 0|nA(A|=0,I|=0,g|=0,B|=0,C|=0)}function YC(A,I,g,B){return q(A|=0,I|=0,g|=0,B|=0),0}function LC(A,I,g,B){return 0|jA(A|=0,I|=0,g|=0,B|=0,2)}function PC(A,I,g,B){return 0|jA(A|=0,I|=0,g|=0,B|=0,1)}function KC(A,I,g,B){return 0|bg(A|=0,I|=0,g|=0,B|=0)}function qC(A,I,g,B){return YC(A|=0,I|=0,g|=0,B|=0),0}function XC(A,I,g,B){return oA(A|=0,I|=0,g|=0,B|=0),0}function jC(A){var I;I=40+(A|=0)|0;do{a[A>>2]=0,A=A+4|0}while((0|A)<(0|I))}function TC(A){B[(A|=0)>>0]=-8&B[A>>0],B[A+31>>0]=64|B[A+31>>0]}function VC(A,I,g){return 0|Mg(A|=0,I|=0,g|=0)}function WC(A){B[(A|=0)>>0]=-8&B[A>>0],B[A+31>>0]=63&B[A+31>>0]|64}function zC(A,I){return A=0|ZA(A|=0,I|=0),0|((0|B[A>>0])==(255&I)<<24>>24?A:0)}function ZC(A,I,g,B){return L(A|=0,I|=0,g|=0,B|=0,12),0}function OC(A,I,g,B){return L(A|=0,I|=0,g|=0,B|=0,8),0}function $C(A,I,g,B){return L(A|=0,I|=0,g|=0,B|=0,20),0}function Aa(A,I){return function(A,I){var g,B;A|=0,g=h,B=h=h+63&-64,h=h+256|0,Sa(B+224|0,I|=0),Sa(B+192|0,B+224|0),w(B+160|0,B+224|0,I),w(B+128|0,B+224|0,B+160|0),w(B+96|0,B+224|0,B+128|0),w(B+64|0,B+224|0,B+96|0),w(B+32|0,B+224|0,B+64|0),w(B,B+192|0,B+32|0),w(A,B,I),AC(A,126,B+128|0),AC(A,4,B+160|0),AC(A,5,B),AC(A,5,B),AC(A,4,B+64|0),AC(A,2,B+160|0),AC(A,5,B),AC(A,4,B+128|0),AC(A,6,B+128|0),AC(A,3,B+96|0),AC(A,5,B),AC(A,5,B+96|0),AC(A,4,B+160|0),AC(A,5,B+32|0),AC(A,6,B+32|0),AC(A,10,B+64|0),AC(A,4,B+160|0),AC(A,5,B+160|0),AC(A,5,B+160|0),AC(A,5,B+64|0),AC(A,4,B+96|0),AC(A,6,B),AC(A,5,B+32|0),AC(A,3,B+128|0),AC(A,6,B),AC(A,3,B+128|0),AC(A,3,B+160|0),h=g}(A|=0,I|=0),0-(0|Hg(I,32))|0}function Ia(A,I,g){return dA(A|=0,I|=0,g|=0),0}function ga(A){return t[(A|=0)>>0]|t[A+1>>0]<<8|t[A+2>>0]<<16|t[A+3>>0]<<24|0}function Ba(A,I,g){return 0|gC(A|=0,I|=0,g|=0)}function Ca(A){B[(A|=0)>>0]=0,B[A+1>>0]=0,B[A+2>>0]=0,B[A+3>>0]=0}function aa(A){var I;0|(I=0|a[(A|=0)>>2])&&S(I),pa(A)}function ta(A){jC(A|=0),mC(A+40|0),mC(A+80|0),jC(A+120|0)}function ra(A){a[(A|=0)>>2]=0,a[A+4>>2]=0,a[A+8>>2]=0,a[A+12>>2]=0}function Qa(A,I,g){!function(A,I,g){var B,C,a;A|=0,I|=0,B=h,a=h=h+63&-64,h=h+128|0,g=((g|=0)<<24>>24)-((0-(255&(C=0|Pa(g)))&g<<24>>24)<<1)&255,function(A){mC(A|=0),mC(A+40|0),jC(A+80|0)}(A),rC(A,I,0|Da(g,1)),rC(A,I+120|0,0|Da(g,2)),rC(A,I+240|0,0|Da(g,3)),rC(A,I+360|0,0|Da(g,4)),rC(A,I+480|0,0|Da(g,5)),rC(A,I+600|0,0|Da(g,6)),rC(A,I+720|0,0|Da(g,7)),rC(A,I+840|0,0|Da(g,8)),UI(a,A+40|0),UI(a+40|0,A),lI(a+80|0,A+80|0),rC(A,a,C),h=B}(A|=0,1120+(960*(I|=0)|0)|0,g|=0)}function ea(A,I){return 0|qI(A|=0,I|=0)}function oa(A,I){return 0|function(A,I){return BA(A|=0,I|=0),0}(A|=0,I|=0)}function ca(A,I){return 0|function(A,I){return eI(A|=0,I|=0),0}(A|=0,I|=0)}function ia(A,I,g,B){return 0|N(A|=0,I|=0,g|=0,B|=0,0)}function _a(A,I,g){return 0|ag(A|=0,I|=0,g|=0)}function Ea(A,I){return 0|JC(A|=0,I|=0)}function na(A,I,g){w(A|=0,I|=0,g|=0)}function sa(A){1!=(-7&(A|=0)|0)&&st()}function ya(A,I){return function(A,I){var g,B;A|=0,g=h,B=h=h+63&-64,h=h+896|0,J(B+48|0,I|=0),J(B,I+32|0),hA(B+408|0,B+48|0),hA(B+248|0,B),TB(B+728|0,B+248|0),RI(B+568|0,B+408|0,B+728|0),YB(B+88|0,B+568|0),fA(A,B+88|0),h=g}(A|=0,I|=0),0}function ha(A,I){return 0|ea(A|=0,I|=0)}function pa(A){a[4+(A|=0)>>2]=0,a[A>>2]=0,a[A+8>>2]=0}function fa(A,I,g){return 0|lA(A|=0,I|=0,g|=0,2)}function wa(A,I,g){return 0|lA(A|=0,I|=0,g|=0,1)}function la(A,I){xB(A|=0,I|=0,0|tC(I))}function ua(A,I){return AI(A|=0,I|=0),0}function Da(A,I){return((255&((I|=0)^(A|=0)))-1|0)>>>31&255|0}function ma(A){return 0|((A|=0)?31-(0|Q(A^A-1))|0:32)}function Fa(A,I){return 0|ZI(A|=0,I|=0,64)}function ka(A,I){return 0|ZI(A|=0,I|=0,32)}function ba(A,I){return 0|ZI(A|=0,I|=0,16)}function da(A,I){sA(0|(A|=0),0|(I|=0),1024)}function Ha(A){return Og(A|=0),0}function Ga(A,I){return(A|=0)>>>(32-(I|=0)|0)|A<<I|0}function Sa(A,I){w(A|=0,I|=0,I)}function xa(A,I){return(A|=0)<<32-(I|=0)|A>>>I|0}function Ua(A){tI(0|(A|=0),0,1024)}function Ma(A){aa(A|=0)}function Ja(A){vB(A|=0,32)}function va(){return 16777216}function Na(A){pa(A|=0)}function Ra(){return 33554432}function Ya(){_(1)}function La(){return 0|_(0)}function Pa(A){return(255&(A|=0))>>>7|0}function Ka(){return 1073741824}function qa(){return 67108864}function Xa(){return 12}function ja(){return 268435456}function Ta(){return-2147483648}function Va(){return 416}function Wa(){return 4}function za(){return 256}function Za(){return 384}function Oa(){return-65}function $a(){return 8192}function At(){return-17}function It(){return 3}function gt(){return 34384}function Bt(){return 1}function Ct(){return 2}function at(){return 208}function tt(){return 128}function rt(){return-1}function Qt(){return 34293}function et(){return 8}function ot(){return 24}function ct(){return 48}function it(){return 16}function _t(){return 64}function Et(){return 32}function nt(){return 0}function st(){i()}return{___errno_location:function(){return 35544},___muldi3:NB,___udivdi3:ia,___uremdi3:GB,_bitshift64Ashr:KB,_bitshift64Lshr:CC,_bitshift64Shl:$B,_crypto_aead_chacha20poly1305_abytes:it,_crypto_aead_chacha20poly1305_decrypt:function(A,I,g,B,C,t,r,Q,e,c,i){I|=0,g|=0,B|=0,r|=0,Q|=0,e|=0,c|=0,i|=0;var _=0,E=0;return(t|=0)>>>0>0|0==(0|t)&(C|=0)>>>0>15?(t=0|LA(A|=0,0,B,g=0|bC(0|C,0|t,-16,-1),_=0|o(),B+C+-16|0,r,Q,e,c,i),I&&(C=0==(0|t)?g:0,g=0==(0|t)?_:0,E=4)):I?(C=0,g=0,t=-1,E=4):t=-1,4==(0|E)&&(a[I>>2]=C,a[I+4>>2]=g),0|t},_crypto_aead_chacha20poly1305_decrypt_detached:LA,_crypto_aead_chacha20poly1305_encrypt:function(A,I,g,B,C,t,r,Q,e,c,i){return A|=0,I|=0,g|=0,t|=0,r|=0,Q|=0,e|=0,c|=0,i|=0,(C|=0)>>>0>0|0==(0|C)&(B|=0)>>>0>4294967279&&st(),II(A,A+B|0,0,g,B,C,t,r,Q,0,c,i),0|I&&(c=0|bC(0|B,0|C,16,0),e=0|o(),a[I>>2]=c,a[I+4>>2]=e),0},_crypto_aead_chacha20poly1305_encrypt_detached:II,_crypto_aead_chacha20poly1305_ietf_abytes:it,_crypto_aead_chacha20poly1305_ietf_decrypt:function(A,I,g,B,C,t,r,Q,e,c,i){I|=0,g|=0,B|=0,r|=0,Q|=0,e|=0,c|=0,i|=0;var _=0,E=0;return(t|=0)>>>0>0|0==(0|t)&(C|=0)>>>0>15?(t=0|uA(A|=0,0,B,g=0|bC(0|C,0|t,-16,-1),_=0|o(),B+C+-16|0,r,Q,e,c,i),I&&(C=0==(0|t)?g:0,g=0==(0|t)?_:0,E=4)):I?(C=0,g=0,t=-1,E=4):t=-1,4==(0|E)&&(a[I>>2]=C,a[I+4>>2]=g),0|t},_crypto_aead_chacha20poly1305_ietf_decrypt_detached:uA,_crypto_aead_chacha20poly1305_ietf_encrypt:function(A,I,g,B,C,t,r,Q,e,c,i){return A|=0,I|=0,g|=0,t|=0,r|=0,Q|=0,e|=0,c|=0,i|=0,(C|=0)>>>0>0|0==(0|C)&(B|=0)>>>0>4294967279&&st(),JA(A,A+B|0,0,g,B,C,t,r,Q,0,c,i),0|I&&(c=0|bC(0|B,0|C,16,0),e=0|o(),a[I>>2]=c,a[I+4>>2]=e),0},_crypto_aead_chacha20poly1305_ietf_encrypt_detached:JA,_crypto_aead_chacha20poly1305_ietf_keybytes:Et,_crypto_aead_chacha20poly1305_ietf_keygen:Ja,_crypto_aead_chacha20poly1305_ietf_messagebytes_max:At,_crypto_aead_chacha20poly1305_ietf_npubbytes:Xa,_crypto_aead_chacha20poly1305_ietf_nsecbytes:nt,_crypto_aead_chacha20poly1305_keybytes:Et,_crypto_aead_chacha20poly1305_keygen:Ja,_crypto_aead_chacha20poly1305_messagebytes_max:At,_crypto_aead_chacha20poly1305_npubbytes:et,_crypto_aead_chacha20poly1305_nsecbytes:nt,_crypto_aead_xchacha20poly1305_ietf_abytes:it,_crypto_aead_xchacha20poly1305_ietf_decrypt:function(A,I,g,B,C,t,r,Q,e,c,i){I|=0,g|=0,B|=0,r|=0,Q|=0,e|=0,c|=0,i|=0;var _=0,E=0;return(t|=0)>>>0>0|0==(0|t)&(C|=0)>>>0>15?(t=0|sI(A|=0,0,B,g=0|bC(0|C,0|t,-16,-1),_=0|o(),B+C+-16|0,r,Q,e,c,i),I&&(C=0==(0|t)?g:0,g=0==(0|t)?_:0,E=4)):I?(C=0,g=0,t=-1,E=4):t=-1,4==(0|E)&&(a[I>>2]=C,a[I+4>>2]=g),0|t},_crypto_aead_xchacha20poly1305_ietf_decrypt_detached:sI,_crypto_aead_xchacha20poly1305_ietf_encrypt:function(A,I,g,B,C,t,r,Q,e,c,i){return A|=0,I|=0,g|=0,t|=0,r|=0,Q|=0,e|=0,c|=0,i|=0,(C|=0)>>>0>0|0==(0|C)&(B|=0)>>>0>4294967279&&st(),yI(A,A+B|0,0,g,B,C,t,r,Q,0,c,i),0|I&&(c=0|bC(0|B,0|C,16,0),e=0|o(),a[I>>2]=c,a[I+4>>2]=e),0},_crypto_aead_xchacha20poly1305_ietf_encrypt_detached:yI,_crypto_aead_xchacha20poly1305_ietf_keybytes:Et,_crypto_aead_xchacha20poly1305_ietf_keygen:Ja,_crypto_aead_xchacha20poly1305_ietf_messagebytes_max:At,_crypto_aead_xchacha20poly1305_ietf_npubbytes:ot,_crypto_aead_xchacha20poly1305_ietf_nsecbytes:nt,_crypto_auth:function(A,I,g,B,C){return zg(A|=0,I|=0,g|=0,B|=0,C|=0),0},_crypto_auth_bytes:Et,_crypto_auth_hmacsha256:jg,_crypto_auth_hmacsha256_bytes:Et,_crypto_auth_hmacsha256_final:aB,_crypto_auth_hmacsha256_init:HA,_crypto_auth_hmacsha256_keybytes:Et,_crypto_auth_hmacsha256_keygen:Ja,_crypto_auth_hmacsha256_statebytes:at,_crypto_auth_hmacsha256_update:NC,_crypto_auth_hmacsha256_verify:function(A,I,g,B,C){var a;return A|=0,a=h,h=h+32|0,jg(a,I|=0,g|=0,B|=0,C|=0),C=0|ka(A,a),C=0|((0|a)==(0|A)?-1:C)|XI(a,A,32),h=a,0|C},_crypto_auth_hmacsha512:Wg,_crypto_auth_hmacsha512256:zg,_crypto_auth_hmacsha512256_bytes:Et,_crypto_auth_hmacsha512256_final:qg,_crypto_auth_hmacsha512256_init:Ia,_crypto_auth_hmacsha512256_keybytes:Et,_crypto_auth_hmacsha512256_keygen:Ja,_crypto_auth_hmacsha512256_statebytes:Va,_crypto_auth_hmacsha512256_update:qC,_crypto_auth_hmacsha512256_verify:Jg,_crypto_auth_hmacsha512_bytes:_t,_crypto_auth_hmacsha512_final:CB,_crypto_auth_hmacsha512_init:dA,_crypto_auth_hmacsha512_keybytes:Et,_crypto_auth_hmacsha512_keygen:Ja,_crypto_auth_hmacsha512_statebytes:Va,_crypto_auth_hmacsha512_update:YC,_crypto_auth_hmacsha512_verify:function(A,I,g,B,C){var a;return A|=0,a=h,h=h+64|0,Wg(a,I|=0,g|=0,B|=0,C|=0),C=0|Fa(A,a),C=0|((0|a)==(0|A)?-1:C)|XI(a,A,64),h=a,0|C},_crypto_auth_keybytes:Et,_crypto_auth_keygen:Ja,_crypto_auth_primitive:function(){return 34048},_crypto_auth_verify:function(A,I,g,B,C){return 0|Jg(A|=0,I|=0,g|=0,B|=0,C|=0)},_crypto_box:function(A,I,g,B,C,a,t){return 0|_g(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0)},_crypto_box_afternm:function(A,I,g,B,C,a){return 0|uC(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0)},_crypto_box_beforenm:VC,_crypto_box_beforenmbytes:Et,_crypto_box_boxzerobytes:it,_crypto_box_curve25519xchacha20poly1305_beforenm:Ug,_crypto_box_curve25519xchacha20poly1305_beforenmbytes:Et,_crypto_box_curve25519xchacha20poly1305_detached:VI,_crypto_box_curve25519xchacha20poly1305_detached_afternm:UB,_crypto_box_curve25519xchacha20poly1305_easy:Ng,_crypto_box_curve25519xchacha20poly1305_easy_afternm:function(A,I,g,B,C,a){return A|=0,I|=0,C|=0,a|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967279?(st(),0):(UB(A+16|0,A,I,g,B,C,a),0)},_crypto_box_curve25519xchacha20poly1305_keypair:JC,_crypto_box_curve25519xchacha20poly1305_macbytes:it,_crypto_box_curve25519xchacha20poly1305_messagebytes_max:At,_crypto_box_curve25519xchacha20poly1305_noncebytes:ot,_crypto_box_curve25519xchacha20poly1305_open_detached:jI,_crypto_box_curve25519xchacha20poly1305_open_detached_afternm:kB,_crypto_box_curve25519xchacha20poly1305_open_easy:lg,_crypto_box_curve25519xchacha20poly1305_open_easy_afternm:function(A,I,g,B,C,a){return I|=0,C|=0,a|=0,0|((B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<16?-1:0|kB(A|=0,I+16|0,I,g=0|bC(0|g,0|B,-16,-1),0|o(),C,a))},_crypto_box_curve25519xchacha20poly1305_publickeybytes:Et,_crypto_box_curve25519xchacha20poly1305_seal:function(A,I,g,C,a){A|=0,I|=0,g|=0,C|=0,a|=0;var t,r,Q=0,e=0,o=0;if(r=h,t=h=h+63&-64,h=h+96|0,0|JC(t+32|0,t))g=-1;else{e=t+32|0,o=(Q=A)+32|0;do{B[Q>>0]=0|B[e>>0],Q=Q+1|0,e=e+1|0}while((0|Q)<(0|o));Sg(t+64|0,t+32|0,a),g=0|Ng(A+32|0,I,g,C,t+64|0,a,t),Lg(t,32),Lg(t+32|0,32),Lg(t+64|0,24)}return h=r,0|g},_crypto_box_curve25519xchacha20poly1305_seal_open:function(A,I,g,B,C,a){var t,r;return A|=0,I|=0,C|=0,a|=0,r=h,t=h=h+63&-64,h=h+32|0,(B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<48?g=-1:(B=0|bC(0|g,0|B,-32,-1),g=0|o(),Sg(t,I,C),g=0|lg(A,I+32|0,B,g,t,I,a)),h=r,0|g},_crypto_box_curve25519xchacha20poly1305_sealbytes:ct,_crypto_box_curve25519xchacha20poly1305_secretkeybytes:Et,_crypto_box_curve25519xchacha20poly1305_seed_keypair:rg,_crypto_box_curve25519xchacha20poly1305_seedbytes:Et,_crypto_box_curve25519xsalsa20poly1305:_g,_crypto_box_curve25519xsalsa20poly1305_afternm:uC,_crypto_box_curve25519xsalsa20poly1305_beforenm:Mg,_crypto_box_curve25519xsalsa20poly1305_beforenmbytes:Et,_crypto_box_curve25519xsalsa20poly1305_boxzerobytes:it,_crypto_box_curve25519xsalsa20poly1305_keypair:JC,_crypto_box_curve25519xsalsa20poly1305_macbytes:it,_crypto_box_curve25519xsalsa20poly1305_messagebytes_max:At,_crypto_box_curve25519xsalsa20poly1305_noncebytes:ot,_crypto_box_curve25519xsalsa20poly1305_open:cg,_crypto_box_curve25519xsalsa20poly1305_open_afternm:yC,_crypto_box_curve25519xsalsa20poly1305_publickeybytes:Et,_crypto_box_curve25519xsalsa20poly1305_secretkeybytes:Et,_crypto_box_curve25519xsalsa20poly1305_seed_keypair:rg,_crypto_box_curve25519xsalsa20poly1305_seedbytes:Et,_crypto_box_curve25519xsalsa20poly1305_zerobytes:Et,_crypto_box_detached:ug,_crypto_box_detached_afternm:IC,_crypto_box_easy:QB,_crypto_box_easy_afternm:function(A,I,g,B,C,a){return A|=0,I|=0,C|=0,a|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967279?(st(),0):(IC(A+16|0,A,I,g,B,C,a),0)},_crypto_box_keypair:Ea,_crypto_box_macbytes:it,_crypto_box_messagebytes_max:At,_crypto_box_noncebytes:ot,_crypto_box_open:function(A,I,g,B,C,a,t){return 0|cg(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0)},_crypto_box_open_afternm:function(A,I,g,B,C,a){return 0|yC(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0)},_crypto_box_open_detached:wg,_crypto_box_open_detached_afternm:OB,_crypto_box_open_easy:vg,_crypto_box_open_easy_afternm:function(A,I,g,B,C,a){return I|=0,C|=0,a|=0,0|((B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<16?-1:0|OB(A|=0,I+16|0,I,g=0|bC(0|g,0|B,-16,-1),0|o(),C,a))},_crypto_box_primitive:function(){return 34062},_crypto_box_publickeybytes:Et,_crypto_box_seal:function(A,I,g,C,a){A|=0,I|=0,g|=0,C|=0,a|=0;var t,r=0,Q=0,e=0;if(t=h,h=h+96|0,0|Ea(t+32|0,t))g=-1;else{Q=t+32|0,e=(r=A)+32|0;do{B[r>>0]=0|B[Q>>0],r=r+1|0,Q=Q+1|0}while((0|r)<(0|e));Sg(t+64|0,t+32|0,a),g=0|QB(A+32|0,I,g,C,t+64|0,a,t),Lg(t,32),Lg(t+32|0,32),Lg(t+64|0,24)}return h=t,0|g},_crypto_box_seal_open:function(A,I,g,B,C,a){var t,r;return A|=0,I|=0,C|=0,a|=0,r=h,t=h=h+63&-64,h=h+32|0,(B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<48?g=-1:(B=0|bC(0|g,0|B,-32,-1),g=0|o(),Sg(t,I,C),g=0|vg(A,I+32|0,B,g,t,I,a)),h=r,0|g},_crypto_box_sealbytes:ct,_crypto_box_secretkeybytes:Et,_crypto_box_seed_keypair:function(A,I,g){return 0|rg(A|=0,I|=0,g|=0)},_crypto_box_seedbytes:Et,_crypto_box_zerobytes:Et,_crypto_core_ed25519_add:function(A,I,g){var B,C;return A|=0,g|=0,C=h,B=h=h+63&-64,h=h+800|0,0==(0|YA(B+640|0,I|=0))&&0!=(0|KI(B+640|0))&&0==(0|YA(B+480|0,g))&&0!=(0|KI(B+480|0))?(TB(B,B+480|0),RI(B+160|0,B+640|0,B),YB(B+320|0,B+160|0),yg(A,B+320|0),I=0):I=-1,h=C,0|I},_crypto_core_ed25519_bytes:Et,_crypto_core_ed25519_from_hash:ua,_crypto_core_ed25519_from_uniform:function(A,I){return Eg(A|=0,I|=0),0},_crypto_core_ed25519_hashbytes:_t,_crypto_core_ed25519_is_valid_point:function(A){var I,g;return g=h,I=h=h+63&-64,h=h+160|0,A=0!=(0|uB(A|=0))&&0==(0|gI(A))&&0==(0|YA(I,A))&&0!=(0|KI(I))?0!=(0|qB(I))&1:0,h=g,0|A},_crypto_core_ed25519_nonreducedscalarbytes:_t,_crypto_core_ed25519_random:function(A){var I,g;A|=0,I=h,g=h=h+63&-64,h=h+64|0,vB(g,64),ua(A,g),h=I},_crypto_core_ed25519_scalar_add:zA,_crypto_core_ed25519_scalar_complement:GA,_crypto_core_ed25519_scalar_invert:Aa,_crypto_core_ed25519_scalar_mul:na,_crypto_core_ed25519_scalar_negate:SA,_crypto_core_ed25519_scalar_random:PB,_crypto_core_ed25519_scalar_reduce:WI,_crypto_core_ed25519_scalar_sub:sB,_crypto_core_ed25519_scalarbytes:Et,_crypto_core_ed25519_sub:function(A,I,g){var B,C;return A|=0,g|=0,C=h,B=h=h+63&-64,h=h+800|0,0==(0|YA(B+640|0,I|=0))&&0!=(0|KI(B+640|0))&&0==(0|YA(B+480|0,g))&&0!=(0|KI(B+480|0))?(TB(B,B+480|0),NI(B+160|0,B+640|0,B),YB(B+320|0,B+160|0),yg(A,B+320|0),I=0):I=-1,h=C,0|I},_crypto_core_ed25519_uniformbytes:Et,_crypto_core_hchacha20:K,_crypto_core_hchacha20_constbytes:it,_crypto_core_hchacha20_inputbytes:it,_crypto_core_hchacha20_keybytes:Et,_crypto_core_hchacha20_outputbytes:Et,_crypto_core_hsalsa20:T,_crypto_core_hsalsa20_constbytes:it,_crypto_core_hsalsa20_inputbytes:it,_crypto_core_hsalsa20_keybytes:Et,_crypto_core_hsalsa20_outputbytes:Et,_crypto_core_ristretto255_add:function(A,I,g){var B,C;return A|=0,g|=0,C=h,B=h=h+63&-64,h=h+800|0,0==(0|UA(B+640|0,I|=0))&&0==(0|UA(B+480|0,g))?(TB(B,B+480|0),RI(B+160|0,B+640|0,B),YB(B+320|0,B+160|0),fA(A,B+320|0),I=0):I=-1,h=C,0|I},_crypto_core_ristretto255_bytes:Et,_crypto_core_ristretto255_from_hash:ya,_crypto_core_ristretto255_hashbytes:_t,_crypto_core_ristretto255_is_valid_point:function(A){var I,g;return I=h,g=h=h+63&-64,h=h+160|0,A=0==(0|UA(g,A|=0))&1,h=I,0|A},_crypto_core_ristretto255_nonreducedscalarbytes:_t,_crypto_core_ristretto255_random:function(A){var I,g;A|=0,I=h,g=h=h+63&-64,h=h+64|0,vB(g,64),ya(A,g),h=I},_crypto_core_ristretto255_scalar_add:function(A,I,g){zA(A|=0,I|=0,g|=0)},_crypto_core_ristretto255_scalar_complement:function(A,I){GA(A|=0,I|=0)},_crypto_core_ristretto255_scalar_invert:function(A,I){return 0|Aa(A|=0,I|=0)},_crypto_core_ristretto255_scalar_mul:na,_crypto_core_ristretto255_scalar_negate:function(A,I){SA(A|=0,I|=0)},_crypto_core_ristretto255_scalar_random:function(A){PB(A|=0)},_crypto_core_ristretto255_scalar_reduce:function(A,I){WI(A|=0,I|=0)},_crypto_core_ristretto255_scalar_sub:function(A,I,g){sB(A|=0,I|=0,g|=0)},_crypto_core_ristretto255_scalarbytes:Et,_crypto_core_ristretto255_sub:function(A,I,g){var B,C;return A|=0,g|=0,C=h,B=h=h+63&-64,h=h+800|0,0==(0|UA(B+640|0,I|=0))&&0==(0|UA(B+480|0,g))?(TB(B,B+480|0),NI(B+160|0,B+640|0,B),YB(B+320|0,B+160|0),fA(A,B+320|0),I=0):I=-1,h=C,0|I},_crypto_core_salsa20:$C,_crypto_core_salsa2012:ZC,_crypto_core_salsa2012_constbytes:it,_crypto_core_salsa2012_inputbytes:it,_crypto_core_salsa2012_keybytes:Et,_crypto_core_salsa2012_outputbytes:_t,_crypto_core_salsa208:OC,_crypto_core_salsa208_constbytes:it,_crypto_core_salsa208_inputbytes:it,_crypto_core_salsa208_keybytes:Et,_crypto_core_salsa208_outputbytes:_t,_crypto_core_salsa20_constbytes:it,_crypto_core_salsa20_inputbytes:it,_crypto_core_salsa20_keybytes:Et,_crypto_core_salsa20_outputbytes:_t,_crypto_generichash:QC,_crypto_generichash_blake2b:yB,_crypto_generichash_blake2b_bytes:Et,_crypto_generichash_blake2b_bytes_max:_t,_crypto_generichash_blake2b_bytes_min:it,_crypto_generichash_blake2b_final:gC,_crypto_generichash_blake2b_init:bg,_crypto_generichash_blake2b_init_salt_personal:function(A,I,g,B,C,a){A|=0,I|=0,g|=0,B|=0,C|=0,a|=0;do{if(!(g>>>0>64|(B+-1|0)>>>0>63)){if(0==(0|I)|0==(0|g)){aI(A,255&B,C,a),I=0;break}bA(A,255&B,I,255&g,C,a),I=0;break}I=-1}while(0);return 0|I},_crypto_generichash_blake2b_keybytes:Et,_crypto_generichash_blake2b_keybytes_max:_t,_crypto_generichash_blake2b_keybytes_min:it,_crypto_generichash_blake2b_keygen:Ja,_crypto_generichash_blake2b_personalbytes:it,_crypto_generichash_blake2b_salt_personal:Yg,_crypto_generichash_blake2b_saltbytes:it,_crypto_generichash_blake2b_statebytes:Za,_crypto_generichash_blake2b_update:XC,_crypto_generichash_bytes:Et,_crypto_generichash_bytes_max:_t,_crypto_generichash_bytes_min:it,_crypto_generichash_final:Ba,_crypto_generichash_init:KC,_crypto_generichash_keybytes:Et,_crypto_generichash_keybytes_max:_t,_crypto_generichash_keybytes_min:it,_crypto_generichash_keygen:Ja,_crypto_generichash_primitive:Qt,_crypto_generichash_statebytes:Za,_crypto_generichash_update:MC,_crypto_hash:function(A,I,g,B){return Xg(A|=0,I|=0,g|=0,B|=0),0},_crypto_hash_bytes:_t,_crypto_hash_primitive:function(){return 34286},_crypto_hash_sha256:function(A,I,g,B){var C,a;return A|=0,I|=0,g|=0,B|=0,C=h,a=h=h+63&-64,h=h+112|0,Fg(a),z(a,I,g,B),lB(a,A),h=C,0},_crypto_hash_sha256_bytes:Et,_crypto_hash_sha256_final:lB,_crypto_hash_sha256_init:Fg,_crypto_hash_sha256_statebytes:function(){return 104},_crypto_hash_sha256_update:z,_crypto_hash_sha512:Xg,_crypto_hash_sha512_bytes:_t,_crypto_hash_sha512_final:fB,_crypto_hash_sha512_init:Og,_crypto_hash_sha512_statebytes:at,_crypto_hash_sha512_update:q,_crypto_kdf_blake2b_bytes_max:_t,_crypto_kdf_blake2b_bytes_min:it,_crypto_kdf_blake2b_contextbytes:et,_crypto_kdf_blake2b_derive_from_key:EI,_crypto_kdf_blake2b_keybytes:Et,_crypto_kdf_bytes_max:_t,_crypto_kdf_bytes_min:it,_crypto_kdf_contextbytes:et,_crypto_kdf_derive_from_key:function(A,I,g,B,C,a){return 0|EI(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0)},_crypto_kdf_keybytes:Et,_crypto_kdf_keygen:Ja,_crypto_kdf_primitive:Qt,_crypto_kx_client_session_keys:function(A,I,g,C,a){var t,r,Q;if(I|=0,g|=0,C|=0,a|=0,Q=h,r=h=h+63&-64,h=h+480|0,t=0==(0|(A|=0))?I:A,I=0==(0|I)?t:I,t||st(),0|_a(r+448|0,C,a))A=-1;else{KC(r,0,0,64),MC(r,r+448|0,32,0),Lg(r+448|0,32),MC(r,g,32,0),MC(r,a,32,0),Ba(r,r+384|0,64),Lg(r,384),A=0;do{B[t+A>>0]=0|B[r+384+A>>0],B[I+A>>0]=0|B[r+384+(A+32)>>0],A=A+1|0}while(32!=(0|A));Lg(r+384|0,64),A=0}return h=Q,0|A},_crypto_kx_keypair:function(A,I){return A|=0,vB(I|=0,32),0|ha(A,I)},_crypto_kx_primitive:function(){return 34301},_crypto_kx_publickeybytes:Et,_crypto_kx_secretkeybytes:Et,_crypto_kx_seed_keypair:function(A,I,g){return A|=0,QC(I|=0,32,g|=0,32,0,0,0),0|ha(A,I)},_crypto_kx_seedbytes:Et,_crypto_kx_server_session_keys:function(A,I,g,C,a){var t,r,Q;if(I|=0,g|=0,C|=0,a|=0,Q=h,r=h=h+63&-64,h=h+480|0,t=0==(0|(A|=0))?I:A,I=0==(0|I)?t:I,t||st(),0|_a(r+448|0,C,a))A=-1;else{KC(r,0,0,64),MC(r,r+448|0,32,0),Lg(r+448|0,32),MC(r,a,32,0),MC(r,g,32,0),Ba(r,r+384|0,64),Lg(r,384),A=0;do{B[I+A>>0]=0|B[r+384+A>>0],B[t+A>>0]=0|B[r+384+(A+32)>>0],A=A+1|0}while(32!=(0|A));Lg(r+384|0,64),A=0}return h=Q,0|A},_crypto_kx_sessionkeybytes:Et,_crypto_onetimeauth:function(A,I,g,B,C){return 0|kC(A|=0,I|=0,g|=0,B|=0,C|=0)},_crypto_onetimeauth_bytes:it,_crypto_onetimeauth_final:function(A,I){return 0|oa(A|=0,I|=0)},_crypto_onetimeauth_init:function(A,I){return 0|ca(A|=0,I|=0)},_crypto_onetimeauth_keybytes:Et,_crypto_onetimeauth_keygen:Ja,_crypto_onetimeauth_poly1305:kC,_crypto_onetimeauth_poly1305_bytes:it,_crypto_onetimeauth_poly1305_final:oa,_crypto_onetimeauth_poly1305_init:ca,_crypto_onetimeauth_poly1305_keybytes:Et,_crypto_onetimeauth_poly1305_keygen:Ja,_crypto_onetimeauth_poly1305_statebytes:za,_crypto_onetimeauth_poly1305_update:GC,_crypto_onetimeauth_poly1305_verify:lC,_crypto_onetimeauth_primitive:function(){return 34315},_crypto_onetimeauth_statebytes:za,_crypto_onetimeauth_update:function(A,I,g,B){return 0|GC(A|=0,I|=0,g|=0,B|=0)},_crypto_onetimeauth_verify:function(A,I,g,B,C){return 0|lC(A|=0,I|=0,g|=0,B|=0,C|=0)},_crypto_pwhash:function(A,I,g,B,C,t,r,Q,e,o,c){switch(A|=0,I|=0,g|=0,B|=0,C|=0,t|=0,r|=0,Q|=0,e|=0,o|=0,0|(c|=0)){case 1:I=0|CI(A,I,g,B,C,t,r,Q,e,o,1);break;case 2:I=0|rI(A,I,g,B,C,t,r,Q,e,o,2);break;default:a[8886]=28,I=-1}return 0|I},_crypto_pwhash_alg_argon2i13:Bt,_crypto_pwhash_alg_argon2id13:Ct,_crypto_pwhash_alg_default:Ct,_crypto_pwhash_argon2i:CI,_crypto_pwhash_argon2i_alg_argon2i13:Bt,_crypto_pwhash_argon2i_bytes_max:rt,_crypto_pwhash_argon2i_bytes_min:it,_crypto_pwhash_argon2i_memlimit_interactive:Ra,_crypto_pwhash_argon2i_memlimit_max:Ta,_crypto_pwhash_argon2i_memlimit_min:$a,_crypto_pwhash_argon2i_memlimit_moderate:function(){return 134217728},_crypto_pwhash_argon2i_memlimit_sensitive:function(){return 536870912},_crypto_pwhash_argon2i_opslimit_interactive:Wa,_crypto_pwhash_argon2i_opslimit_max:rt,_crypto_pwhash_argon2i_opslimit_min:It,_crypto_pwhash_argon2i_opslimit_moderate:function(){return 6},_crypto_pwhash_argon2i_opslimit_sensitive:et,_crypto_pwhash_argon2i_passwd_max:rt,_crypto_pwhash_argon2i_passwd_min:nt,_crypto_pwhash_argon2i_saltbytes:it,_crypto_pwhash_argon2i_str:hI,_crypto_pwhash_argon2i_str_needs_rehash:PC,_crypto_pwhash_argon2i_str_verify:pg,_crypto_pwhash_argon2i_strbytes:tt,_crypto_pwhash_argon2i_strprefix:function(){return 34395},_crypto_pwhash_argon2id:rI,_crypto_pwhash_argon2id_alg_argon2id13:Ct,_crypto_pwhash_argon2id_bytes_max:rt,_crypto_pwhash_argon2id_bytes_min:it,_crypto_pwhash_argon2id_memlimit_interactive:qa,_crypto_pwhash_argon2id_memlimit_max:Ta,_crypto_pwhash_argon2id_memlimit_min:$a,_crypto_pwhash_argon2id_memlimit_moderate:ja,_crypto_pwhash_argon2id_memlimit_sensitive:Ka,_crypto_pwhash_argon2id_opslimit_interactive:Ct,_crypto_pwhash_argon2id_opslimit_max:rt,_crypto_pwhash_argon2id_opslimit_min:Bt,_crypto_pwhash_argon2id_opslimit_moderate:It,_crypto_pwhash_argon2id_opslimit_sensitive:Wa,_crypto_pwhash_argon2id_passwd_max:rt,_crypto_pwhash_argon2id_passwd_min:nt,_crypto_pwhash_argon2id_saltbytes:it,_crypto_pwhash_argon2id_str:wI,_crypto_pwhash_argon2id_str_needs_rehash:LC,_crypto_pwhash_argon2id_str_verify:sg,_crypto_pwhash_argon2id_strbytes:tt,_crypto_pwhash_argon2id_strprefix:gt,_crypto_pwhash_bytes_max:rt,_crypto_pwhash_bytes_min:it,_crypto_pwhash_memlimit_interactive:qa,_crypto_pwhash_memlimit_max:Ta,_crypto_pwhash_memlimit_min:$a,_crypto_pwhash_memlimit_moderate:ja,_crypto_pwhash_memlimit_sensitive:Ka,_crypto_pwhash_opslimit_interactive:Ct,_crypto_pwhash_opslimit_max:rt,_crypto_pwhash_opslimit_min:Bt,_crypto_pwhash_opslimit_moderate:It,_crypto_pwhash_opslimit_sensitive:Wa,_crypto_pwhash_passwd_max:rt,_crypto_pwhash_passwd_min:nt,_crypto_pwhash_primitive:function(){return 34405},_crypto_pwhash_saltbytes:it,_crypto_pwhash_scryptsalsa208sha256:function(A,I,g,B,C,t,r,Q,e,c){var i,_;g|=0,B|=0,C|=0,t|=0,r|=0,Q|=0,e|=0,c|=0,_=h,i=h=h+63&-64,h=h+16|0,tI(0|(A|=0),0,0|(I|=0));do{if(!((t|g)>>>0>0|0==(t|g|0)&(C|I)>>>0>4294967295)){if(g>>>0<0|0==(0|g)&I>>>0<16){a[8886]=28,I=-1;break}FA(Q,e,c,i+8|0,i+4|0,i),I=0|og(B,C,r,32,e=0|$B(1,0,0|a[i+8>>2]),c=0|o(),0|a[i>>2],0|a[i+4>>2],A,I);break}a[8886]=22,I=-1}while(0);return h=_,0|I},_crypto_pwhash_scryptsalsa208sha256_bytes_max:rt,_crypto_pwhash_scryptsalsa208sha256_bytes_min:it,_crypto_pwhash_scryptsalsa208sha256_ll:og,_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive:va,_crypto_pwhash_scryptsalsa208sha256_memlimit_max:rt,_crypto_pwhash_scryptsalsa208sha256_memlimit_min:va,_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive:Ka,_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive:function(){return 524288},_crypto_pwhash_scryptsalsa208sha256_opslimit_max:rt,_crypto_pwhash_scryptsalsa208sha256_opslimit_min:function(){return 32768},_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive:Ra,_crypto_pwhash_scryptsalsa208sha256_passwd_max:rt,_crypto_pwhash_scryptsalsa208sha256_passwd_min:nt,_crypto_pwhash_scryptsalsa208sha256_saltbytes:Et,_crypto_pwhash_scryptsalsa208sha256_str:function(A,I,g,C,t,r,Q){I|=0,g|=0,C|=0,t|=0,r|=0,Q|=0;var e,o,c=0,i=0;o=h,e=h=h+63&-64,h=h+128|0,i=102+(c=A|=0)|0;do{B[c>>0]=0,c=c+1|0}while((0|c)<(0|i));do{if(C>>>0>0|0==(0|C)&g>>>0>4294967295)a[8886]=22,g=-1;else{if(FA(t,r,Q,e+104|0,e+100|0,e+96|0),vB(e+64|0,32),!(0|bI(0|a[e+104>>2],0|a[e+96>>2],0|a[e+100>>2],e+64|0,e))){a[8886]=28,g=-1;break}Na(e+108|0),i=0==(0|WA(e+108|0,I,g,e,A)),Ma(e+108|0),i?(a[8886]=28,g=-1):g=0}}while(0);return h=o,0|g},_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash:function(A,I,g,B){var C,t;A|=0,t=h,C=h=h+63&-64,h=h+32|0,FA(I|=0,g|=0,B|=0,C+20|0,C+12|0,C+4|0);do{if(101==(0|cC(A))){if(!(0|Dg(A,C+16|0,C,C+8|0))){a[8886]=28,I=-1;break}I=(0|a[C+20>>2])==(0|a[C+16>>2])&&(0|a[C+4>>2])==(0|a[C>>2])?(0|a[C+12>>2])!=(0|a[C+8>>2])&1:1}else a[8886]=28,I=-1}while(0);return h=t,0|I},_crypto_pwhash_scryptsalsa208sha256_str_verify:function(A,I,g,B){I|=0,g|=0,B|=0;var t,r,Q=0;if(r=h,t=h=h+63&-64,h=h+128|0,101==(0|cC(A|=0))){Na(t+104|0),Q=(B=t)+100|0;do{a[B>>2]=0,B=B+4|0}while((0|B)<(0|Q));C[t+100>>1]=0,I=0==(0|WA(t+104|0,I,g,A,t)),Ma(t+104|0),I?B=-1:(B=0|XI(t,A,102),Lg(t,102))}else B=-1;return h=r,0|B},_crypto_pwhash_scryptsalsa208sha256_strbytes:function(){return 102},_crypto_pwhash_scryptsalsa208sha256_strprefix:function(){return 35426},_crypto_pwhash_str:function(A,I,g,B,C,a,t){return 0|wI(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0)},_crypto_pwhash_str_alg:function(A,I,g,B,C,a,t,r){A|=0,I|=0,g|=0,B|=0,C|=0,a|=0,t|=0;var Q=0;switch(0|(r|=0)){case 1:Q=0|hI(A,I,g,B,C,a,t);break;case 2:Q=0|wI(A,I,g,B,C,a,t);break;default:st()}return 0|Q},_crypto_pwhash_str_needs_rehash:function(A,I,g,B){A|=0,I|=0,g|=0,B|=0;do{if(0|$I(A,34384,10)){if(0|$I(A,34395,9)){a[8886]=28,I=-1;break}I=0|PC(A,I,g,B);break}I=0|LC(A,I,g,B)}while(0);return 0|I},_crypto_pwhash_str_verify:function(A,I,g,B){A|=0,I|=0,g|=0,B|=0;do{if(0|$I(A,34384,10)){if(0|$I(A,34395,9)){a[8886]=28,g=-1;break}g=0|pg(A,I,g,B);break}g=0|sg(A,I,g,B)}while(0);return 0|g},_crypto_pwhash_strbytes:tt,_crypto_pwhash_strprefix:gt,_crypto_scalarmult:_a,_crypto_scalarmult_base:ha,_crypto_scalarmult_bytes:Et,_crypto_scalarmult_curve25519:ag,_crypto_scalarmult_curve25519_base:ea,_crypto_scalarmult_curve25519_bytes:Et,_crypto_scalarmult_curve25519_scalarbytes:Et,_crypto_scalarmult_ed25519:function(A,I,g){return 0|cI(A|=0,I|=0,g|=0,1)},_crypto_scalarmult_ed25519_base:function(A,I){return 0|YI(A|=0,I|=0,1)},_crypto_scalarmult_ed25519_base_noclamp:function(A,I){return 0|YI(A|=0,I|=0,0)},_crypto_scalarmult_ed25519_bytes:Et,_crypto_scalarmult_ed25519_noclamp:function(A,I,g){return 0|cI(A|=0,I|=0,g|=0,0)},_crypto_scalarmult_ed25519_scalarbytes:Et,_crypto_scalarmult_primitive:function(){return 34413},_crypto_scalarmult_ristretto255:function(A,I,g){var C,a;if(A|=0,I|=0,a=h,C=h=h+63&-64,h=h+320|0,0|UA(C,g|=0))g=-1;else{g=0;do{B[A+g>>0]=0|B[I+g>>0],g=g+1|0}while(32!=(0|g));B[A+31>>0]=127&B[A+31>>0],W(C+160|0,A,C),fA(A,C+160|0),g=(0!=(0|Hg(A,32)))<<31>>31}return h=a,0|g},_crypto_scalarmult_ristretto255_base:function(A,I){A|=0,I|=0;var g,C=0,a=0;g=h,a=h=h+63&-64,h=h+160|0,C=0;do{B[A+C>>0]=0|B[I+C>>0],C=C+1|0}while(32!=(0|C));return B[A+31>>0]=127&B[A+31>>0],DA(a,A),fA(A,a),a=(0!=(0|Hg(A,32)))<<31>>31,h=g,0|a},_crypto_scalarmult_ristretto255_bytes:Et,_crypto_scalarmult_ristretto255_scalarbytes:Et,_crypto_scalarmult_scalarbytes:Et,_crypto_secretbox:uC,_crypto_secretbox_boxzerobytes:it,_crypto_secretbox_detached:tA,_crypto_secretbox_easy:function(A,I,g,B,C,a){return A|=0,I|=0,C|=0,a|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967279?(st(),0):(tA(A+16|0,A,I,g,B,C,a),0)},_crypto_secretbox_keybytes:Et,_crypto_secretbox_keygen:Ja,_crypto_secretbox_macbytes:it,_crypto_secretbox_messagebytes_max:At,_crypto_secretbox_noncebytes:ot,_crypto_secretbox_open:yC,_crypto_secretbox_open_detached:EA,_crypto_secretbox_open_easy:function(A,I,g,B,C,a){return I|=0,C|=0,a|=0,0|((B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<16?-1:0|EA(A|=0,I+16|0,I,g=0|bC(0|g,0|B,-16,-1),0|o(),C,a))},_crypto_secretbox_primitive:function(){return 34424},_crypto_secretbox_xchacha20poly1305_detached:aA,_crypto_secretbox_xchacha20poly1305_easy:function(A,I,g,B,C,a){return A|=0,I|=0,C|=0,a|=0,(B|=0)>>>0>0|0==(0|B)&(g|=0)>>>0>4294967279?(st(),0):(aA(A+16|0,A,I,g,B,C,a),0)},_crypto_secretbox_xchacha20poly1305_keybytes:Et,_crypto_secretbox_xchacha20poly1305_macbytes:it,_crypto_secretbox_xchacha20poly1305_messagebytes_max:At,_crypto_secretbox_xchacha20poly1305_noncebytes:ot,_crypto_secretbox_xchacha20poly1305_open_detached:_A,_crypto_secretbox_xchacha20poly1305_open_easy:function(A,I,g,B,C,a){return I|=0,C|=0,a|=0,0|((B|=0)>>>0<0|0==(0|B)&(g|=0)>>>0<16?-1:0|_A(A|=0,I+16|0,I,g=0|bC(0|g,0|B,-16,-1),0|o(),C,a))},_crypto_secretbox_xsalsa20poly1305:tg,_crypto_secretbox_xsalsa20poly1305_boxzerobytes:it,_crypto_secretbox_xsalsa20poly1305_keybytes:Et,_crypto_secretbox_xsalsa20poly1305_keygen:Ja,_crypto_secretbox_xsalsa20poly1305_macbytes:it,_crypto_secretbox_xsalsa20poly1305_messagebytes_max:At,_crypto_secretbox_xsalsa20poly1305_noncebytes:ot,_crypto_secretbox_xsalsa20poly1305_open:HI,_crypto_secretbox_xsalsa20poly1305_zerobytes:Et,_crypto_secretbox_zerobytes:Et,_crypto_secretstream_xchacha20poly1305_abytes:function(){return 17},_crypto_secretstream_xchacha20poly1305_headerbytes:ot,_crypto_secretstream_xchacha20poly1305_init_pull:function(A,I,g){var C;return K(A|=0,I|=0,g|=0,0),DC(A),C=t[I+16>>0]|t[I+16+1>>0]<<8|t[I+16+2>>0]<<16|t[I+16+3>>0]<<24,g=t[I+16+4>>0]|t[I+16+4+1>>0]<<8|t[I+16+4+2>>0]<<16|t[I+16+4+3>>0]<<24,B[A+36>>0]=C,B[A+36+1>>0]=C>>8,B[A+36+2>>0]=C>>16,B[A+36+3>>0]=C>>24,B[A+36+4>>0]=g,B[A+36+4+1>>0]=g>>8,B[A+36+4+2>>0]=g>>16,B[A+36+4+3>>0]=g>>24,B[A+44>>0]=0,B[A+44+1>>0]=0,B[A+44+2>>0]=0,B[A+44+3>>0]=0,B[A+44+4>>0]=0,B[A+44+4+1>>0]=0,B[A+44+4+2>>0]=0,B[A+44+4+3>>0]=0,0},_crypto_secretstream_xchacha20poly1305_init_push:function(A,I,g){return A|=0,g|=0,vB(I|=0,24),K(A,I,g,0),DC(A),g=t[I+16>>0]|t[I+16+1>>0]<<8|t[I+16+2>>0]<<16|t[I+16+3>>0]<<24,I=t[I+16+4>>0]|t[I+16+4+1>>0]<<8|t[I+16+4+2>>0]<<16|t[I+16+4+3>>0]<<24,B[A+36>>0]=g,B[A+36+1>>0]=g>>8,B[A+36+2>>0]=g>>16,B[A+36+3>>0]=g>>24,B[A+36+4>>0]=I,B[A+36+4+1>>0]=I>>8,B[A+36+4+2>>0]=I>>16,B[A+36+4+3>>0]=I>>24,B[A+44>>0]=0,B[A+44+1>>0]=0,B[A+44+2>>0]=0,B[A+44+3>>0]=0,B[A+44+4>>0]=0,B[A+44+4+1>>0]=0,B[A+44+4+2>>0]=0,B[A+44+4+3>>0]=0,0},_crypto_secretstream_xchacha20poly1305_keybytes:Et,_crypto_secretstream_xchacha20poly1305_keygen:Ja,_crypto_secretstream_xchacha20poly1305_messagebytes_max:function(){return-18},_crypto_secretstream_xchacha20poly1305_pull:function(A,I,g,C,t,r,Q,e,c,i){A|=0,I|=0,C|=0,t|=0,r|=0,Q|=0,e|=0,c|=0,i|=0;var _,E,n=0,s=0,y=0;E=h,_=h=h+63&-64,h=h+352|0,0|(g|=0)&&(a[g>>2]=0,a[g+4>>2]=0),0|C&&(B[C>>0]=-1);do{if(Q>>>0<0|0==(0|Q)&r>>>0<17)e=-1;else{s=0|bC(0|r,0|Q,-17,-1),(y=0|o())>>>0>0|0==(0|y)&s>>>0>4294967278&&st(),DB(_+16|0,64,0,A+32|0,A),ca(_+80|0,_+16|0),Lg(_+16|0,64),GC(_+80|0,e,c,i),e=0|FC(0,0,0|c,0|i),o(),GC(_+80|0,35488,15&e,0),n=64+(e=_+16|0)|0;do{a[e>>2]=0,e=e+4|0}while((0|e)<(0|n));if(B[_+16>>0]=0|B[t>>0],Ig(_+16|0,_+16|0,64,0,A+32|0,1,A),e=0|B[_+16>>0],B[_+16>>0]=0|B[t>>0],GC(_+80|0,_+16|0,64,0),GC(_+80|0,t+1|0,s,y),n=0|bC(0|r,0|Q,15,0),o(),GC(_+80|0,35488,15&n,0),tB(_+336|0,c,i),GC(_+80|0,_+336|0,8,0),tB(_+336|0,i=0|bC(0|r,0|Q,47,0),0|o()),GC(_+80|0,_+336|0,8,0),oa(_+80|0,_),Lg(_+80|0,256),0|XI(_,t+1+s|0,16)){Lg(_,16),e=-1;break}Ig(I,t+1|0,s,y,A+32|0,2,A),ZB(A+36|0,_),SB(A+32|0),(0!=(2&e)||0|Hg(A+32|0,4))&&RA(A),0|g&&(a[g>>2]=s,a[g+4>>2]=y),0|C?(B[C>>0]=e,e=0):e=0}}while(0);return h=E,0|e},_crypto_secretstream_xchacha20poly1305_push:function(A,I,g,C,t,r,Q,e,c,i){A|=0,I|=0,C|=0,t|=0,r|=0,Q|=0,e|=0,c|=0,i|=0;var _,E,n=0;E=h,n=h=h+63&-64,h=h+336|0,0|(g|=0)&&(a[g>>2]=0,a[g+4>>2]=0),r>>>0>0|0==(0|r)&t>>>0>4294967278&&st(),DB(n,64,0,A+32|0,A),ca(n+64|0,n),Lg(n,64),GC(n+64|0,Q,e,c),Q=0|FC(0,0,0|e,0|c),o(),GC(n+64|0,35488,15&Q,0),_=(Q=n)+64|0;do{a[Q>>2]=0,Q=Q+4|0}while((0|Q)<(0|_));return B[n>>0]=i,Ig(n,n,64,0,A+32|0,1,A),GC(n+64|0,n,64,0),B[I>>0]=0|B[n>>0],Ig(I+1|0,C,t,r,A+32|0,2,A),GC(n+64|0,I+1|0,t,r),GC(n+64|0,35488,15&t,0),tB(n+320|0,e,c),GC(n+64|0,n+320|0,8,0),tB(n+320|0,C=0|bC(0|t,0|r,64,0),0|o()),GC(n+64|0,n+320|0,8,0),oa(n+64|0,I+1+t|0),Lg(n+64|0,256),ZB(A+36|0,I+1+t|0),SB(A+32|0),(0!=(2&i)||0|Hg(A+32|0,4))&&RA(A),0|g&&(i=0|bC(0|t,0|r,17,0),n=0|o(),a[g>>2]=i,a[g+4>>2]=n),h=E,0},_crypto_secretstream_xchacha20poly1305_rekey:RA,_crypto_secretstream_xchacha20poly1305_statebytes:function(){return 52},_crypto_secretstream_xchacha20poly1305_tag_final:It,_crypto_secretstream_xchacha20poly1305_tag_message:nt,_crypto_secretstream_xchacha20poly1305_tag_push:Bt,_crypto_secretstream_xchacha20poly1305_tag_rekey:Ct,_crypto_shorthash:function(A,I,g,B,C){return G(A|=0,I|=0,g|=0,B|=0,C|=0),0},_crypto_shorthash_bytes:et,_crypto_shorthash_keybytes:it,_crypto_shorthash_keygen:function(A){vB(A|=0,16)},_crypto_shorthash_primitive:function(){return 34441},_crypto_shorthash_siphash24:G,_crypto_shorthash_siphash24_bytes:et,_crypto_shorthash_siphash24_keybytes:it,_crypto_shorthash_siphashx24:function(A,I,g,B,C){A|=0,I|=0,g|=0,B|=0;var a=0,r=0,Q=0,e=0,c=0,i=0,_=0,E=0,n=0,s=0,y=0,h=0,p=0,f=0,w=0,l=0,u=0;if(i=0|wB(C|=0),E=0|o(),a=0|wB(C+8|0),r=0|o(),B=0|$B(0|g,0|B,56),C=0|o(),(I+g+(0-(7&g))|0)==(0|I))y=2037671283^a,Q=1952801890^r,s=1886610805^i,_=1936682341^E,c=1852075907^a,e=1685025377^r,w=1852142177^i,a=1819895653^E,r=I;else for(f=2037671283^a,Q=1952801890^r,y=1886610805^i,_=1936682341^E,c=1852075907^a,e=1685025377^r,r=1852142177^i,a=1819895653^E,s=I;;){if(u=(h=0|wB(s))^f,Q^=p=0|o(),w=0|bC(0|y,0|_,0|c,0|e),f=0|o(),i=0|dB(c,e,13),c=(0|o())^f,e=0|dB(w,f,32),f=0|o(),E=0|bC(0|u,0|Q,0|r,0|a),n=0|o(),f=0|bC((Q=0|dB(u,Q,16))^E|0,0|(r=(0|o())^n),0|e,0|f),e=0|o(),r=0|dB(Q^E,r,21),Q=e^(0|o()),n=0|bC(0|E,0|n,i^w|0,0|c),E=0|o(),c=0|dB(i^w,c,17),a=(0|o())^E,E=0|dB(n,E,32),w=0|o(),e=0|bC(c^n|0,0|a,0|f,0|e),i=0|o(),a=0|dB(c^n,a,13),n=(0|o())^i,i=0|dB(e,i,32),c=0|o(),w=0|bC(0|E,0|w,f^r|0,0|Q),E=0|o(),c=0|bC((Q=0|dB(f^r,Q,16))^w|0,0|(r=(0|o())^E),0|i,0|c),i=0|o(),r=0|dB(Q^w,r,21),Q=i^(0|o()),E=0|bC(a^e|0,0|n,0|w,0|E),w=0|o(),n=0|dB(a^e,n,17),e=(0|o())^w,w=0|dB(E,w,32),a=0|o(),(0|(s=s+8|0))==(I+g+(0-(7&g))|0)){y=c^r,s=c^h,_=i^p,c=n^E,r=I+g+(0-(7&g))|0;break}f=c^r,y=c^h,_=i^p,c=n^E,r=w}switch(7&g){case 7:l=0|$B(0|t[r+6>>0],0,48),C=0|o()|C,B|=l,l=6;break;case 6:l=6;break;case 5:l=7;break;case 4:l=8;break;case 3:l=9;break;case 2:l=10;break;case 1:l=11}return 6==(0|l)&&(u=0|$B(0|t[r+5>>0],0,40),C=0|o()|C,B|=u,l=7),7==(0|l)&&(C=0|t[r+4>>0]|C,l=8),8==(0|l)&&(B|=u=0|$B(0|t[r+3>>0],0,24),C=0|o()|C,l=9),9==(0|l)&&(B|=u=0|$B(0|t[r+2>>0],0,16),C=0|o()|C,l=10),10==(0|l)&&(B|=u=0|$B(0|t[r+1>>0],0,8),C=0|o()|C,l=11),11==(0|l)&&(B=0|B|t[r>>0]),g=B^y,p=C^Q,I=0|bC(0|s,0|_,0|c,0|e),u=0|o(),l=0|dB(c,e,13),s=(0|o())^u,u=0|dB(I,u,32),h=0|o(),f=0|bC(0|g,0|p,0|w,0|a),y=0|o(),h=0|bC((p=0|dB(g,p,16))^f|0,0|(g=(0|o())^y),0|u,0|h),u=0|o(),g=0|dB(p^f,g,21),p=u^(0|o()),y=0|bC(0|f,0|y,l^I|0,0|s),f=0|o(),s=0|dB(l^I,s,17),I=(0|o())^f,f=0|dB(y,f,32),l=0|o(),u=0|bC(s^y|0,0|I,0|h,0|u),w=0|o(),I=0|dB(s^y,I,13),y=(0|o())^w,w=0|dB(u,w,32),s=0|o(),l=0|bC(0|f,0|l,h^g|0,0|p),f=0|o(),s=0|bC((p=0|dB(h^g,p,16))^l|0,0|(g=(0|o())^f),0|w,0|s),w=0|o(),g=0|dB(p^l,g,21),p=w^(0|o()),f=0|bC(I^u|0,0|y,0|l,0|f),l=0|o(),y=0|dB(I^u,y,17),u=(0|o())^l,l=0|dB(f,l,32),I=0|o(),w=0|bC(s^B|0,w^C|0,y^f|0,0|u),h=0|o(),u=0|dB(y^f,u,13),f=(0|o())^h,h=0|dB(w,h,32),y=0|o(),I=0|bC(238^l|0,0|I,s^g|0,0|p),l=0|o(),y=0|bC((p=0|dB(s^g,p,16))^I|0,0|(g=(0|o())^l),0|h,0|y),h=0|o(),g=0|dB(p^I,g,21),p=h^(0|o()),l=0|bC(0|I,0|l,u^w|0,0|f),I=0|o(),f=0|dB(u^w,f,17),w=(0|o())^I,I=0|dB(l,I,32),u=0|o(),h=0|bC(f^l|0,0|w,0|y,0|h),s=0|o(),w=0|dB(f^l,w,13),l=(0|o())^s,s=0|dB(h,s,32),f=0|o(),u=0|bC(0|I,0|u,y^g|0,0|p),I=0|o(),f=0|bC((p=0|dB(y^g,p,16))^u|0,0|(g=(0|o())^I),0|s,0|f),s=0|o(),g=0|dB(p^u,g,21),p=s^(0|o()),I=0|bC(w^h|0,0|l,0|u,0|I),u=0|o(),l=0|dB(w^h,l,17),h=(0|o())^u,u=0|dB(I,u,32),w=0|o(),s=0|bC(l^I|0,0|h,0|f,0|s),y=0|o(),h=0|dB(l^I,h,13),I=(0|o())^y,y=0|dB(s,y,32),l=0|o(),w=0|bC(0|u,0|w,f^g|0,0|p),u=0|o(),l=0|bC((p=0|dB(f^g,p,16))^w|0,0|(g=(0|o())^u),0|y,0|l),y=0|o(),g=0|dB(p^w,g,21),p=y^(0|o()),u=0|bC(h^s|0,0|I,0|w,0|u),w=0|o(),I=0|dB(h^s,I,17),s=(0|o())^w,w=0|dB(u,w,32),h=0|o(),y=0|bC(I^u|0,0|s,0|l,0|y),f=0|o(),s=0|dB(I^u,s,13),u=(0|o())^f,f=0|dB(y,f,32),I=0|o(),h=0|bC(0|w,0|h,l^g|0,0|p),w=0|o(),I=0|bC((p=0|dB(l^g,p,16))^h|0,0|(g=(0|o())^w),0|f,0|I),f=0|o(),g=0|dB(p^h,g,21),p=f^(0|o()),w=0|bC(s^y|0,0|u,0|h,0|w),h=0|o(),u=0|dB(s^y,u,17),y=(0|o())^h,tB(A,u^w^I^(h=0|dB(w,h,32))^I^g,y^f^(s=0|o())^p),f=0|bC(u^w^221|0,0|y,0|I,0|f),l=0|o(),y=0|dB(u^w^221,y,13),w=(0|o())^l,l=0|dB(f,l,32),u=0|o(),s=0|bC(0|h,0|s,I^g|0,0|p),h=0|o(),u=0|bC((p=0|dB(I^g,p,16))^s|0,0|(g=(0|o())^h),0|l,0|u),l=0|o(),g=0|dB(p^s,g,21),p=l^(0|o()),h=0|bC(y^f|0,0|w,0|s,0|h),s=0|o(),w=0|dB(y^f,w,17),f=(0|o())^s,s=0|dB(h,s,32),y=0|o(),l=0|bC(w^h|0,0|f,0|u,0|l),I=0|o(),f=0|dB(w^h,f,13),h=(0|o())^I,I=0|dB(l,I,32),w=0|o(),y=0|bC(0|s,0|y,u^g|0,0|p),s=0|o(),w=0|bC((p=0|dB(u^g,p,16))^y|0,0|(g=(0|o())^s),0|I,0|w),I=0|o(),g=0|dB(p^y,g,21),p=I^(0|o()),s=0|bC(f^l|0,0|h,0|y,0|s),y=0|o(),h=0|dB(f^l,h,17),l=(0|o())^y,y=0|dB(s,y,32),f=0|o(),I=0|bC(h^s|0,0|l,0|w,0|I),u=0|o(),l=0|dB(h^s,l,13),s=(0|o())^u,u=0|dB(I,u,32),h=0|o(),f=0|bC(0|y,0|f,w^g|0,0|p),y=0|o(),h=0|bC((p=0|dB(w^g,p,16))^f|0,0|(g=(0|o())^y),0|u,0|h),u=0|o(),g=0|dB(p^f,g,21),p=u^(0|o()),y=0|bC(l^I|0,0|s,0|f,0|y),f=0|o(),s=0|dB(l^I,s,17),I=(0|o())^f,f=0|dB(y,f,32),l=0|o(),u=0|bC(s^y|0,0|I,0|h,0|u),w=0|o(),I=0|dB(s^y,I,13),w=(0|o())^w,l=0|bC(0|f,0|l,h^g|0,0|p),f=0|o(),p=0|dB((p=0|dB(h^g,p,16))^l,(0|o())^f,21),g=0|o(),f=0|bC(I^u|0,0|w,0|l,0|f),l=0|o(),w=0|dB(I^u,w,17),u=0|o(),tB(A+8|0,p^f^w^(I=0|dB(f,l,32)),g^l^u^(0|o())),0},_crypto_shorthash_siphashx24_bytes:it,_crypto_shorthash_siphashx24_keybytes:it,_crypto_sign:function(A,I,g,B,C,a){return 0|kI(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0)},_crypto_sign_bytes:_t,_crypto_sign_detached:function(A,I,g,B,C,a){return sC(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0),0},_crypto_sign_ed25519:kI,_crypto_sign_ed25519_bytes:_t,_crypto_sign_ed25519_detached:sC,_crypto_sign_ed25519_keypair:pB,_crypto_sign_ed25519_messagebytes_max:Oa,_crypto_sign_ed25519_open:oI,_crypto_sign_ed25519_pk_to_curve25519:function(A,I){var g,B;return A|=0,B=h,g=h=h+63&-64,h=h+256|0,0==(0|gI(I|=0))&&0==(0|vA(g+88|0,I))&&0!=(0|qB(g+88|0))?(mC(g),OA(g,g,g+88+40|0),mC(g+48|0),$A(g+48|0,g+48|0,g+88+40|0),CA(g,g),m(g+48|0,g+48|0,g),pA(A,g+48|0),A=0):A=-1,h=B,0|A},_crypto_sign_ed25519_publickeybytes:Et,_crypto_sign_ed25519_secretkeybytes:_t,_crypto_sign_ed25519_seed_keypair:ig,_crypto_sign_ed25519_seedbytes:Et,_crypto_sign_ed25519_sk_to_curve25519:function(A,I){var g,C,a;A|=0,C=h,a=h=h+63&-64,h=h+64|0,Xg(a,I|=0,32,0),B[a>>0]=-8&B[a>>0],B[a+31>>0]=63&B[a+31>>0]|64,I=a,g=A+32|0;do{B[A>>0]=0|B[I>>0],A=A+1|0,I=I+1|0}while((0|A)<(0|g));return Lg(a,64),h=C,0},_crypto_sign_ed25519_sk_to_pk:function(A,I){return Rg(0|(A|=0),32+(I|=0)|0,32),0},_crypto_sign_ed25519_sk_to_seed:function(A,I){return Rg(0|(A|=0),0|(I|=0),32),0},_crypto_sign_ed25519_verify_detached:wC,_crypto_sign_ed25519ph_final_create:IB,_crypto_sign_ed25519ph_final_verify:gB,_crypto_sign_ed25519ph_init:Ha,_crypto_sign_ed25519ph_statebytes:at,_crypto_sign_ed25519ph_update:YC,_crypto_sign_final_create:function(A,I,g,B){return IB(A|=0,I|=0,g|=0,B|=0),0},_crypto_sign_final_verify:function(A,I,g){return 0|gB(A|=0,I|=0,g|=0)},_crypto_sign_init:function(A){return Ha(A|=0),0},_crypto_sign_keypair:function(A,I){return pB(A|=0,I|=0),0},_crypto_sign_messagebytes_max:Oa,_crypto_sign_open:function(A,I,g,B,C,a){return 0|oI(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0)},_crypto_sign_primitive:function(){return 34451},_crypto_sign_publickeybytes:Et,_crypto_sign_secretkeybytes:_t,_crypto_sign_seed_keypair:function(A,I,g){return ig(A|=0,I|=0,g|=0),0},_crypto_sign_seedbytes:Et,_crypto_sign_statebytes:at,_crypto_sign_update:qC,_crypto_sign_verify_detached:function(A,I,g,B,C){return 0|wC(A|=0,I|=0,g|=0,B|=0,C|=0)},_crypto_stream:function(A,I,g,B,C){return 0|xg(A|=0,I|=0,g|=0,B|=0,C|=0)},_crypto_stream_chacha20:RB,_crypto_stream_chacha20_ietf:DB,_crypto_stream_chacha20_ietf_keybytes:Et,_crypto_stream_chacha20_ietf_keygen:Ja,_crypto_stream_chacha20_ietf_messagebytes_max:rt,_crypto_stream_chacha20_ietf_noncebytes:Xa,_crypto_stream_chacha20_ietf_xor:oB,_crypto_stream_chacha20_ietf_xor_ic:Ig,_crypto_stream_chacha20_keybytes:Et,_crypto_stream_chacha20_keygen:Ja,_crypto_stream_chacha20_messagebytes_max:rt,_crypto_stream_chacha20_noncebytes:et,_crypto_stream_chacha20_xor:hB,_crypto_stream_chacha20_xor_ic:Tg,_crypto_stream_keybytes:Et,_crypto_stream_keygen:Ja,_crypto_stream_messagebytes_max:rt,_crypto_stream_noncebytes:ot,_crypto_stream_primitive:function(){return 34459},_crypto_stream_salsa20:RC,_crypto_stream_salsa2012:function(A,I,g,C,r){A|=0,C|=0,r|=0;var Q,e,c=0,i=0,_=0,E=0,n=0;if(Q=h,e=h=h+63&-64,h=h+112|0,!(0==(0|(I|=0))&0==(0|(g|=0)))){c=(i=e)+32|0;do{B[i>>0]=0|B[r>>0],i=i+1|0,r=r+1|0}while((0|i)<(0|c));if(i=t[C+4>>0]|t[C+4+1>>0]<<8|t[C+4+2>>0]<<16|t[C+4+3>>0]<<24,a[e+96>>2]=t[C>>0]|t[C+1>>0]<<8|t[C+2>>0]<<16|t[C+3>>0]<<24,a[e+96+4>>2]=i,a[e+96+8>>2]=0,a[e+96+8+4>>2]=0,g>>>0>0|0==(0|g)&I>>>0>63){do{for(ZC(A,e+96|0,e,0),c=8,r=1;r=r+(0|t[(i=e+96+c|0)>>0])|0,B[i>>0]=r,16!=(0|(c=c+1|0));)r>>>=8;I=0|bC(0|I,0|g,-64,-1),g=0|o(),A=A+64|0}while(g>>>0>0|0==(0|g)&I>>>0>63);0==(0|I)&0==(0|g)||(E=A,n=I,_=8)}else E=A,n=I,_=8;if(8==(0|_)&&(ZC(e+32|0,e+96|0,e,0),0|n)){r=0;do{B[E+r>>0]=0|B[e+32+r>>0],r=r+1|0}while((0|r)!=(0|n))}Lg(e+32|0,64),Lg(e,32)}return h=Q,0},_crypto_stream_salsa2012_keybytes:Et,_crypto_stream_salsa2012_keygen:Ja,_crypto_stream_salsa2012_messagebytes_max:rt,_crypto_stream_salsa2012_noncebytes:et,_crypto_stream_salsa2012_xor:function(A,I,g,C,r,Q){A|=0,I|=0,r|=0,Q|=0;var e,c,i=0,_=0,E=0,n=0,s=0,y=0;if(e=h,c=h=h+63&-64,h=h+112|0,!(0==(0|(g|=0))&0==(0|(C|=0)))){i=(_=c)+32|0;do{B[_>>0]=0|B[Q>>0],_=_+1|0,Q=Q+1|0}while((0|_)<(0|i));if(_=t[r+4>>0]|t[r+4+1>>0]<<8|t[r+4+2>>0]<<16|t[r+4+3>>0]<<24,a[c+96>>2]=t[r>>0]|t[r+1>>0]<<8|t[r+2>>0]<<16|t[r+3>>0]<<24,a[c+96+4>>2]=_,a[c+96+8>>2]=0,a[c+96+8+4>>2]=0,C>>>0>0|0==(0|C)&g>>>0>63){do{ZC(c+32|0,c+96|0,c,0),Q=0;do{B[A+Q>>0]=B[c+32+Q>>0]^B[I+Q>>0],Q=Q+1|0}while(64!=(0|Q));for(i=8,Q=1;Q=Q+(0|t[(_=c+96+i|0)>>0])|0,B[_>>0]=Q,16!=(0|(i=i+1|0));)Q>>>=8;g=0|bC(0|g,0|C,-64,-1),C=0|o(),A=A+64|0,I=I+64|0}while(C>>>0>0|0==(0|C)&g>>>0>63);0==(0|g)&0==(0|C)||(n=A,s=I,y=g,E=10)}else n=A,s=I,y=g,E=10;if(10==(0|E)&&(ZC(c+32|0,c+96|0,c,0),0|y)){Q=0;do{B[n+Q>>0]=B[c+32+Q>>0]^B[s+Q>>0],Q=Q+1|0}while((0|Q)!=(0|y))}Lg(c+32|0,64),Lg(c,32)}return h=e,0},_crypto_stream_salsa208:function(A,I,g,C,r){A|=0,C|=0,r|=0;var Q,e,c=0,i=0,_=0,E=0,n=0;if(Q=h,e=h=h+63&-64,h=h+112|0,!(0==(0|(I|=0))&0==(0|(g|=0)))){c=(i=e)+32|0;do{B[i>>0]=0|B[r>>0],i=i+1|0,r=r+1|0}while((0|i)<(0|c));if(i=t[C+4>>0]|t[C+4+1>>0]<<8|t[C+4+2>>0]<<16|t[C+4+3>>0]<<24,a[e+96>>2]=t[C>>0]|t[C+1>>0]<<8|t[C+2>>0]<<16|t[C+3>>0]<<24,a[e+96+4>>2]=i,a[e+96+8>>2]=0,a[e+96+8+4>>2]=0,g>>>0>0|0==(0|g)&I>>>0>63){do{for(OC(A,e+96|0,e,0),c=8,r=1;r=r+(0|t[(i=e+96+c|0)>>0])|0,B[i>>0]=r,16!=(0|(c=c+1|0));)r>>>=8;I=0|bC(0|I,0|g,-64,-1),g=0|o(),A=A+64|0}while(g>>>0>0|0==(0|g)&I>>>0>63);0==(0|I)&0==(0|g)||(E=A,n=I,_=8)}else E=A,n=I,_=8;if(8==(0|_)&&(OC(e+32|0,e+96|0,e,0),0|n)){r=0;do{B[E+r>>0]=0|B[e+32+r>>0],r=r+1|0}while((0|r)!=(0|n))}Lg(e+32|0,64),Lg(e,32)}return h=Q,0},_crypto_stream_salsa208_keybytes:Et,_crypto_stream_salsa208_keygen:Ja,_crypto_stream_salsa208_messagebytes_max:rt,_crypto_stream_salsa208_noncebytes:et,_crypto_stream_salsa208_xor:function(A,I,g,C,r,Q){A|=0,I|=0,r|=0,Q|=0;var e,c,i=0,_=0,E=0,n=0,s=0,y=0;if(e=h,c=h=h+63&-64,h=h+112|0,!(0==(0|(g|=0))&0==(0|(C|=0)))){i=(_=c)+32|0;do{B[_>>0]=0|B[Q>>0],_=_+1|0,Q=Q+1|0}while((0|_)<(0|i));if(_=t[r+4>>0]|t[r+4+1>>0]<<8|t[r+4+2>>0]<<16|t[r+4+3>>0]<<24,a[c+96>>2]=t[r>>0]|t[r+1>>0]<<8|t[r+2>>0]<<16|t[r+3>>0]<<24,a[c+96+4>>2]=_,a[c+96+8>>2]=0,a[c+96+8+4>>2]=0,C>>>0>0|0==(0|C)&g>>>0>63){do{OC(c+32|0,c+96|0,c,0),Q=0;do{B[A+Q>>0]=B[c+32+Q>>0]^B[I+Q>>0],Q=Q+1|0}while(64!=(0|Q));for(i=8,Q=1;Q=Q+(0|t[(_=c+96+i|0)>>0])|0,B[_>>0]=Q,16!=(0|(i=i+1|0));)Q>>>=8;g=0|bC(0|g,0|C,-64,-1),C=0|o(),A=A+64|0,I=I+64|0}while(C>>>0>0|0==(0|C)&g>>>0>63);0==(0|g)&0==(0|C)||(n=A,s=I,y=g,E=10)}else n=A,s=I,y=g,E=10;if(10==(0|E)&&(OC(c+32|0,c+96|0,c,0),0|y)){Q=0;do{B[n+Q>>0]=B[c+32+Q>>0]^B[s+Q>>0],Q=Q+1|0}while((0|Q)!=(0|y))}Lg(c+32|0,64),Lg(c,32)}return h=e,0},_crypto_stream_salsa20_keybytes:Et,_crypto_stream_salsa20_keygen:Ja,_crypto_stream_salsa20_messagebytes_max:rt,_crypto_stream_salsa20_noncebytes:et,_crypto_stream_salsa20_xor:fC,_crypto_stream_salsa20_xor_ic:XB,_crypto_stream_xchacha20:function(A,I,g,B,C){var a,t;return A|=0,I|=0,g|=0,a=h,t=h=h+63&-64,h=h+32|0,K(t,B|=0,C|=0,0),B=0|RB(A,I,g,B+16|0,t),h=a,0|B},_crypto_stream_xchacha20_keybytes:Et,_crypto_stream_xchacha20_keygen:Ja,_crypto_stream_xchacha20_messagebytes_max:rt,_crypto_stream_xchacha20_noncebytes:ot,_crypto_stream_xchacha20_xor:function(A,I,g,B,C,a){return 0|fg(A|=0,I|=0,g|=0,B|=0,C|=0,0,0,a|=0)},_crypto_stream_xchacha20_xor_ic:fg,_crypto_stream_xor:function(A,I,g,B,C,a){return 0|nC(A|=0,I|=0,g|=0,B|=0,C|=0,a|=0)},_crypto_stream_xsalsa20:xg,_crypto_stream_xsalsa20_keybytes:Et,_crypto_stream_xsalsa20_keygen:Ja,_crypto_stream_xsalsa20_messagebytes_max:rt,_crypto_stream_xsalsa20_noncebytes:ot,_crypto_stream_xsalsa20_xor:nC,_crypto_stream_xsalsa20_xor_ic:ng,_crypto_verify_16:ba,_crypto_verify_16_bytes:it,_crypto_verify_32:ka,_crypto_verify_32_bytes:Et,_crypto_verify_64:Fa,_crypto_verify_64_bytes:_t,_emscripten_get_sbrk_ptr:function(){return 36064},_emscripten_replace_memory:function(A){return B=new Int8Array(A),t=new Uint8Array(A),C=new Int16Array(A),new Uint16Array(A),a=new Int32Array(A),g=A,!0},_free:S,_i64Add:bC,_i64Subtract:FC,_malloc:u,_memcpy:sA,_memmove:Rg,_memset:tI,_randombytes:function(A,I,g){(g|=0)>>>0<1|1==(0|g)&(I|=0)>>>0<0?vB(A|=0,I):c(35243,35263,197,35289)},_randombytes_buf:vB,_randombytes_buf_deterministic:function(A,I,g){DB(A|=0,I|=0,0,35231,g|=0)},_randombytes_close:nt,_randombytes_implementation_name:function(){return 34468},_randombytes_random:La,_randombytes_seedbytes:Et,_randombytes_stir:Ya,_randombytes_uniform:function(A){var I=0;if((A|=0)>>>0<2)I=0;else{do{I=0|La()}while(I>>>0<(((0-A|0)>>>0)%(A>>>0)|0)>>>0);I=(I>>>0)%(A>>>0)|0}return 0|I},_sodium_base642bin:j,_sodium_base64_encoded_len:function(A,I){var g;return A|=0,sa(I|=0),(((A>>>0)/3|0)<<2|1)+(4-(3-(g=(0|r((A>>>0)/3|0,-3))+A|0)&0-(I>>>1&1))&0-(1&(g>>>1|g)))|0},_sodium_bin2base64:gA,_sodium_bin2hex:function(A,I,g,C){A|=0,g|=0;var a=0,r=0;if((C|=0)>>>0<2147483647&C<<1>>>0<(I|=0)>>>0||st(),C){I=0;do{r=0|t[g+I>>0],B[A+(a=I<<1)>>0]=87+(r>>>4)+((65526+(r>>>4)|0)>>>8&217),B[A+(1|a)>>0]=(22272+((15&r)<<8)+(65526+(15&r)&55552)|0)>>>8,I=I+1|0}while((0|I)!=(0|C));I=C<<1}else I=0;return B[A+I>>0]=0,0|A},_sodium_hex2bin:function(A,I,g,C,r,Q,e){A|=0,I|=0,g|=0,C|=0,r|=0,Q|=0,e|=0;var o=0,c=0,i=0,_=0,E=0,n=0,s=0;A:do{if(C){_=0,n=0,o=0,c=0;I:for(;;){for(;!(255&((E=(65526+(201+(223&(i=0|t[g+o>>0]))&255)^65520+(201+(223&i)&255))>>>8)|(65526+(48^i)|0)>>>8)|0);){if(!(0!=(0|r)&c<<24>>24==0)){i=0;break I}if(!(0|zC(r,i))){c=_,s=17;break A}if(!((o=o+1|0)>>>0<C>>>0)){c=_,s=17;break A}c=0}if(i=E&201+(223&i)|(65526+(48^i)|0)>>>8&(48^i),_>>>0>=I>>>0){s=9;break}if(c<<24>>24?(B[A+_>>0]=i|255&n,_=_+1|0,i=n):i=i<<4&255,c=~c,!((o=o+1|0)>>>0<C>>>0)){i=0;break}n=i}if(9==(0|s)&&(a[8886]=68,i=-1),c<<24>>24){a[8886]=28,i=0,c=o+-1|0,o=-1;break}if(i){i=0,c=o,o=-1;break}c=_,s=17;break}c=0,o=0,s=17}while(0);return 17==(0|s)&&(i=c,c=o,o=0),e?a[e>>2]=g+c:(0|c)!=(0|C)&&(a[8886]=28,o=-1),0|Q&&(a[Q>>2]=i),0|o},_sodium_init:function(){var A=0;return 0|a[8884]?A=1:(function(){return A=h,I=h=h+63&-64,h=h+16|0,ra(I),0|a[I>>2]&&ra(I),void(h=A);var A,I}(),Ya(),function(){var A=0;(0|(A=0|y(30)))>0?a[8885]=A:A=0|a[8885],A>>>0<16?st():vB(35504,16)}(),a[8884]=1,A=0),0|A},_sodium_library_minimal:nt,_sodium_library_version_major:function(){return 10},_sodium_library_version_minor:It,_sodium_pad:function(A,I,g,C,r){A|=0,I|=0,g|=0,r|=0;var Q,e,o=0,c=0;if(e=h,Q=h=h+63&-64,h=h+16|0,C|=0)if((c=C+-1-(o=C+-1&C?(g>>>0)%(C>>>0)|0:C+-1&g)|0)>>>0>=~g>>>0&&st(),(c+g|0)>>>0<r>>>0){0|A&&(a[A>>2]=c+g+1),B[Q>>0]=0,o=0;do{A=((o^c)-1|0)>>>24,B[(r=I+(c+g)+(0-o)|0)>>0]=128&A|B[Q>>0]&B[r>>0]&255,B[Q>>0]=0|A|t[Q>>0],o=o+1|0}while((0|o)!=(0|C));o=0}else o=-1;else o=-1;return h=e,0|o},_sodium_unpad:function(A,I,g,B){A|=0,I|=0,g|=0,B|=0;var C,r,Q=0,e=0,o=0,c=0,i=0;if(r=h,C=h=h+63&-64,h=h+16|0,a[C>>2]=0,(B+-1|0)>>>0<g>>>0){for(Q=0,o=0,c=0;Q&=255,e=0|t[I+(g+-1)+(0-o)>>0],i=(511+(0|a[C>>2])&Q+511&511+(128^e))>>>8&1,a[C>>2]=o&0-i|a[C>>2],c=i|255&c,(0|(o=o+1|0))!=(0|B);)Q|=e;a[A>>2]=g+-1-(0|a[C>>2]),Q=c+-1|0}else Q=-1;return h=r,0|Q},_sodium_version_string:function(){return 35354},establishStackSpace:function(A,I){h=A|=0},stackAlloc:function(A){var I;return I=h,h=15+(h=h+(A|=0)|0)&-16,0|I},stackRestore:function(A){h=A|=0},stackSave:function(){return 0|h}}}({Math:Math,Int8Array:Int8Array,Int16Array:Int16Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array},{a:X,b:function(A){h=A},c:function(){return h},d:function(A,I,g,B){X("Assertion failed: "+d(A)+", at: "+[I?d(I):"unknown filename",g,B?d(B):"unknown function"])},e:BA,f:function(){X()},g:function(A){return Z[A]()},h:IA,i:function(A,I,g){u.set(u.subarray(I,I+g),A)},j:function(A){var I=IA();if(A>2130706432)return!1;for(var g=Math.max(I,16777216);g<A;)g=g<=536870912?H(2*g,16777216):Math.min(H((3*g+2147483648)/4,16777216),2130706432);return!!gA(g)},k:function(A){switch(A){case 30:return 16384;case 85:return 130048;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"==typeof navigator&&navigator.hardwareConcurrency||1}return BA(28),-1},l:function(A){X("OOM")},m:O,n:$,o:gA,p:AA,q:function(){var A=AA();return I.extraStackTrace&&(A+="\n"+I.extraStackTrace()),$(A)},r:36240},w),cA=(I.___errno_location=oA.___errno_location,I.___muldi3=oA.___muldi3,I.___udivdi3=oA.___udivdi3,I.___uremdi3=oA.___uremdi3,I._bitshift64Ashr=oA._bitshift64Ashr,I._bitshift64Lshr=oA._bitshift64Lshr,I._bitshift64Shl=oA._bitshift64Shl,I._crypto_aead_chacha20poly1305_abytes=oA._crypto_aead_chacha20poly1305_abytes,I._crypto_aead_chacha20poly1305_decrypt=oA._crypto_aead_chacha20poly1305_decrypt,I._crypto_aead_chacha20poly1305_decrypt_detached=oA._crypto_aead_chacha20poly1305_decrypt_detached,I._crypto_aead_chacha20poly1305_encrypt=oA._crypto_aead_chacha20poly1305_encrypt,I._crypto_aead_chacha20poly1305_encrypt_detached=oA._crypto_aead_chacha20poly1305_encrypt_detached,I._crypto_aead_chacha20poly1305_ietf_abytes=oA._crypto_aead_chacha20poly1305_ietf_abytes,I._crypto_aead_chacha20poly1305_ietf_decrypt=oA._crypto_aead_chacha20poly1305_ietf_decrypt,I._crypto_aead_chacha20poly1305_ietf_decrypt_detached=oA._crypto_aead_chacha20poly1305_ietf_decrypt_detached,I._crypto_aead_chacha20poly1305_ietf_encrypt=oA._crypto_aead_chacha20poly1305_ietf_encrypt,I._crypto_aead_chacha20poly1305_ietf_encrypt_detached=oA._crypto_aead_chacha20poly1305_ietf_encrypt_detached,I._crypto_aead_chacha20poly1305_ietf_keybytes=oA._crypto_aead_chacha20poly1305_ietf_keybytes,I._crypto_aead_chacha20poly1305_ietf_keygen=oA._crypto_aead_chacha20poly1305_ietf_keygen,I._crypto_aead_chacha20poly1305_ietf_messagebytes_max=oA._crypto_aead_chacha20poly1305_ietf_messagebytes_max,I._crypto_aead_chacha20poly1305_ietf_npubbytes=oA._crypto_aead_chacha20poly1305_ietf_npubbytes,I._crypto_aead_chacha20poly1305_ietf_nsecbytes=oA._crypto_aead_chacha20poly1305_ietf_nsecbytes,I._crypto_aead_chacha20poly1305_keybytes=oA._crypto_aead_chacha20poly1305_keybytes,I._crypto_aead_chacha20poly1305_keygen=oA._crypto_aead_chacha20poly1305_keygen,I._crypto_aead_chacha20poly1305_messagebytes_max=oA._crypto_aead_chacha20poly1305_messagebytes_max,I._crypto_aead_chacha20poly1305_npubbytes=oA._crypto_aead_chacha20poly1305_npubbytes,I._crypto_aead_chacha20poly1305_nsecbytes=oA._crypto_aead_chacha20poly1305_nsecbytes,I._crypto_aead_xchacha20poly1305_ietf_abytes=oA._crypto_aead_xchacha20poly1305_ietf_abytes,I._crypto_aead_xchacha20poly1305_ietf_decrypt=oA._crypto_aead_xchacha20poly1305_ietf_decrypt,I._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=oA._crypto_aead_xchacha20poly1305_ietf_decrypt_detached,I._crypto_aead_xchacha20poly1305_ietf_encrypt=oA._crypto_aead_xchacha20poly1305_ietf_encrypt,I._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=oA._crypto_aead_xchacha20poly1305_ietf_encrypt_detached,I._crypto_aead_xchacha20poly1305_ietf_keybytes=oA._crypto_aead_xchacha20poly1305_ietf_keybytes,I._crypto_aead_xchacha20poly1305_ietf_keygen=oA._crypto_aead_xchacha20poly1305_ietf_keygen,I._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=oA._crypto_aead_xchacha20poly1305_ietf_messagebytes_max,I._crypto_aead_xchacha20poly1305_ietf_npubbytes=oA._crypto_aead_xchacha20poly1305_ietf_npubbytes,I._crypto_aead_xchacha20poly1305_ietf_nsecbytes=oA._crypto_aead_xchacha20poly1305_ietf_nsecbytes,I._crypto_auth=oA._crypto_auth,I._crypto_auth_bytes=oA._crypto_auth_bytes,I._crypto_auth_hmacsha256=oA._crypto_auth_hmacsha256,I._crypto_auth_hmacsha256_bytes=oA._crypto_auth_hmacsha256_bytes,I._crypto_auth_hmacsha256_final=oA._crypto_auth_hmacsha256_final,I._crypto_auth_hmacsha256_init=oA._crypto_auth_hmacsha256_init,I._crypto_auth_hmacsha256_keybytes=oA._crypto_auth_hmacsha256_keybytes,I._crypto_auth_hmacsha256_keygen=oA._crypto_auth_hmacsha256_keygen,I._crypto_auth_hmacsha256_statebytes=oA._crypto_auth_hmacsha256_statebytes,I._crypto_auth_hmacsha256_update=oA._crypto_auth_hmacsha256_update,I._crypto_auth_hmacsha256_verify=oA._crypto_auth_hmacsha256_verify,I._crypto_auth_hmacsha512=oA._crypto_auth_hmacsha512,I._crypto_auth_hmacsha512256=oA._crypto_auth_hmacsha512256,I._crypto_auth_hmacsha512256_bytes=oA._crypto_auth_hmacsha512256_bytes,I._crypto_auth_hmacsha512256_final=oA._crypto_auth_hmacsha512256_final,I._crypto_auth_hmacsha512256_init=oA._crypto_auth_hmacsha512256_init,I._crypto_auth_hmacsha512256_keybytes=oA._crypto_auth_hmacsha512256_keybytes,I._crypto_auth_hmacsha512256_keygen=oA._crypto_auth_hmacsha512256_keygen,I._crypto_auth_hmacsha512256_statebytes=oA._crypto_auth_hmacsha512256_statebytes,I._crypto_auth_hmacsha512256_update=oA._crypto_auth_hmacsha512256_update,I._crypto_auth_hmacsha512256_verify=oA._crypto_auth_hmacsha512256_verify,I._crypto_auth_hmacsha512_bytes=oA._crypto_auth_hmacsha512_bytes,I._crypto_auth_hmacsha512_final=oA._crypto_auth_hmacsha512_final,I._crypto_auth_hmacsha512_init=oA._crypto_auth_hmacsha512_init,I._crypto_auth_hmacsha512_keybytes=oA._crypto_auth_hmacsha512_keybytes,I._crypto_auth_hmacsha512_keygen=oA._crypto_auth_hmacsha512_keygen,I._crypto_auth_hmacsha512_statebytes=oA._crypto_auth_hmacsha512_statebytes,I._crypto_auth_hmacsha512_update=oA._crypto_auth_hmacsha512_update,I._crypto_auth_hmacsha512_verify=oA._crypto_auth_hmacsha512_verify,I._crypto_auth_keybytes=oA._crypto_auth_keybytes,I._crypto_auth_keygen=oA._crypto_auth_keygen,I._crypto_auth_primitive=oA._crypto_auth_primitive,I._crypto_auth_verify=oA._crypto_auth_verify,I._crypto_box=oA._crypto_box,I._crypto_box_afternm=oA._crypto_box_afternm,I._crypto_box_beforenm=oA._crypto_box_beforenm,I._crypto_box_beforenmbytes=oA._crypto_box_beforenmbytes,I._crypto_box_boxzerobytes=oA._crypto_box_boxzerobytes,I._crypto_box_curve25519xchacha20poly1305_beforenm=oA._crypto_box_curve25519xchacha20poly1305_beforenm,I._crypto_box_curve25519xchacha20poly1305_beforenmbytes=oA._crypto_box_curve25519xchacha20poly1305_beforenmbytes,I._crypto_box_curve25519xchacha20poly1305_detached=oA._crypto_box_curve25519xchacha20poly1305_detached,I._crypto_box_curve25519xchacha20poly1305_detached_afternm=oA._crypto_box_curve25519xchacha20poly1305_detached_afternm,I._crypto_box_curve25519xchacha20poly1305_easy=oA._crypto_box_curve25519xchacha20poly1305_easy,I._crypto_box_curve25519xchacha20poly1305_easy_afternm=oA._crypto_box_curve25519xchacha20poly1305_easy_afternm,I._crypto_box_curve25519xchacha20poly1305_keypair=oA._crypto_box_curve25519xchacha20poly1305_keypair,I._crypto_box_curve25519xchacha20poly1305_macbytes=oA._crypto_box_curve25519xchacha20poly1305_macbytes,I._crypto_box_curve25519xchacha20poly1305_messagebytes_max=oA._crypto_box_curve25519xchacha20poly1305_messagebytes_max,I._crypto_box_curve25519xchacha20poly1305_noncebytes=oA._crypto_box_curve25519xchacha20poly1305_noncebytes,I._crypto_box_curve25519xchacha20poly1305_open_detached=oA._crypto_box_curve25519xchacha20poly1305_open_detached,I._crypto_box_curve25519xchacha20poly1305_open_detached_afternm=oA._crypto_box_curve25519xchacha20poly1305_open_detached_afternm,I._crypto_box_curve25519xchacha20poly1305_open_easy=oA._crypto_box_curve25519xchacha20poly1305_open_easy,I._crypto_box_curve25519xchacha20poly1305_open_easy_afternm=oA._crypto_box_curve25519xchacha20poly1305_open_easy_afternm,I._crypto_box_curve25519xchacha20poly1305_publickeybytes=oA._crypto_box_curve25519xchacha20poly1305_publickeybytes,I._crypto_box_curve25519xchacha20poly1305_seal=oA._crypto_box_curve25519xchacha20poly1305_seal,I._crypto_box_curve25519xchacha20poly1305_seal_open=oA._crypto_box_curve25519xchacha20poly1305_seal_open,I._crypto_box_curve25519xchacha20poly1305_sealbytes=oA._crypto_box_curve25519xchacha20poly1305_sealbytes,I._crypto_box_curve25519xchacha20poly1305_secretkeybytes=oA._crypto_box_curve25519xchacha20poly1305_secretkeybytes,I._crypto_box_curve25519xchacha20poly1305_seed_keypair=oA._crypto_box_curve25519xchacha20poly1305_seed_keypair,I._crypto_box_curve25519xchacha20poly1305_seedbytes=oA._crypto_box_curve25519xchacha20poly1305_seedbytes,I._crypto_box_curve25519xsalsa20poly1305=oA._crypto_box_curve25519xsalsa20poly1305,I._crypto_box_curve25519xsalsa20poly1305_afternm=oA._crypto_box_curve25519xsalsa20poly1305_afternm,I._crypto_box_curve25519xsalsa20poly1305_beforenm=oA._crypto_box_curve25519xsalsa20poly1305_beforenm,I._crypto_box_curve25519xsalsa20poly1305_beforenmbytes=oA._crypto_box_curve25519xsalsa20poly1305_beforenmbytes,I._crypto_box_curve25519xsalsa20poly1305_boxzerobytes=oA._crypto_box_curve25519xsalsa20poly1305_boxzerobytes,I._crypto_box_curve25519xsalsa20poly1305_keypair=oA._crypto_box_curve25519xsalsa20poly1305_keypair,I._crypto_box_curve25519xsalsa20poly1305_macbytes=oA._crypto_box_curve25519xsalsa20poly1305_macbytes,I._crypto_box_curve25519xsalsa20poly1305_messagebytes_max=oA._crypto_box_curve25519xsalsa20poly1305_messagebytes_max,I._crypto_box_curve25519xsalsa20poly1305_noncebytes=oA._crypto_box_curve25519xsalsa20poly1305_noncebytes,I._crypto_box_curve25519xsalsa20poly1305_open=oA._crypto_box_curve25519xsalsa20poly1305_open,I._crypto_box_curve25519xsalsa20poly1305_open_afternm=oA._crypto_box_curve25519xsalsa20poly1305_open_afternm,I._crypto_box_curve25519xsalsa20poly1305_publickeybytes=oA._crypto_box_curve25519xsalsa20poly1305_publickeybytes,I._crypto_box_curve25519xsalsa20poly1305_secretkeybytes=oA._crypto_box_curve25519xsalsa20poly1305_secretkeybytes,I._crypto_box_curve25519xsalsa20poly1305_seed_keypair=oA._crypto_box_curve25519xsalsa20poly1305_seed_keypair,I._crypto_box_curve25519xsalsa20poly1305_seedbytes=oA._crypto_box_curve25519xsalsa20poly1305_seedbytes,I._crypto_box_curve25519xsalsa20poly1305_zerobytes=oA._crypto_box_curve25519xsalsa20poly1305_zerobytes,I._crypto_box_detached=oA._crypto_box_detached,I._crypto_box_detached_afternm=oA._crypto_box_detached_afternm,I._crypto_box_easy=oA._crypto_box_easy,I._crypto_box_easy_afternm=oA._crypto_box_easy_afternm,I._crypto_box_keypair=oA._crypto_box_keypair,I._crypto_box_macbytes=oA._crypto_box_macbytes,I._crypto_box_messagebytes_max=oA._crypto_box_messagebytes_max,I._crypto_box_noncebytes=oA._crypto_box_noncebytes,I._crypto_box_open=oA._crypto_box_open,I._crypto_box_open_afternm=oA._crypto_box_open_afternm,I._crypto_box_open_detached=oA._crypto_box_open_detached,I._crypto_box_open_detached_afternm=oA._crypto_box_open_detached_afternm,I._crypto_box_open_easy=oA._crypto_box_open_easy,I._crypto_box_open_easy_afternm=oA._crypto_box_open_easy_afternm,I._crypto_box_primitive=oA._crypto_box_primitive,I._crypto_box_publickeybytes=oA._crypto_box_publickeybytes,I._crypto_box_seal=oA._crypto_box_seal,I._crypto_box_seal_open=oA._crypto_box_seal_open,I._crypto_box_sealbytes=oA._crypto_box_sealbytes,I._crypto_box_secretkeybytes=oA._crypto_box_secretkeybytes,I._crypto_box_seed_keypair=oA._crypto_box_seed_keypair,I._crypto_box_seedbytes=oA._crypto_box_seedbytes,I._crypto_box_zerobytes=oA._crypto_box_zerobytes,I._crypto_core_ed25519_add=oA._crypto_core_ed25519_add,I._crypto_core_ed25519_bytes=oA._crypto_core_ed25519_bytes,I._crypto_core_ed25519_from_hash=oA._crypto_core_ed25519_from_hash,I._crypto_core_ed25519_from_uniform=oA._crypto_core_ed25519_from_uniform,I._crypto_core_ed25519_hashbytes=oA._crypto_core_ed25519_hashbytes,I._crypto_core_ed25519_is_valid_point=oA._crypto_core_ed25519_is_valid_point,I._crypto_core_ed25519_nonreducedscalarbytes=oA._crypto_core_ed25519_nonreducedscalarbytes,I._crypto_core_ed25519_random=oA._crypto_core_ed25519_random,I._crypto_core_ed25519_scalar_add=oA._crypto_core_ed25519_scalar_add,I._crypto_core_ed25519_scalar_complement=oA._crypto_core_ed25519_scalar_complement,I._crypto_core_ed25519_scalar_invert=oA._crypto_core_ed25519_scalar_invert,I._crypto_core_ed25519_scalar_mul=oA._crypto_core_ed25519_scalar_mul,I._crypto_core_ed25519_scalar_negate=oA._crypto_core_ed25519_scalar_negate,I._crypto_core_ed25519_scalar_random=oA._crypto_core_ed25519_scalar_random,I._crypto_core_ed25519_scalar_reduce=oA._crypto_core_ed25519_scalar_reduce,I._crypto_core_ed25519_scalar_sub=oA._crypto_core_ed25519_scalar_sub,I._crypto_core_ed25519_scalarbytes=oA._crypto_core_ed25519_scalarbytes,I._crypto_core_ed25519_sub=oA._crypto_core_ed25519_sub,I._crypto_core_ed25519_uniformbytes=oA._crypto_core_ed25519_uniformbytes,I._crypto_core_hchacha20=oA._crypto_core_hchacha20,I._crypto_core_hchacha20_constbytes=oA._crypto_core_hchacha20_constbytes,I._crypto_core_hchacha20_inputbytes=oA._crypto_core_hchacha20_inputbytes,I._crypto_core_hchacha20_keybytes=oA._crypto_core_hchacha20_keybytes,I._crypto_core_hchacha20_outputbytes=oA._crypto_core_hchacha20_outputbytes,I._crypto_core_hsalsa20=oA._crypto_core_hsalsa20,I._crypto_core_hsalsa20_constbytes=oA._crypto_core_hsalsa20_constbytes,I._crypto_core_hsalsa20_inputbytes=oA._crypto_core_hsalsa20_inputbytes,I._crypto_core_hsalsa20_keybytes=oA._crypto_core_hsalsa20_keybytes,I._crypto_core_hsalsa20_outputbytes=oA._crypto_core_hsalsa20_outputbytes,I._crypto_core_ristretto255_add=oA._crypto_core_ristretto255_add,I._crypto_core_ristretto255_bytes=oA._crypto_core_ristretto255_bytes,I._crypto_core_ristretto255_from_hash=oA._crypto_core_ristretto255_from_hash,I._crypto_core_ristretto255_hashbytes=oA._crypto_core_ristretto255_hashbytes,I._crypto_core_ristretto255_is_valid_point=oA._crypto_core_ristretto255_is_valid_point,I._crypto_core_ristretto255_nonreducedscalarbytes=oA._crypto_core_ristretto255_nonreducedscalarbytes,I._crypto_core_ristretto255_random=oA._crypto_core_ristretto255_random,I._crypto_core_ristretto255_scalar_add=oA._crypto_core_ristretto255_scalar_add,I._crypto_core_ristretto255_scalar_complement=oA._crypto_core_ristretto255_scalar_complement,I._crypto_core_ristretto255_scalar_invert=oA._crypto_core_ristretto255_scalar_invert,I._crypto_core_ristretto255_scalar_mul=oA._crypto_core_ristretto255_scalar_mul,I._crypto_core_ristretto255_scalar_negate=oA._crypto_core_ristretto255_scalar_negate,I._crypto_core_ristretto255_scalar_random=oA._crypto_core_ristretto255_scalar_random,I._crypto_core_ristretto255_scalar_reduce=oA._crypto_core_ristretto255_scalar_reduce,I._crypto_core_ristretto255_scalar_sub=oA._crypto_core_ristretto255_scalar_sub,I._crypto_core_ristretto255_scalarbytes=oA._crypto_core_ristretto255_scalarbytes,I._crypto_core_ristretto255_sub=oA._crypto_core_ristretto255_sub,I._crypto_core_salsa20=oA._crypto_core_salsa20,I._crypto_core_salsa2012=oA._crypto_core_salsa2012,I._crypto_core_salsa2012_constbytes=oA._crypto_core_salsa2012_constbytes,I._crypto_core_salsa2012_inputbytes=oA._crypto_core_salsa2012_inputbytes,I._crypto_core_salsa2012_keybytes=oA._crypto_core_salsa2012_keybytes,I._crypto_core_salsa2012_outputbytes=oA._crypto_core_salsa2012_outputbytes,I._crypto_core_salsa208=oA._crypto_core_salsa208,I._crypto_core_salsa208_constbytes=oA._crypto_core_salsa208_constbytes,I._crypto_core_salsa208_inputbytes=oA._crypto_core_salsa208_inputbytes,I._crypto_core_salsa208_keybytes=oA._crypto_core_salsa208_keybytes,I._crypto_core_salsa208_outputbytes=oA._crypto_core_salsa208_outputbytes,I._crypto_core_salsa20_constbytes=oA._crypto_core_salsa20_constbytes,I._crypto_core_salsa20_inputbytes=oA._crypto_core_salsa20_inputbytes,I._crypto_core_salsa20_keybytes=oA._crypto_core_salsa20_keybytes,I._crypto_core_salsa20_outputbytes=oA._crypto_core_salsa20_outputbytes,I._crypto_generichash=oA._crypto_generichash,I._crypto_generichash_blake2b=oA._crypto_generichash_blake2b,I._crypto_generichash_blake2b_bytes=oA._crypto_generichash_blake2b_bytes,I._crypto_generichash_blake2b_bytes_max=oA._crypto_generichash_blake2b_bytes_max,I._crypto_generichash_blake2b_bytes_min=oA._crypto_generichash_blake2b_bytes_min,I._crypto_generichash_blake2b_final=oA._crypto_generichash_blake2b_final,I._crypto_generichash_blake2b_init=oA._crypto_generichash_blake2b_init,I._crypto_generichash_blake2b_init_salt_personal=oA._crypto_generichash_blake2b_init_salt_personal,I._crypto_generichash_blake2b_keybytes=oA._crypto_generichash_blake2b_keybytes,I._crypto_generichash_blake2b_keybytes_max=oA._crypto_generichash_blake2b_keybytes_max,I._crypto_generichash_blake2b_keybytes_min=oA._crypto_generichash_blake2b_keybytes_min,I._crypto_generichash_blake2b_keygen=oA._crypto_generichash_blake2b_keygen,I._crypto_generichash_blake2b_personalbytes=oA._crypto_generichash_blake2b_personalbytes,I._crypto_generichash_blake2b_salt_personal=oA._crypto_generichash_blake2b_salt_personal,I._crypto_generichash_blake2b_saltbytes=oA._crypto_generichash_blake2b_saltbytes,I._crypto_generichash_blake2b_statebytes=oA._crypto_generichash_blake2b_statebytes,I._crypto_generichash_blake2b_update=oA._crypto_generichash_blake2b_update,I._crypto_generichash_bytes=oA._crypto_generichash_bytes,I._crypto_generichash_bytes_max=oA._crypto_generichash_bytes_max,I._crypto_generichash_bytes_min=oA._crypto_generichash_bytes_min,I._crypto_generichash_final=oA._crypto_generichash_final,I._crypto_generichash_init=oA._crypto_generichash_init,I._crypto_generichash_keybytes=oA._crypto_generichash_keybytes,I._crypto_generichash_keybytes_max=oA._crypto_generichash_keybytes_max,I._crypto_generichash_keybytes_min=oA._crypto_generichash_keybytes_min,I._crypto_generichash_keygen=oA._crypto_generichash_keygen,I._crypto_generichash_primitive=oA._crypto_generichash_primitive,I._crypto_generichash_statebytes=oA._crypto_generichash_statebytes,I._crypto_generichash_update=oA._crypto_generichash_update,I._crypto_hash=oA._crypto_hash,I._crypto_hash_bytes=oA._crypto_hash_bytes,I._crypto_hash_primitive=oA._crypto_hash_primitive,I._crypto_hash_sha256=oA._crypto_hash_sha256,I._crypto_hash_sha256_bytes=oA._crypto_hash_sha256_bytes,I._crypto_hash_sha256_final=oA._crypto_hash_sha256_final,I._crypto_hash_sha256_init=oA._crypto_hash_sha256_init,I._crypto_hash_sha256_statebytes=oA._crypto_hash_sha256_statebytes,I._crypto_hash_sha256_update=oA._crypto_hash_sha256_update,I._crypto_hash_sha512=oA._crypto_hash_sha512,I._crypto_hash_sha512_bytes=oA._crypto_hash_sha512_bytes,I._crypto_hash_sha512_final=oA._crypto_hash_sha512_final,I._crypto_hash_sha512_init=oA._crypto_hash_sha512_init,I._crypto_hash_sha512_statebytes=oA._crypto_hash_sha512_statebytes,I._crypto_hash_sha512_update=oA._crypto_hash_sha512_update,I._crypto_kdf_blake2b_bytes_max=oA._crypto_kdf_blake2b_bytes_max,I._crypto_kdf_blake2b_bytes_min=oA._crypto_kdf_blake2b_bytes_min,I._crypto_kdf_blake2b_contextbytes=oA._crypto_kdf_blake2b_contextbytes,I._crypto_kdf_blake2b_derive_from_key=oA._crypto_kdf_blake2b_derive_from_key,I._crypto_kdf_blake2b_keybytes=oA._crypto_kdf_blake2b_keybytes,I._crypto_kdf_bytes_max=oA._crypto_kdf_bytes_max,I._crypto_kdf_bytes_min=oA._crypto_kdf_bytes_min,I._crypto_kdf_contextbytes=oA._crypto_kdf_contextbytes,I._crypto_kdf_derive_from_key=oA._crypto_kdf_derive_from_key,I._crypto_kdf_keybytes=oA._crypto_kdf_keybytes,I._crypto_kdf_keygen=oA._crypto_kdf_keygen,I._crypto_kdf_primitive=oA._crypto_kdf_primitive,I._crypto_kx_client_session_keys=oA._crypto_kx_client_session_keys,I._crypto_kx_keypair=oA._crypto_kx_keypair,I._crypto_kx_primitive=oA._crypto_kx_primitive,I._crypto_kx_publickeybytes=oA._crypto_kx_publickeybytes,I._crypto_kx_secretkeybytes=oA._crypto_kx_secretkeybytes,I._crypto_kx_seed_keypair=oA._crypto_kx_seed_keypair,I._crypto_kx_seedbytes=oA._crypto_kx_seedbytes,I._crypto_kx_server_session_keys=oA._crypto_kx_server_session_keys,I._crypto_kx_sessionkeybytes=oA._crypto_kx_sessionkeybytes,I._crypto_onetimeauth=oA._crypto_onetimeauth,I._crypto_onetimeauth_bytes=oA._crypto_onetimeauth_bytes,I._crypto_onetimeauth_final=oA._crypto_onetimeauth_final,I._crypto_onetimeauth_init=oA._crypto_onetimeauth_init,I._crypto_onetimeauth_keybytes=oA._crypto_onetimeauth_keybytes,I._crypto_onetimeauth_keygen=oA._crypto_onetimeauth_keygen,I._crypto_onetimeauth_poly1305=oA._crypto_onetimeauth_poly1305,I._crypto_onetimeauth_poly1305_bytes=oA._crypto_onetimeauth_poly1305_bytes,I._crypto_onetimeauth_poly1305_final=oA._crypto_onetimeauth_poly1305_final,I._crypto_onetimeauth_poly1305_init=oA._crypto_onetimeauth_poly1305_init,I._crypto_onetimeauth_poly1305_keybytes=oA._crypto_onetimeauth_poly1305_keybytes,I._crypto_onetimeauth_poly1305_keygen=oA._crypto_onetimeauth_poly1305_keygen,I._crypto_onetimeauth_poly1305_statebytes=oA._crypto_onetimeauth_poly1305_statebytes,I._crypto_onetimeauth_poly1305_update=oA._crypto_onetimeauth_poly1305_update,I._crypto_onetimeauth_poly1305_verify=oA._crypto_onetimeauth_poly1305_verify,I._crypto_onetimeauth_primitive=oA._crypto_onetimeauth_primitive,I._crypto_onetimeauth_statebytes=oA._crypto_onetimeauth_statebytes,I._crypto_onetimeauth_update=oA._crypto_onetimeauth_update,I._crypto_onetimeauth_verify=oA._crypto_onetimeauth_verify,I._crypto_pwhash=oA._crypto_pwhash,I._crypto_pwhash_alg_argon2i13=oA._crypto_pwhash_alg_argon2i13,I._crypto_pwhash_alg_argon2id13=oA._crypto_pwhash_alg_argon2id13,I._crypto_pwhash_alg_default=oA._crypto_pwhash_alg_default,I._crypto_pwhash_argon2i=oA._crypto_pwhash_argon2i,I._crypto_pwhash_argon2i_alg_argon2i13=oA._crypto_pwhash_argon2i_alg_argon2i13,I._crypto_pwhash_argon2i_bytes_max=oA._crypto_pwhash_argon2i_bytes_max,I._crypto_pwhash_argon2i_bytes_min=oA._crypto_pwhash_argon2i_bytes_min,I._crypto_pwhash_argon2i_memlimit_interactive=oA._crypto_pwhash_argon2i_memlimit_interactive,I._crypto_pwhash_argon2i_memlimit_max=oA._crypto_pwhash_argon2i_memlimit_max,I._crypto_pwhash_argon2i_memlimit_min=oA._crypto_pwhash_argon2i_memlimit_min,I._crypto_pwhash_argon2i_memlimit_moderate=oA._crypto_pwhash_argon2i_memlimit_moderate,I._crypto_pwhash_argon2i_memlimit_sensitive=oA._crypto_pwhash_argon2i_memlimit_sensitive,I._crypto_pwhash_argon2i_opslimit_interactive=oA._crypto_pwhash_argon2i_opslimit_interactive,I._crypto_pwhash_argon2i_opslimit_max=oA._crypto_pwhash_argon2i_opslimit_max,I._crypto_pwhash_argon2i_opslimit_min=oA._crypto_pwhash_argon2i_opslimit_min,I._crypto_pwhash_argon2i_opslimit_moderate=oA._crypto_pwhash_argon2i_opslimit_moderate,I._crypto_pwhash_argon2i_opslimit_sensitive=oA._crypto_pwhash_argon2i_opslimit_sensitive,I._crypto_pwhash_argon2i_passwd_max=oA._crypto_pwhash_argon2i_passwd_max,I._crypto_pwhash_argon2i_passwd_min=oA._crypto_pwhash_argon2i_passwd_min,I._crypto_pwhash_argon2i_saltbytes=oA._crypto_pwhash_argon2i_saltbytes,I._crypto_pwhash_argon2i_str=oA._crypto_pwhash_argon2i_str,I._crypto_pwhash_argon2i_str_needs_rehash=oA._crypto_pwhash_argon2i_str_needs_rehash,I._crypto_pwhash_argon2i_str_verify=oA._crypto_pwhash_argon2i_str_verify,I._crypto_pwhash_argon2i_strbytes=oA._crypto_pwhash_argon2i_strbytes,I._crypto_pwhash_argon2i_strprefix=oA._crypto_pwhash_argon2i_strprefix,I._crypto_pwhash_argon2id=oA._crypto_pwhash_argon2id,I._crypto_pwhash_argon2id_alg_argon2id13=oA._crypto_pwhash_argon2id_alg_argon2id13,I._crypto_pwhash_argon2id_bytes_max=oA._crypto_pwhash_argon2id_bytes_max,I._crypto_pwhash_argon2id_bytes_min=oA._crypto_pwhash_argon2id_bytes_min,I._crypto_pwhash_argon2id_memlimit_interactive=oA._crypto_pwhash_argon2id_memlimit_interactive,I._crypto_pwhash_argon2id_memlimit_max=oA._crypto_pwhash_argon2id_memlimit_max,I._crypto_pwhash_argon2id_memlimit_min=oA._crypto_pwhash_argon2id_memlimit_min,I._crypto_pwhash_argon2id_memlimit_moderate=oA._crypto_pwhash_argon2id_memlimit_moderate,I._crypto_pwhash_argon2id_memlimit_sensitive=oA._crypto_pwhash_argon2id_memlimit_sensitive,I._crypto_pwhash_argon2id_opslimit_interactive=oA._crypto_pwhash_argon2id_opslimit_interactive,I._crypto_pwhash_argon2id_opslimit_max=oA._crypto_pwhash_argon2id_opslimit_max,I._crypto_pwhash_argon2id_opslimit_min=oA._crypto_pwhash_argon2id_opslimit_min,I._crypto_pwhash_argon2id_opslimit_moderate=oA._crypto_pwhash_argon2id_opslimit_moderate,I._crypto_pwhash_argon2id_opslimit_sensitive=oA._crypto_pwhash_argon2id_opslimit_sensitive,I._crypto_pwhash_argon2id_passwd_max=oA._crypto_pwhash_argon2id_passwd_max,I._crypto_pwhash_argon2id_passwd_min=oA._crypto_pwhash_argon2id_passwd_min,I._crypto_pwhash_argon2id_saltbytes=oA._crypto_pwhash_argon2id_saltbytes,I._crypto_pwhash_argon2id_str=oA._crypto_pwhash_argon2id_str,I._crypto_pwhash_argon2id_str_needs_rehash=oA._crypto_pwhash_argon2id_str_needs_rehash,I._crypto_pwhash_argon2id_str_verify=oA._crypto_pwhash_argon2id_str_verify,I._crypto_pwhash_argon2id_strbytes=oA._crypto_pwhash_argon2id_strbytes,I._crypto_pwhash_argon2id_strprefix=oA._crypto_pwhash_argon2id_strprefix,I._crypto_pwhash_bytes_max=oA._crypto_pwhash_bytes_max,I._crypto_pwhash_bytes_min=oA._crypto_pwhash_bytes_min,I._crypto_pwhash_memlimit_interactive=oA._crypto_pwhash_memlimit_interactive,I._crypto_pwhash_memlimit_max=oA._crypto_pwhash_memlimit_max,I._crypto_pwhash_memlimit_min=oA._crypto_pwhash_memlimit_min,I._crypto_pwhash_memlimit_moderate=oA._crypto_pwhash_memlimit_moderate,I._crypto_pwhash_memlimit_sensitive=oA._crypto_pwhash_memlimit_sensitive,I._crypto_pwhash_opslimit_interactive=oA._crypto_pwhash_opslimit_interactive,I._crypto_pwhash_opslimit_max=oA._crypto_pwhash_opslimit_max,I._crypto_pwhash_opslimit_min=oA._crypto_pwhash_opslimit_min,I._crypto_pwhash_opslimit_moderate=oA._crypto_pwhash_opslimit_moderate,I._crypto_pwhash_opslimit_sensitive=oA._crypto_pwhash_opslimit_sensitive,I._crypto_pwhash_passwd_max=oA._crypto_pwhash_passwd_max,I._crypto_pwhash_passwd_min=oA._crypto_pwhash_passwd_min,I._crypto_pwhash_primitive=oA._crypto_pwhash_primitive,I._crypto_pwhash_saltbytes=oA._crypto_pwhash_saltbytes,I._crypto_pwhash_scryptsalsa208sha256=oA._crypto_pwhash_scryptsalsa208sha256,I._crypto_pwhash_scryptsalsa208sha256_bytes_max=oA._crypto_pwhash_scryptsalsa208sha256_bytes_max,I._crypto_pwhash_scryptsalsa208sha256_bytes_min=oA._crypto_pwhash_scryptsalsa208sha256_bytes_min,I._crypto_pwhash_scryptsalsa208sha256_ll=oA._crypto_pwhash_scryptsalsa208sha256_ll,I._crypto_pwhash_scryptsalsa208sha256_memlimit_interactive=oA._crypto_pwhash_scryptsalsa208sha256_memlimit_interactive,I._crypto_pwhash_scryptsalsa208sha256_memlimit_max=oA._crypto_pwhash_scryptsalsa208sha256_memlimit_max,I._crypto_pwhash_scryptsalsa208sha256_memlimit_min=oA._crypto_pwhash_scryptsalsa208sha256_memlimit_min,I._crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive=oA._crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive,I._crypto_pwhash_scryptsalsa208sha256_opslimit_interactive=oA._crypto_pwhash_scryptsalsa208sha256_opslimit_interactive,I._crypto_pwhash_scryptsalsa208sha256_opslimit_max=oA._crypto_pwhash_scryptsalsa208sha256_opslimit_max,I._crypto_pwhash_scryptsalsa208sha256_opslimit_min=oA._crypto_pwhash_scryptsalsa208sha256_opslimit_min,I._crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive=oA._crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive,I._crypto_pwhash_scryptsalsa208sha256_passwd_max=oA._crypto_pwhash_scryptsalsa208sha256_passwd_max,I._crypto_pwhash_scryptsalsa208sha256_passwd_min=oA._crypto_pwhash_scryptsalsa208sha256_passwd_min,I._crypto_pwhash_scryptsalsa208sha256_saltbytes=oA._crypto_pwhash_scryptsalsa208sha256_saltbytes,I._crypto_pwhash_scryptsalsa208sha256_str=oA._crypto_pwhash_scryptsalsa208sha256_str,I._crypto_pwhash_scryptsalsa208sha256_str_needs_rehash=oA._crypto_pwhash_scryptsalsa208sha256_str_needs_rehash,I._crypto_pwhash_scryptsalsa208sha256_str_verify=oA._crypto_pwhash_scryptsalsa208sha256_str_verify,I._crypto_pwhash_scryptsalsa208sha256_strbytes=oA._crypto_pwhash_scryptsalsa208sha256_strbytes,I._crypto_pwhash_scryptsalsa208sha256_strprefix=oA._crypto_pwhash_scryptsalsa208sha256_strprefix,I._crypto_pwhash_str=oA._crypto_pwhash_str,I._crypto_pwhash_str_alg=oA._crypto_pwhash_str_alg,I._crypto_pwhash_str_needs_rehash=oA._crypto_pwhash_str_needs_rehash,I._crypto_pwhash_str_verify=oA._crypto_pwhash_str_verify,I._crypto_pwhash_strbytes=oA._crypto_pwhash_strbytes,I._crypto_pwhash_strprefix=oA._crypto_pwhash_strprefix,I._crypto_scalarmult=oA._crypto_scalarmult,I._crypto_scalarmult_base=oA._crypto_scalarmult_base,I._crypto_scalarmult_bytes=oA._crypto_scalarmult_bytes,I._crypto_scalarmult_curve25519=oA._crypto_scalarmult_curve25519,I._crypto_scalarmult_curve25519_base=oA._crypto_scalarmult_curve25519_base,I._crypto_scalarmult_curve25519_bytes=oA._crypto_scalarmult_curve25519_bytes,I._crypto_scalarmult_curve25519_scalarbytes=oA._crypto_scalarmult_curve25519_scalarbytes,I._crypto_scalarmult_ed25519=oA._crypto_scalarmult_ed25519,I._crypto_scalarmult_ed25519_base=oA._crypto_scalarmult_ed25519_base,I._crypto_scalarmult_ed25519_base_noclamp=oA._crypto_scalarmult_ed25519_base_noclamp,I._crypto_scalarmult_ed25519_bytes=oA._crypto_scalarmult_ed25519_bytes,I._crypto_scalarmult_ed25519_noclamp=oA._crypto_scalarmult_ed25519_noclamp,I._crypto_scalarmult_ed25519_scalarbytes=oA._crypto_scalarmult_ed25519_scalarbytes,I._crypto_scalarmult_primitive=oA._crypto_scalarmult_primitive,I._crypto_scalarmult_ristretto255=oA._crypto_scalarmult_ristretto255,I._crypto_scalarmult_ristretto255_base=oA._crypto_scalarmult_ristretto255_base,I._crypto_scalarmult_ristretto255_bytes=oA._crypto_scalarmult_ristretto255_bytes,I._crypto_scalarmult_ristretto255_scalarbytes=oA._crypto_scalarmult_ristretto255_scalarbytes,I._crypto_scalarmult_scalarbytes=oA._crypto_scalarmult_scalarbytes,I._crypto_secretbox=oA._crypto_secretbox,I._crypto_secretbox_boxzerobytes=oA._crypto_secretbox_boxzerobytes,I._crypto_secretbox_detached=oA._crypto_secretbox_detached,I._crypto_secretbox_easy=oA._crypto_secretbox_easy,I._crypto_secretbox_keybytes=oA._crypto_secretbox_keybytes,I._crypto_secretbox_keygen=oA._crypto_secretbox_keygen,I._crypto_secretbox_macbytes=oA._crypto_secretbox_macbytes,I._crypto_secretbox_messagebytes_max=oA._crypto_secretbox_messagebytes_max,I._crypto_secretbox_noncebytes=oA._crypto_secretbox_noncebytes,I._crypto_secretbox_open=oA._crypto_secretbox_open,I._crypto_secretbox_open_detached=oA._crypto_secretbox_open_detached,I._crypto_secretbox_open_easy=oA._crypto_secretbox_open_easy,I._crypto_secretbox_primitive=oA._crypto_secretbox_primitive,I._crypto_secretbox_xchacha20poly1305_detached=oA._crypto_secretbox_xchacha20poly1305_detached,I._crypto_secretbox_xchacha20poly1305_easy=oA._crypto_secretbox_xchacha20poly1305_easy,I._crypto_secretbox_xchacha20poly1305_keybytes=oA._crypto_secretbox_xchacha20poly1305_keybytes,I._crypto_secretbox_xchacha20poly1305_macbytes=oA._crypto_secretbox_xchacha20poly1305_macbytes,I._crypto_secretbox_xchacha20poly1305_messagebytes_max=oA._crypto_secretbox_xchacha20poly1305_messagebytes_max,I._crypto_secretbox_xchacha20poly1305_noncebytes=oA._crypto_secretbox_xchacha20poly1305_noncebytes,I._crypto_secretbox_xchacha20poly1305_open_detached=oA._crypto_secretbox_xchacha20poly1305_open_detached,I._crypto_secretbox_xchacha20poly1305_open_easy=oA._crypto_secretbox_xchacha20poly1305_open_easy,I._crypto_secretbox_xsalsa20poly1305=oA._crypto_secretbox_xsalsa20poly1305,I._crypto_secretbox_xsalsa20poly1305_boxzerobytes=oA._crypto_secretbox_xsalsa20poly1305_boxzerobytes,I._crypto_secretbox_xsalsa20poly1305_keybytes=oA._crypto_secretbox_xsalsa20poly1305_keybytes,I._crypto_secretbox_xsalsa20poly1305_keygen=oA._crypto_secretbox_xsalsa20poly1305_keygen,I._crypto_secretbox_xsalsa20poly1305_macbytes=oA._crypto_secretbox_xsalsa20poly1305_macbytes,I._crypto_secretbox_xsalsa20poly1305_messagebytes_max=oA._crypto_secretbox_xsalsa20poly1305_messagebytes_max,I._crypto_secretbox_xsalsa20poly1305_noncebytes=oA._crypto_secretbox_xsalsa20poly1305_noncebytes,I._crypto_secretbox_xsalsa20poly1305_open=oA._crypto_secretbox_xsalsa20poly1305_open,I._crypto_secretbox_xsalsa20poly1305_zerobytes=oA._crypto_secretbox_xsalsa20poly1305_zerobytes,I._crypto_secretbox_zerobytes=oA._crypto_secretbox_zerobytes,I._crypto_secretstream_xchacha20poly1305_abytes=oA._crypto_secretstream_xchacha20poly1305_abytes,I._crypto_secretstream_xchacha20poly1305_headerbytes=oA._crypto_secretstream_xchacha20poly1305_headerbytes,I._crypto_secretstream_xchacha20poly1305_init_pull=oA._crypto_secretstream_xchacha20poly1305_init_pull,I._crypto_secretstream_xchacha20poly1305_init_push=oA._crypto_secretstream_xchacha20poly1305_init_push,I._crypto_secretstream_xchacha20poly1305_keybytes=oA._crypto_secretstream_xchacha20poly1305_keybytes,I._crypto_secretstream_xchacha20poly1305_keygen=oA._crypto_secretstream_xchacha20poly1305_keygen,I._crypto_secretstream_xchacha20poly1305_messagebytes_max=oA._crypto_secretstream_xchacha20poly1305_messagebytes_max,I._crypto_secretstream_xchacha20poly1305_pull=oA._crypto_secretstream_xchacha20poly1305_pull,I._crypto_secretstream_xchacha20poly1305_push=oA._crypto_secretstream_xchacha20poly1305_push,I._crypto_secretstream_xchacha20poly1305_rekey=oA._crypto_secretstream_xchacha20poly1305_rekey,I._crypto_secretstream_xchacha20poly1305_statebytes=oA._crypto_secretstream_xchacha20poly1305_statebytes,I._crypto_secretstream_xchacha20poly1305_tag_final=oA._crypto_secretstream_xchacha20poly1305_tag_final,I._crypto_secretstream_xchacha20poly1305_tag_message=oA._crypto_secretstream_xchacha20poly1305_tag_message,I._crypto_secretstream_xchacha20poly1305_tag_push=oA._crypto_secretstream_xchacha20poly1305_tag_push,I._crypto_secretstream_xchacha20poly1305_tag_rekey=oA._crypto_secretstream_xchacha20poly1305_tag_rekey,I._crypto_shorthash=oA._crypto_shorthash,I._crypto_shorthash_bytes=oA._crypto_shorthash_bytes,I._crypto_shorthash_keybytes=oA._crypto_shorthash_keybytes,I._crypto_shorthash_keygen=oA._crypto_shorthash_keygen,I._crypto_shorthash_primitive=oA._crypto_shorthash_primitive,I._crypto_shorthash_siphash24=oA._crypto_shorthash_siphash24,I._crypto_shorthash_siphash24_bytes=oA._crypto_shorthash_siphash24_bytes,I._crypto_shorthash_siphash24_keybytes=oA._crypto_shorthash_siphash24_keybytes,I._crypto_shorthash_siphashx24=oA._crypto_shorthash_siphashx24,I._crypto_shorthash_siphashx24_bytes=oA._crypto_shorthash_siphashx24_bytes,I._crypto_shorthash_siphashx24_keybytes=oA._crypto_shorthash_siphashx24_keybytes,I._crypto_sign=oA._crypto_sign,I._crypto_sign_bytes=oA._crypto_sign_bytes,I._crypto_sign_detached=oA._crypto_sign_detached,I._crypto_sign_ed25519=oA._crypto_sign_ed25519,I._crypto_sign_ed25519_bytes=oA._crypto_sign_ed25519_bytes,I._crypto_sign_ed25519_detached=oA._crypto_sign_ed25519_detached,I._crypto_sign_ed25519_keypair=oA._crypto_sign_ed25519_keypair,I._crypto_sign_ed25519_messagebytes_max=oA._crypto_sign_ed25519_messagebytes_max,I._crypto_sign_ed25519_open=oA._crypto_sign_ed25519_open,I._crypto_sign_ed25519_pk_to_curve25519=oA._crypto_sign_ed25519_pk_to_curve25519,I._crypto_sign_ed25519_publickeybytes=oA._crypto_sign_ed25519_publickeybytes,I._crypto_sign_ed25519_secretkeybytes=oA._crypto_sign_ed25519_secretkeybytes,I._crypto_sign_ed25519_seed_keypair=oA._crypto_sign_ed25519_seed_keypair,I._crypto_sign_ed25519_seedbytes=oA._crypto_sign_ed25519_seedbytes,I._crypto_sign_ed25519_sk_to_curve25519=oA._crypto_sign_ed25519_sk_to_curve25519,I._crypto_sign_ed25519_sk_to_pk=oA._crypto_sign_ed25519_sk_to_pk,I._crypto_sign_ed25519_sk_to_seed=oA._crypto_sign_ed25519_sk_to_seed,I._crypto_sign_ed25519_verify_detached=oA._crypto_sign_ed25519_verify_detached,I._crypto_sign_ed25519ph_final_create=oA._crypto_sign_ed25519ph_final_create,I._crypto_sign_ed25519ph_final_verify=oA._crypto_sign_ed25519ph_final_verify,I._crypto_sign_ed25519ph_init=oA._crypto_sign_ed25519ph_init,I._crypto_sign_ed25519ph_statebytes=oA._crypto_sign_ed25519ph_statebytes,I._crypto_sign_ed25519ph_update=oA._crypto_sign_ed25519ph_update,I._crypto_sign_final_create=oA._crypto_sign_final_create,I._crypto_sign_final_verify=oA._crypto_sign_final_verify,I._crypto_sign_init=oA._crypto_sign_init,I._crypto_sign_keypair=oA._crypto_sign_keypair,I._crypto_sign_messagebytes_max=oA._crypto_sign_messagebytes_max,I._crypto_sign_open=oA._crypto_sign_open,I._crypto_sign_primitive=oA._crypto_sign_primitive,I._crypto_sign_publickeybytes=oA._crypto_sign_publickeybytes,I._crypto_sign_secretkeybytes=oA._crypto_sign_secretkeybytes,I._crypto_sign_seed_keypair=oA._crypto_sign_seed_keypair,I._crypto_sign_seedbytes=oA._crypto_sign_seedbytes,I._crypto_sign_statebytes=oA._crypto_sign_statebytes,I._crypto_sign_update=oA._crypto_sign_update,I._crypto_sign_verify_detached=oA._crypto_sign_verify_detached,I._crypto_stream=oA._crypto_stream,I._crypto_stream_chacha20=oA._crypto_stream_chacha20,I._crypto_stream_chacha20_ietf=oA._crypto_stream_chacha20_ietf,I._crypto_stream_chacha20_ietf_keybytes=oA._crypto_stream_chacha20_ietf_keybytes,I._crypto_stream_chacha20_ietf_keygen=oA._crypto_stream_chacha20_ietf_keygen,I._crypto_stream_chacha20_ietf_messagebytes_max=oA._crypto_stream_chacha20_ietf_messagebytes_max,I._crypto_stream_chacha20_ietf_noncebytes=oA._crypto_stream_chacha20_ietf_noncebytes,I._crypto_stream_chacha20_ietf_xor=oA._crypto_stream_chacha20_ietf_xor,I._crypto_stream_chacha20_ietf_xor_ic=oA._crypto_stream_chacha20_ietf_xor_ic,I._crypto_stream_chacha20_keybytes=oA._crypto_stream_chacha20_keybytes,I._crypto_stream_chacha20_keygen=oA._crypto_stream_chacha20_keygen,I._crypto_stream_chacha20_messagebytes_max=oA._crypto_stream_chacha20_messagebytes_max,I._crypto_stream_chacha20_noncebytes=oA._crypto_stream_chacha20_noncebytes,I._crypto_stream_chacha20_xor=oA._crypto_stream_chacha20_xor,I._crypto_stream_chacha20_xor_ic=oA._crypto_stream_chacha20_xor_ic,I._crypto_stream_keybytes=oA._crypto_stream_keybytes,I._crypto_stream_keygen=oA._crypto_stream_keygen,I._crypto_stream_messagebytes_max=oA._crypto_stream_messagebytes_max,I._crypto_stream_noncebytes=oA._crypto_stream_noncebytes,I._crypto_stream_primitive=oA._crypto_stream_primitive,I._crypto_stream_salsa20=oA._crypto_stream_salsa20,I._crypto_stream_salsa2012=oA._crypto_stream_salsa2012,I._crypto_stream_salsa2012_keybytes=oA._crypto_stream_salsa2012_keybytes,I._crypto_stream_salsa2012_keygen=oA._crypto_stream_salsa2012_keygen,I._crypto_stream_salsa2012_messagebytes_max=oA._crypto_stream_salsa2012_messagebytes_max,I._crypto_stream_salsa2012_noncebytes=oA._crypto_stream_salsa2012_noncebytes,I._crypto_stream_salsa2012_xor=oA._crypto_stream_salsa2012_xor,I._crypto_stream_salsa208=oA._crypto_stream_salsa208,I._crypto_stream_salsa208_keybytes=oA._crypto_stream_salsa208_keybytes,I._crypto_stream_salsa208_keygen=oA._crypto_stream_salsa208_keygen,I._crypto_stream_salsa208_messagebytes_max=oA._crypto_stream_salsa208_messagebytes_max,I._crypto_stream_salsa208_noncebytes=oA._crypto_stream_salsa208_noncebytes,I._crypto_stream_salsa208_xor=oA._crypto_stream_salsa208_xor,I._crypto_stream_salsa20_keybytes=oA._crypto_stream_salsa20_keybytes,I._crypto_stream_salsa20_keygen=oA._crypto_stream_salsa20_keygen,I._crypto_stream_salsa20_messagebytes_max=oA._crypto_stream_salsa20_messagebytes_max,I._crypto_stream_salsa20_noncebytes=oA._crypto_stream_salsa20_noncebytes,I._crypto_stream_salsa20_xor=oA._crypto_stream_salsa20_xor,I._crypto_stream_salsa20_xor_ic=oA._crypto_stream_salsa20_xor_ic,I._crypto_stream_xchacha20=oA._crypto_stream_xchacha20,I._crypto_stream_xchacha20_keybytes=oA._crypto_stream_xchacha20_keybytes,I._crypto_stream_xchacha20_keygen=oA._crypto_stream_xchacha20_keygen,I._crypto_stream_xchacha20_messagebytes_max=oA._crypto_stream_xchacha20_messagebytes_max,I._crypto_stream_xchacha20_noncebytes=oA._crypto_stream_xchacha20_noncebytes,I._crypto_stream_xchacha20_xor=oA._crypto_stream_xchacha20_xor,I._crypto_stream_xchacha20_xor_ic=oA._crypto_stream_xchacha20_xor_ic,I._crypto_stream_xor=oA._crypto_stream_xor,I._crypto_stream_xsalsa20=oA._crypto_stream_xsalsa20,I._crypto_stream_xsalsa20_keybytes=oA._crypto_stream_xsalsa20_keybytes,I._crypto_stream_xsalsa20_keygen=oA._crypto_stream_xsalsa20_keygen,I._crypto_stream_xsalsa20_messagebytes_max=oA._crypto_stream_xsalsa20_messagebytes_max,I._crypto_stream_xsalsa20_noncebytes=oA._crypto_stream_xsalsa20_noncebytes,I._crypto_stream_xsalsa20_xor=oA._crypto_stream_xsalsa20_xor,I._crypto_stream_xsalsa20_xor_ic=oA._crypto_stream_xsalsa20_xor_ic,I._crypto_verify_16=oA._crypto_verify_16,I._crypto_verify_16_bytes=oA._crypto_verify_16_bytes,I._crypto_verify_32=oA._crypto_verify_32,I._crypto_verify_32_bytes=oA._crypto_verify_32_bytes,I._crypto_verify_64=oA._crypto_verify_64,I._crypto_verify_64_bytes=oA._crypto_verify_64_bytes,I._emscripten_get_sbrk_ptr=oA._emscripten_get_sbrk_ptr,I._emscripten_replace_memory=oA._emscripten_replace_memory);if(I._free=oA._free,I._i64Add=oA._i64Add,I._i64Subtract=oA._i64Subtract,I._malloc=oA._malloc,I._memcpy=oA._memcpy,I._memmove=oA._memmove,I._memset=oA._memset,I._randombytes=oA._randombytes,I._randombytes_buf=oA._randombytes_buf,I._randombytes_buf_deterministic=oA._randombytes_buf_deterministic,I._randombytes_close=oA._randombytes_close,I._randombytes_implementation_name=oA._randombytes_implementation_name,I._randombytes_random=oA._randombytes_random,I._randombytes_seedbytes=oA._randombytes_seedbytes,I._randombytes_stir=oA._randombytes_stir,I._randombytes_uniform=oA._randombytes_uniform,I._sodium_base642bin=oA._sodium_base642bin,I._sodium_base64_encoded_len=oA._sodium_base64_encoded_len,I._sodium_bin2base64=oA._sodium_bin2base64,I._sodium_bin2hex=oA._sodium_bin2hex,I._sodium_hex2bin=oA._sodium_hex2bin,I._sodium_init=oA._sodium_init,I._sodium_library_minimal=oA._sodium_library_minimal,I._sodium_library_version_major=oA._sodium_library_version_major,I._sodium_library_version_minor=oA._sodium_library_version_minor,I._sodium_pad=oA._sodium_pad,I._sodium_unpad=oA._sodium_unpad,I._sodium_version_string=oA._sodium_version_string,I.establishStackSpace=oA.establishStackSpace,I.stackAlloc=oA.stackAlloc,I.stackRestore=oA.stackRestore,I.stackSave=oA.stackSave,I.asm=oA,I.setValue=function(A,I,g,B){switch("*"===(g=g||"i8").charAt(g.length-1)&&(g="i32"),g){case"i1":case"i8":l[A>>0]=I;break;case"i16":D[A>>1]=I;break;case"i32":m[A>>2]=I;break;case"i64":T=[I>>>0,(j=I,+N(j)>=1?j>0?(0|L(+Y(j/4294967296),4294967295))>>>0:~~+R((j-+(~~j>>>0))/4294967296)>>>0:0)],m[A>>2]=T[0],m[A+4>>2]=T[1];break;case"float":F[A>>2]=I;break;case"double":k[A>>3]=I;break;default:X("invalid type for setValue: "+g)}},I.getValue=function(A,I,g){switch("*"===(I=I||"i8").charAt(I.length-1)&&(I="i32"),I){case"i1":case"i8":return l[A>>0];case"i16":return D[A>>1];case"i32":case"i64":return m[A>>2];case"float":return F[A>>2];case"double":return k[A>>3];default:X("invalid type for getValue: "+I)}return null},I.UTF8ToString=d,V)if(z(V)||(QA=V,V=I.locateFile?I.locateFile(QA,n):n+QA),e||r){var iA=i(V);u.set(iA,8)}else{P++,I.monitorRunDependencies&&I.monitorRunDependencies(P);var _A=function(A){A.byteLength&&(A=new Uint8Array(A)),u.set(A,8),I.memoryInitializerRequest&&delete I.memoryInitializerRequest.response,function(A){if(P--,I.monitorRunDependencies&&I.monitorRunDependencies(P),0==P&&(null!==K&&(clearInterval(K),K=null),q)){var g=q;q=null,g()}}()},EA=function(){c(V,_A,function(){throw"could not load memory initializer "+V})},nA=rA(V);if(nA)_A(nA.buffer);else if(I.memoryInitializerRequest){var sA=function(){var A=I.memoryInitializerRequest,g=A.response;if(200!==A.status&&0!==A.status){var B=rA(I.memoryInitializerRequestURL);if(!B)return void EA();g=B.buffer}_A(g)};I.memoryInitializerRequest.response?setTimeout(sA,0):I.memoryInitializerRequest.addEventListener("load",sA)}else EA()}function yA(A){function g(){eA||(eA=!0,p||(x(M),x(J),I.onRuntimeInitialized&&I.onRuntimeInitialized(),function(){if(I.postRun)for("function"==typeof I.postRun&&(I.postRun=[I.postRun]);I.postRun.length;)A=I.postRun.shift(),v.unshift(A);var A;x(v)}()))}A=A||Q,P>0||(function(){if(I.preRun)for("function"==typeof I.preRun&&(I.preRun=[I.preRun]);I.preRun.length;)A=I.preRun.shift(),U.unshift(A);var A;x(U)}(),P>0||(I.setStatus?(I.setStatus("Running..."),setTimeout(function(){setTimeout(function(){I.setStatus("")},1),g()},1)):g()))}if(q=function A(){eA||yA(),eA||(q=A)},I.run=yA,I.preInit)for("function"==typeof I.preInit&&(I.preInit=[I.preInit]);I.preInit.length>0;)I.preInit.pop()();yA(),Object.keys(B).forEach(function(A){"getRandomValue"!==A&&delete B[A]}),Object.keys(I).forEach(function(A){B[A]=I[A]})};var g,C=void 0!==C?C:{},a={};for(g in C)C.hasOwnProperty(g)&&(a[g]=C[g]);var t,r,Q=[],e=!1,o=!1,c=!1;e="object"==typeof window,o="function"==typeof importScripts,t="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,c=t&&!e&&!o,r=!e&&!c&&!o;var i,_,E,n,s="";c?(s=__dirname+"/",i=function(A,I){var g;return(g=QA(A))||(E||(E=require("fs")),n||(n=require("path")),A=n.normalize(A),g=E.readFileSync(A)),I?g:g.toString()},_=function(A){var I=i(A,!0);return I.buffer||(I=new Uint8Array(I)),D(I.buffer),I},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),Q=process.argv.slice(2),"undefined"!=typeof module&&(module.exports=C),process.on("unhandledRejection",W),C.inspect=function(){return"[Emscripten Module object]"}):r?("undefined"!=typeof read&&(i=function(A){var I=QA(A);return I?tA(I):read(A)}),_=function(A){var I;return(I=QA(A))?I:"function"==typeof readbuffer?new Uint8Array(readbuffer(A)):(D("object"==typeof(I=read(A,"binary"))),I)},"undefined"!=typeof scriptArgs?Q=scriptArgs:void 0!==arguments&&(Q=arguments),"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(e||o)&&(o?s=self.location.href:document.currentScript&&(s=document.currentScript.src),s=0!==s.indexOf("blob:")?s.substr(0,s.lastIndexOf("/")+1):"",i=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText}catch(I){var g=QA(A);if(g)return tA(g);throw I}},o&&(_=function(A){try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}catch(I){var g=QA(A);if(g)return g;throw I}}));var y=C.print||void 0,h=C.printErr||void 0;for(g in a)a.hasOwnProperty(g)&&(C[g]=a[g]);a=null,C.arguments&&(Q=C.arguments),C.thisProgram&&C.thisProgram,C.quit&&C.quit;var p,f,w={"f64-rem":function(A,I){return A%I},debugger:function(){}};new Array(8),C.wasmBinary&&(p=C.wasmBinary),C.noExitRuntime&&C.noExitRuntime,"object"!=typeof WebAssembly&&h("no native wasm support detected");var l=new WebAssembly.Table({initial:0,maximum:0,element:"anyfunc"}),u=!1;function D(A,I){A||W("Assertion failed: "+I)}var m,F,k,b,d,H,G,S="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function x(A,I){return A?function(A,I,g){for(var B=I+g,C=I;A[C]&&!(C>=B);)++C;if(C-I>16&&A.subarray&&S)return S.decode(A.subarray(I,C));for(var a="";I<C;){var t=A[I++];if(128&t){var r=63&A[I++];if(192!=(224&t)){var Q=63&A[I++];if((t=224==(240&t)?(15&t)<<12|r<<6|Q:(7&t)<<18|r<<12|Q<<6|63&A[I++])<65536)a+=String.fromCharCode(t);else{var e=t-65536;a+=String.fromCharCode(55296|e>>10,56320|1023&e)}}else a+=String.fromCharCode((31&t)<<6|r)}else a+=String.fromCharCode(t)}return a}(k,A,I):""}function U(A,I){return A%I>0&&(A+=I-A%I),A}function M(A){m=A,C.HEAP8=F=new Int8Array(A),C.HEAP16=b=new Int16Array(A),C.HEAP32=d=new Int32Array(A),C.HEAPU8=k=new Uint8Array(A),C.HEAPU16=new Uint16Array(A),C.HEAPU32=new Uint32Array(A),C.HEAPF32=H=new Float32Array(A),C.HEAPF64=G=new Float64Array(A)}"undefined"!=typeof TextDecoder&&new TextDecoder("utf-16le");var J=C.TOTAL_MEMORY||16777216;function v(A){for(;A.length>0;){var I=A.shift();if("function"!=typeof I){var g=I.func;"number"==typeof g?void 0===I.arg?C.dynCall_v(g):C.dynCall_vi(g,I.arg):g(void 0===I.arg?null:I.arg)}else I()}}(f=C.wasmMemory?C.wasmMemory:new WebAssembly.Memory({initial:J/65536}))&&(m=f.buffer),J=m.byteLength,M(m),d[9520]=5281152;var N=[],R=[],Y=[],L=[],P=Math.abs,K=Math.ceil,q=Math.floor,X=Math.min,j=0,T=null,V=null;function W(A){throw C.onAbort&&C.onAbort(A),y(A+=""),h(A),u=!0,"abort("+A+"). Build with -s ASSERTIONS=1 for more info."}C.preloadedImages={},C.preloadedAudios={};var z="data:application/octet-stream;base64,";function Z(A){return String.prototype.startsWith?A.startsWith(z):0===A.indexOf(z)}var O,$,AA,IA="data:application/octet-stream;base64,";function gA(){try{if(p)return new Uint8Array(p);var A=QA(IA);if(A)return A;if(_)return _(IA);throw"both async and sync fetching of the wasm failed"}catch(A){W(A)}}Z(IA)||(O=IA,IA=C.locateFile?C.locateFile(O,s):s+O),C.asm=function(){var A={env:oA,wasi_unstable:oA,global:{NaN:NaN,Infinity:1/0},"global.Math":Math,asm2wasm:w};function I(A,I){var g=A.exports;C.asm=g,function(A){if(j--,C.monitorRunDependencies&&C.monitorRunDependencies(j),0==j&&(null!==T&&(clearInterval(T),T=null),V)){var I=V;V=null,I()}}()}function g(A){I(A.instance)}function B(I){return(p||!e&&!o||"function"!=typeof fetch?new Promise(function(A,I){A(gA())}):fetch(IA,{credentials:"same-origin"}).then(function(A){if(!A.ok)throw"failed to load wasm binary file at '"+IA+"'";return A.arrayBuffer()}).catch(function(){return gA()})).then(function(I){return WebAssembly.instantiate(I,A)}).then(I,function(A){h("failed to asynchronously prepare wasm: "+A),W(A)})}if(j++,C.monitorRunDependencies&&C.monitorRunDependencies(j),C.instantiateWasm)try{return C.instantiateWasm(A,I)}catch(A){return h("Module.instantiateWasm callback failed with error: "+A),!1}return function(){if(p||"function"!=typeof WebAssembly.instantiateStreaming||Z(IA)||"function"!=typeof fetch)return B(g);fetch(IA,{credentials:"same-origin"}).then(function(I){return WebAssembly.instantiateStreaming(I,A).then(g,function(A){h("wasm streaming compile failed: "+A),h("falling back to ArrayBuffer instantiation"),B(g)})})}(),{}};var BA=[function(){return C.getRandomValue()},function(){if(void 0===C.getRandomValue)try{var A="object"==typeof window?window:self,I=void 0!==A.crypto?A.crypto:A.msCrypto,g=function(){var A=new Uint32Array(1);return I.getRandomValues(A),A[0]>>>0};g(),C.getRandomValue=g}catch(A){try{var B=require("crypto"),a=function(){var A=B.randomBytes(4);return(A[0]<<24|A[1]<<16|A[2]<<8|A[3])>>>0};a(),C.getRandomValue=a}catch(A){throw"No secure random number generator found"}}}];function CA(){return F.length}var aA=!1;function tA(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(aA&&D(!1,"Character code "+B+" ("+String.fromCharCode(B)+")  at offset "+g+" not in 0x00-0xFF."),B&=255),I.push(String.fromCharCode(B))}return I.join("")}var rA="function"==typeof atob?atob:function(A){var I,g,B,C,a,t,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",Q="",e=0;A=A.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{I=r.indexOf(A.charAt(e++))<<2|(C=r.indexOf(A.charAt(e++)))>>4,g=(15&C)<<4|(a=r.indexOf(A.charAt(e++)))>>2,B=(3&a)<<6|(t=r.indexOf(A.charAt(e++))),Q+=String.fromCharCode(I),64!==a&&(Q+=String.fromCharCode(g)),64!==t&&(Q+=String.fromCharCode(B))}while(e<A.length);return Q};function QA(A){if(Z(A))return function(A){if("boolean"==typeof c&&c){var I;try{I=Buffer.from(A,"base64")}catch(g){I=new Buffer(A,"base64")}return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=rA(A),B=new Uint8Array(g.length),C=0;C<g.length;++C)B[C]=g.charCodeAt(C);return B}catch(A){throw new Error("Converting base64 string to bytes failed.")}}(A.slice(z.length))}var eA,oA={c:function(A,I,g,B){W("Assertion failed: "+x(A)+", at: "+[I?x(I):"unknown filename",g,B?x(B):"unknown function"])},__memory_base:1024,__table_base:0,a:function(){W()},b:function(A){return BA[A]()},g:CA,f:function(A,I,g){k.set(k.subarray(I,I+g),A)},e:function(A){var I=CA();if(A>2147418112)return!1;for(var g=Math.max(I,16777216);g<A;)g=g<=536870912?U(2*g,65536):Math.min(U((3*g+2147483648)/4,65536),2147418112);return!!function(A){try{return f.grow(A-m.byteLength+65535>>16),M(f.buffer),1}catch(A){}}(g)},d:function(A){switch(A){case 30:return 16384;case 85:return 131068;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"==typeof navigator&&navigator.hardwareConcurrency||1}return C.___errno_location&&(d[C.___errno_location()>>2]=28),-1},memory:f,table:l},cA=C.asm({},oA,m);function iA(A){function I(){eA||(eA=!0,u||(v(R),v(Y),C.onRuntimeInitialized&&C.onRuntimeInitialized(),function(){if(C.postRun)for("function"==typeof C.postRun&&(C.postRun=[C.postRun]);C.postRun.length;)A=C.postRun.shift(),L.unshift(A);var A;v(L)}()))}A=A||Q,j>0||(function(){if(C.preRun)for("function"==typeof C.preRun&&(C.preRun=[C.preRun]);C.preRun.length;)A=C.preRun.shift(),N.unshift(A);var A;v(N)}(),j>0||(C.setStatus?(C.setStatus("Running..."),setTimeout(function(){setTimeout(function(){C.setStatus("")},1),I()},1)):I()))}if(C.asm=cA,C.___errno_location=function(){return C.asm.h.apply(null,arguments)},C._crypto_aead_chacha20poly1305_abytes=function(){return C.asm.i.apply(null,arguments)},C._crypto_aead_chacha20poly1305_decrypt=function(){return C.asm.j.apply(null,arguments)},C._crypto_aead_chacha20poly1305_decrypt_detached=function(){return C.asm.k.apply(null,arguments)},C._crypto_aead_chacha20poly1305_encrypt=function(){return C.asm.l.apply(null,arguments)},C._crypto_aead_chacha20poly1305_encrypt_detached=function(){return C.asm.m.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_abytes=function(){return C.asm.n.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_decrypt=function(){return C.asm.o.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_decrypt_detached=function(){return C.asm.p.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_encrypt=function(){return C.asm.q.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_encrypt_detached=function(){return C.asm.r.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_keybytes=function(){return C.asm.s.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_keygen=function(){return C.asm.t.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_messagebytes_max=function(){return C.asm.u.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_npubbytes=function(){return C.asm.v.apply(null,arguments)},C._crypto_aead_chacha20poly1305_ietf_nsecbytes=function(){return C.asm.w.apply(null,arguments)},C._crypto_aead_chacha20poly1305_keybytes=function(){return C.asm.x.apply(null,arguments)},C._crypto_aead_chacha20poly1305_keygen=function(){return C.asm.y.apply(null,arguments)},C._crypto_aead_chacha20poly1305_messagebytes_max=function(){return C.asm.z.apply(null,arguments)},C._crypto_aead_chacha20poly1305_npubbytes=function(){return C.asm.A.apply(null,arguments)},C._crypto_aead_chacha20poly1305_nsecbytes=function(){return C.asm.B.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_abytes=function(){return C.asm.C.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_decrypt=function(){return C.asm.D.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=function(){return C.asm.E.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_encrypt=function(){return C.asm.F.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=function(){return C.asm.G.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_keybytes=function(){return C.asm.H.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_keygen=function(){return C.asm.I.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=function(){return C.asm.J.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_npubbytes=function(){return C.asm.K.apply(null,arguments)},C._crypto_aead_xchacha20poly1305_ietf_nsecbytes=function(){return C.asm.L.apply(null,arguments)},C._crypto_auth=function(){return C.asm.M.apply(null,arguments)},C._crypto_auth_bytes=function(){return C.asm.N.apply(null,arguments)},C._crypto_auth_hmacsha256=function(){return C.asm.O.apply(null,arguments)},C._crypto_auth_hmacsha256_bytes=function(){return C.asm.P.apply(null,arguments)},C._crypto_auth_hmacsha256_final=function(){return C.asm.Q.apply(null,arguments)},C._crypto_auth_hmacsha256_init=function(){return C.asm.R.apply(null,arguments)},C._crypto_auth_hmacsha256_keybytes=function(){return C.asm.S.apply(null,arguments)},C._crypto_auth_hmacsha256_keygen=function(){return C.asm.T.apply(null,arguments)},C._crypto_auth_hmacsha256_statebytes=function(){return C.asm.U.apply(null,arguments)},C._crypto_auth_hmacsha256_update=function(){return C.asm.V.apply(null,arguments)},C._crypto_auth_hmacsha256_verify=function(){return C.asm.W.apply(null,arguments)},C._crypto_auth_hmacsha512=function(){return C.asm.X.apply(null,arguments)},C._crypto_auth_hmacsha512256=function(){return C.asm.Y.apply(null,arguments)},C._crypto_auth_hmacsha512256_bytes=function(){return C.asm.Z.apply(null,arguments)},C._crypto_auth_hmacsha512256_final=function(){return C.asm._.apply(null,arguments)},C._crypto_auth_hmacsha512256_init=function(){return C.asm.$.apply(null,arguments)},C._crypto_auth_hmacsha512256_keybytes=function(){return C.asm.aa.apply(null,arguments)},C._crypto_auth_hmacsha512256_keygen=function(){return C.asm.ba.apply(null,arguments)},C._crypto_auth_hmacsha512256_statebytes=function(){return C.asm.ca.apply(null,arguments)},C._crypto_auth_hmacsha512256_update=function(){return C.asm.da.apply(null,arguments)},C._crypto_auth_hmacsha512256_verify=function(){return C.asm.ea.apply(null,arguments)},C._crypto_auth_hmacsha512_bytes=function(){return C.asm.fa.apply(null,arguments)},C._crypto_auth_hmacsha512_final=function(){return C.asm.ga.apply(null,arguments)},C._crypto_auth_hmacsha512_init=function(){return C.asm.ha.apply(null,arguments)},C._crypto_auth_hmacsha512_keybytes=function(){return C.asm.ia.apply(null,arguments)},C._crypto_auth_hmacsha512_keygen=function(){return C.asm.ja.apply(null,arguments)},C._crypto_auth_hmacsha512_statebytes=function(){return C.asm.ka.apply(null,arguments)},C._crypto_auth_hmacsha512_update=function(){return C.asm.la.apply(null,arguments)},C._crypto_auth_hmacsha512_verify=function(){return C.asm.ma.apply(null,arguments)},C._crypto_auth_keybytes=function(){return C.asm.na.apply(null,arguments)},C._crypto_auth_keygen=function(){return C.asm.oa.apply(null,arguments)},C._crypto_auth_primitive=function(){return C.asm.pa.apply(null,arguments)},C._crypto_auth_verify=function(){return C.asm.qa.apply(null,arguments)},C._crypto_box=function(){return C.asm.ra.apply(null,arguments)},C._crypto_box_afternm=function(){return C.asm.sa.apply(null,arguments)},C._crypto_box_beforenm=function(){return C.asm.ta.apply(null,arguments)},C._crypto_box_beforenmbytes=function(){return C.asm.ua.apply(null,arguments)},C._crypto_box_boxzerobytes=function(){return C.asm.va.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_beforenm=function(){return C.asm.wa.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_beforenmbytes=function(){return C.asm.xa.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_detached=function(){return C.asm.ya.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_detached_afternm=function(){return C.asm.za.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_easy=function(){return C.asm.Aa.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_easy_afternm=function(){return C.asm.Ba.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_keypair=function(){return C.asm.Ca.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_macbytes=function(){return C.asm.Da.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_messagebytes_max=function(){return C.asm.Ea.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_noncebytes=function(){return C.asm.Fa.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_open_detached=function(){return C.asm.Ga.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_open_detached_afternm=function(){return C.asm.Ha.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_open_easy=function(){return C.asm.Ia.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_open_easy_afternm=function(){return C.asm.Ja.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_publickeybytes=function(){return C.asm.Ka.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_seal=function(){return C.asm.La.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_seal_open=function(){return C.asm.Ma.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_sealbytes=function(){return C.asm.Na.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_secretkeybytes=function(){return C.asm.Oa.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_seed_keypair=function(){return C.asm.Pa.apply(null,arguments)},C._crypto_box_curve25519xchacha20poly1305_seedbytes=function(){return C.asm.Qa.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305=function(){return C.asm.Ra.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_afternm=function(){return C.asm.Sa.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_beforenm=function(){return C.asm.Ta.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_beforenmbytes=function(){return C.asm.Ua.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_boxzerobytes=function(){return C.asm.Va.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_keypair=function(){return C.asm.Wa.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_macbytes=function(){return C.asm.Xa.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_messagebytes_max=function(){return C.asm.Ya.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_noncebytes=function(){return C.asm.Za.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_open=function(){return C.asm._a.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_open_afternm=function(){return C.asm.$a.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_publickeybytes=function(){return C.asm.ab.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_secretkeybytes=function(){return C.asm.bb.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_seed_keypair=function(){return C.asm.cb.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_seedbytes=function(){return C.asm.db.apply(null,arguments)},C._crypto_box_curve25519xsalsa20poly1305_zerobytes=function(){return C.asm.eb.apply(null,arguments)},C._crypto_box_detached=function(){return C.asm.fb.apply(null,arguments)},C._crypto_box_detached_afternm=function(){return C.asm.gb.apply(null,arguments)},C._crypto_box_easy=function(){return C.asm.hb.apply(null,arguments)},C._crypto_box_easy_afternm=function(){return C.asm.ib.apply(null,arguments)},C._crypto_box_keypair=function(){return C.asm.jb.apply(null,arguments)},C._crypto_box_macbytes=function(){return C.asm.kb.apply(null,arguments)},C._crypto_box_messagebytes_max=function(){return C.asm.lb.apply(null,arguments)},C._crypto_box_noncebytes=function(){return C.asm.mb.apply(null,arguments)},C._crypto_box_open=function(){return C.asm.nb.apply(null,arguments)},C._crypto_box_open_afternm=function(){return C.asm.ob.apply(null,arguments)},C._crypto_box_open_detached=function(){return C.asm.pb.apply(null,arguments)},C._crypto_box_open_detached_afternm=function(){return C.asm.qb.apply(null,arguments)},C._crypto_box_open_easy=function(){return C.asm.rb.apply(null,arguments)},C._crypto_box_open_easy_afternm=function(){return C.asm.sb.apply(null,arguments)},C._crypto_box_primitive=function(){return C.asm.tb.apply(null,arguments)},C._crypto_box_publickeybytes=function(){return C.asm.ub.apply(null,arguments)},C._crypto_box_seal=function(){return C.asm.vb.apply(null,arguments)},C._crypto_box_seal_open=function(){return C.asm.wb.apply(null,arguments)},C._crypto_box_sealbytes=function(){return C.asm.xb.apply(null,arguments)},C._crypto_box_secretkeybytes=function(){return C.asm.yb.apply(null,arguments)},C._crypto_box_seed_keypair=function(){return C.asm.zb.apply(null,arguments)},C._crypto_box_seedbytes=function(){return C.asm.Ab.apply(null,arguments)},C._crypto_box_zerobytes=function(){return C.asm.Bb.apply(null,arguments)},C._crypto_core_ed25519_add=function(){return C.asm.Cb.apply(null,arguments)},C._crypto_core_ed25519_bytes=function(){return C.asm.Db.apply(null,arguments)},C._crypto_core_ed25519_from_hash=function(){return C.asm.Eb.apply(null,arguments)},C._crypto_core_ed25519_from_uniform=function(){return C.asm.Fb.apply(null,arguments)},C._crypto_core_ed25519_hashbytes=function(){return C.asm.Gb.apply(null,arguments)},C._crypto_core_ed25519_is_valid_point=function(){return C.asm.Hb.apply(null,arguments)},C._crypto_core_ed25519_nonreducedscalarbytes=function(){return C.asm.Ib.apply(null,arguments)},C._crypto_core_ed25519_random=function(){return C.asm.Jb.apply(null,arguments)},C._crypto_core_ed25519_scalar_add=function(){return C.asm.Kb.apply(null,arguments)},C._crypto_core_ed25519_scalar_complement=function(){return C.asm.Lb.apply(null,arguments)},C._crypto_core_ed25519_scalar_invert=function(){return C.asm.Mb.apply(null,arguments)},C._crypto_core_ed25519_scalar_mul=function(){return C.asm.Nb.apply(null,arguments)},C._crypto_core_ed25519_scalar_negate=function(){return C.asm.Ob.apply(null,arguments)},C._crypto_core_ed25519_scalar_random=function(){return C.asm.Pb.apply(null,arguments)},C._crypto_core_ed25519_scalar_reduce=function(){return C.asm.Qb.apply(null,arguments)},C._crypto_core_ed25519_scalar_sub=function(){return C.asm.Rb.apply(null,arguments)},C._crypto_core_ed25519_scalarbytes=function(){return C.asm.Sb.apply(null,arguments)},C._crypto_core_ed25519_sub=function(){return C.asm.Tb.apply(null,arguments)},C._crypto_core_ed25519_uniformbytes=function(){return C.asm.Ub.apply(null,arguments)},C._crypto_core_hchacha20=function(){return C.asm.Vb.apply(null,arguments)},C._crypto_core_hchacha20_constbytes=function(){return C.asm.Wb.apply(null,arguments)},C._crypto_core_hchacha20_inputbytes=function(){return C.asm.Xb.apply(null,arguments)},C._crypto_core_hchacha20_keybytes=function(){return C.asm.Yb.apply(null,arguments)},C._crypto_core_hchacha20_outputbytes=function(){return C.asm.Zb.apply(null,arguments)},C._crypto_core_hsalsa20=function(){return C.asm._b.apply(null,arguments)},C._crypto_core_hsalsa20_constbytes=function(){return C.asm.$b.apply(null,arguments)},C._crypto_core_hsalsa20_inputbytes=function(){return C.asm.ac.apply(null,arguments)},C._crypto_core_hsalsa20_keybytes=function(){return C.asm.bc.apply(null,arguments)},C._crypto_core_hsalsa20_outputbytes=function(){return C.asm.cc.apply(null,arguments)},C._crypto_core_ristretto255_add=function(){return C.asm.dc.apply(null,arguments)},C._crypto_core_ristretto255_bytes=function(){return C.asm.ec.apply(null,arguments)},C._crypto_core_ristretto255_from_hash=function(){return C.asm.fc.apply(null,arguments)},C._crypto_core_ristretto255_hashbytes=function(){return C.asm.gc.apply(null,arguments)},C._crypto_core_ristretto255_is_valid_point=function(){return C.asm.hc.apply(null,arguments)},C._crypto_core_ristretto255_nonreducedscalarbytes=function(){return C.asm.ic.apply(null,arguments)},C._crypto_core_ristretto255_random=function(){return C.asm.jc.apply(null,arguments)},C._crypto_core_ristretto255_scalar_add=function(){return C.asm.kc.apply(null,arguments)},C._crypto_core_ristretto255_scalar_complement=function(){return C.asm.lc.apply(null,arguments)},C._crypto_core_ristretto255_scalar_invert=function(){return C.asm.mc.apply(null,arguments)},C._crypto_core_ristretto255_scalar_mul=function(){return C.asm.nc.apply(null,arguments)},C._crypto_core_ristretto255_scalar_negate=function(){return C.asm.oc.apply(null,arguments)},C._crypto_core_ristretto255_scalar_random=function(){return C.asm.pc.apply(null,arguments)},C._crypto_core_ristretto255_scalar_reduce=function(){return C.asm.qc.apply(null,arguments)},C._crypto_core_ristretto255_scalar_sub=function(){return C.asm.rc.apply(null,arguments)},C._crypto_core_ristretto255_scalarbytes=function(){return C.asm.sc.apply(null,arguments)},C._crypto_core_ristretto255_sub=function(){return C.asm.tc.apply(null,arguments)},C._crypto_core_salsa20=function(){return C.asm.uc.apply(null,arguments)},C._crypto_core_salsa2012=function(){return C.asm.vc.apply(null,arguments)},C._crypto_core_salsa2012_constbytes=function(){return C.asm.wc.apply(null,arguments)},C._crypto_core_salsa2012_inputbytes=function(){return C.asm.xc.apply(null,arguments)},C._crypto_core_salsa2012_keybytes=function(){return C.asm.yc.apply(null,arguments)},C._crypto_core_salsa2012_outputbytes=function(){return C.asm.zc.apply(null,arguments)},C._crypto_core_salsa208=function(){return C.asm.Ac.apply(null,arguments)},C._crypto_core_salsa208_constbytes=function(){return C.asm.Bc.apply(null,arguments)},C._crypto_core_salsa208_inputbytes=function(){return C.asm.Cc.apply(null,arguments)},C._crypto_core_salsa208_keybytes=function(){return C.asm.Dc.apply(null,arguments)},C._crypto_core_salsa208_outputbytes=function(){return C.asm.Ec.apply(null,arguments)},C._crypto_core_salsa20_constbytes=function(){return C.asm.Fc.apply(null,arguments)},C._crypto_core_salsa20_inputbytes=function(){return C.asm.Gc.apply(null,arguments)},C._crypto_core_salsa20_keybytes=function(){return C.asm.Hc.apply(null,arguments)},C._crypto_core_salsa20_outputbytes=function(){return C.asm.Ic.apply(null,arguments)},C._crypto_generichash=function(){return C.asm.Jc.apply(null,arguments)},C._crypto_generichash_blake2b=function(){return C.asm.Kc.apply(null,arguments)},C._crypto_generichash_blake2b_bytes=function(){return C.asm.Lc.apply(null,arguments)},C._crypto_generichash_blake2b_bytes_max=function(){return C.asm.Mc.apply(null,arguments)},C._crypto_generichash_blake2b_bytes_min=function(){return C.asm.Nc.apply(null,arguments)},C._crypto_generichash_blake2b_final=function(){return C.asm.Oc.apply(null,arguments)},C._crypto_generichash_blake2b_init=function(){return C.asm.Pc.apply(null,arguments)},C._crypto_generichash_blake2b_init_salt_personal=function(){return C.asm.Qc.apply(null,arguments)},C._crypto_generichash_blake2b_keybytes=function(){return C.asm.Rc.apply(null,arguments)},C._crypto_generichash_blake2b_keybytes_max=function(){return C.asm.Sc.apply(null,arguments)},C._crypto_generichash_blake2b_keybytes_min=function(){return C.asm.Tc.apply(null,arguments)},C._crypto_generichash_blake2b_keygen=function(){return C.asm.Uc.apply(null,arguments)},C._crypto_generichash_blake2b_personalbytes=function(){return C.asm.Vc.apply(null,arguments)},C._crypto_generichash_blake2b_salt_personal=function(){return C.asm.Wc.apply(null,arguments)},C._crypto_generichash_blake2b_saltbytes=function(){return C.asm.Xc.apply(null,arguments)},C._crypto_generichash_blake2b_statebytes=function(){return C.asm.Yc.apply(null,arguments)},C._crypto_generichash_blake2b_update=function(){return C.asm.Zc.apply(null,arguments)},C._crypto_generichash_bytes=function(){return C.asm._c.apply(null,arguments)},C._crypto_generichash_bytes_max=function(){return C.asm.$c.apply(null,arguments)},C._crypto_generichash_bytes_min=function(){return C.asm.ad.apply(null,arguments)},C._crypto_generichash_final=function(){return C.asm.bd.apply(null,arguments)},C._crypto_generichash_init=function(){return C.asm.cd.apply(null,arguments)},C._crypto_generichash_keybytes=function(){return C.asm.dd.apply(null,arguments)},C._crypto_generichash_keybytes_max=function(){return C.asm.ed.apply(null,arguments)},C._crypto_generichash_keybytes_min=function(){return C.asm.fd.apply(null,arguments)},C._crypto_generichash_keygen=function(){return C.asm.gd.apply(null,arguments)},C._crypto_generichash_primitive=function(){return C.asm.hd.apply(null,arguments)},C._crypto_generichash_statebytes=function(){return C.asm.id.apply(null,arguments)},C._crypto_generichash_update=function(){return C.asm.jd.apply(null,arguments)},C._crypto_hash=function(){return C.asm.kd.apply(null,arguments)},C._crypto_hash_bytes=function(){return C.asm.ld.apply(null,arguments)},C._crypto_hash_primitive=function(){return C.asm.md.apply(null,arguments)},C._crypto_hash_sha256=function(){return C.asm.nd.apply(null,arguments)},C._crypto_hash_sha256_bytes=function(){return C.asm.od.apply(null,arguments)},C._crypto_hash_sha256_final=function(){return C.asm.pd.apply(null,arguments)},C._crypto_hash_sha256_init=function(){return C.asm.qd.apply(null,arguments)},C._crypto_hash_sha256_statebytes=function(){return C.asm.rd.apply(null,arguments)},C._crypto_hash_sha256_update=function(){return C.asm.sd.apply(null,arguments)},C._crypto_hash_sha512=function(){return C.asm.td.apply(null,arguments)},C._crypto_hash_sha512_bytes=function(){return C.asm.ud.apply(null,arguments)},C._crypto_hash_sha512_final=function(){return C.asm.vd.apply(null,arguments)},C._crypto_hash_sha512_init=function(){return C.asm.wd.apply(null,arguments)},C._crypto_hash_sha512_statebytes=function(){return C.asm.xd.apply(null,arguments)},C._crypto_hash_sha512_update=function(){return C.asm.yd.apply(null,arguments)},C._crypto_kdf_blake2b_bytes_max=function(){return C.asm.zd.apply(null,arguments)},C._crypto_kdf_blake2b_bytes_min=function(){return C.asm.Ad.apply(null,arguments)},C._crypto_kdf_blake2b_contextbytes=function(){return C.asm.Bd.apply(null,arguments)},C._crypto_kdf_blake2b_derive_from_key=function(){return C.asm.Cd.apply(null,arguments)},C._crypto_kdf_blake2b_keybytes=function(){return C.asm.Dd.apply(null,arguments)},C._crypto_kdf_bytes_max=function(){return C.asm.Ed.apply(null,arguments)},C._crypto_kdf_bytes_min=function(){return C.asm.Fd.apply(null,arguments)},C._crypto_kdf_contextbytes=function(){return C.asm.Gd.apply(null,arguments)},C._crypto_kdf_derive_from_key=function(){return C.asm.Hd.apply(null,arguments)},C._crypto_kdf_keybytes=function(){return C.asm.Id.apply(null,arguments)},C._crypto_kdf_keygen=function(){return C.asm.Jd.apply(null,arguments)},C._crypto_kdf_primitive=function(){return C.asm.Kd.apply(null,arguments)},C._crypto_kx_client_session_keys=function(){return C.asm.Ld.apply(null,arguments)},C._crypto_kx_keypair=function(){return C.asm.Md.apply(null,arguments)},C._crypto_kx_primitive=function(){return C.asm.Nd.apply(null,arguments)},C._crypto_kx_publickeybytes=function(){return C.asm.Od.apply(null,arguments)},C._crypto_kx_secretkeybytes=function(){return C.asm.Pd.apply(null,arguments)},C._crypto_kx_seed_keypair=function(){return C.asm.Qd.apply(null,arguments)},C._crypto_kx_seedbytes=function(){return C.asm.Rd.apply(null,arguments)},C._crypto_kx_server_session_keys=function(){return C.asm.Sd.apply(null,arguments)},C._crypto_kx_sessionkeybytes=function(){return C.asm.Td.apply(null,arguments)},C._crypto_onetimeauth=function(){return C.asm.Ud.apply(null,arguments)},C._crypto_onetimeauth_bytes=function(){return C.asm.Vd.apply(null,arguments)},C._crypto_onetimeauth_final=function(){return C.asm.Wd.apply(null,arguments)},C._crypto_onetimeauth_init=function(){return C.asm.Xd.apply(null,arguments)},C._crypto_onetimeauth_keybytes=function(){return C.asm.Yd.apply(null,arguments)},C._crypto_onetimeauth_keygen=function(){return C.asm.Zd.apply(null,arguments)},C._crypto_onetimeauth_poly1305=function(){return C.asm._d.apply(null,arguments)},C._crypto_onetimeauth_poly1305_bytes=function(){return C.asm.$d.apply(null,arguments)},C._crypto_onetimeauth_poly1305_final=function(){return C.asm.ae.apply(null,arguments)},C._crypto_onetimeauth_poly1305_init=function(){return C.asm.be.apply(null,arguments)},C._crypto_onetimeauth_poly1305_keybytes=function(){return C.asm.ce.apply(null,arguments)},C._crypto_onetimeauth_poly1305_keygen=function(){return C.asm.de.apply(null,arguments)},C._crypto_onetimeauth_poly1305_statebytes=function(){return C.asm.ee.apply(null,arguments)},C._crypto_onetimeauth_poly1305_update=function(){return C.asm.fe.apply(null,arguments)},C._crypto_onetimeauth_poly1305_verify=function(){return C.asm.ge.apply(null,arguments)},C._crypto_onetimeauth_primitive=function(){return C.asm.he.apply(null,arguments)},C._crypto_onetimeauth_statebytes=function(){return C.asm.ie.apply(null,arguments)},C._crypto_onetimeauth_update=function(){return C.asm.je.apply(null,arguments)},C._crypto_onetimeauth_verify=function(){return C.asm.ke.apply(null,arguments)},C._crypto_pwhash=function(){return C.asm.le.apply(null,arguments)},C._crypto_pwhash_alg_argon2i13=function(){return C.asm.me.apply(null,arguments)},C._crypto_pwhash_alg_argon2id13=function(){return C.asm.ne.apply(null,arguments)},C._crypto_pwhash_alg_default=function(){return C.asm.oe.apply(null,arguments)},C._crypto_pwhash_argon2i=function(){return C.asm.pe.apply(null,arguments)},C._crypto_pwhash_argon2i_alg_argon2i13=function(){return C.asm.qe.apply(null,arguments)},C._crypto_pwhash_argon2i_bytes_max=function(){return C.asm.re.apply(null,arguments)},C._crypto_pwhash_argon2i_bytes_min=function(){return C.asm.se.apply(null,arguments)},C._crypto_pwhash_argon2i_memlimit_interactive=function(){return C.asm.te.apply(null,arguments)},C._crypto_pwhash_argon2i_memlimit_max=function(){return C.asm.ue.apply(null,arguments)},C._crypto_pwhash_argon2i_memlimit_min=function(){return C.asm.ve.apply(null,arguments)},C._crypto_pwhash_argon2i_memlimit_moderate=function(){return C.asm.we.apply(null,arguments)},C._crypto_pwhash_argon2i_memlimit_sensitive=function(){return C.asm.xe.apply(null,arguments)},C._crypto_pwhash_argon2i_opslimit_interactive=function(){return C.asm.ye.apply(null,arguments)},C._crypto_pwhash_argon2i_opslimit_max=function(){return C.asm.ze.apply(null,arguments)},C._crypto_pwhash_argon2i_opslimit_min=function(){return C.asm.Ae.apply(null,arguments)},C._crypto_pwhash_argon2i_opslimit_moderate=function(){return C.asm.Be.apply(null,arguments)},C._crypto_pwhash_argon2i_opslimit_sensitive=function(){return C.asm.Ce.apply(null,arguments)},C._crypto_pwhash_argon2i_passwd_max=function(){return C.asm.De.apply(null,arguments)},C._crypto_pwhash_argon2i_passwd_min=function(){return C.asm.Ee.apply(null,arguments)},C._crypto_pwhash_argon2i_saltbytes=function(){return C.asm.Fe.apply(null,arguments)},C._crypto_pwhash_argon2i_str=function(){return C.asm.Ge.apply(null,arguments)},C._crypto_pwhash_argon2i_str_needs_rehash=function(){return C.asm.He.apply(null,arguments)},C._crypto_pwhash_argon2i_str_verify=function(){return C.asm.Ie.apply(null,arguments)},C._crypto_pwhash_argon2i_strbytes=function(){return C.asm.Je.apply(null,arguments)},C._crypto_pwhash_argon2i_strprefix=function(){return C.asm.Ke.apply(null,arguments)},C._crypto_pwhash_argon2id=function(){return C.asm.Le.apply(null,arguments)},C._crypto_pwhash_argon2id_alg_argon2id13=function(){return C.asm.Me.apply(null,arguments)},C._crypto_pwhash_argon2id_bytes_max=function(){return C.asm.Ne.apply(null,arguments)},C._crypto_pwhash_argon2id_bytes_min=function(){return C.asm.Oe.apply(null,arguments)},C._crypto_pwhash_argon2id_memlimit_interactive=function(){return C.asm.Pe.apply(null,arguments)},C._crypto_pwhash_argon2id_memlimit_max=function(){return C.asm.Qe.apply(null,arguments)},C._crypto_pwhash_argon2id_memlimit_min=function(){return C.asm.Re.apply(null,arguments)},C._crypto_pwhash_argon2id_memlimit_moderate=function(){return C.asm.Se.apply(null,arguments)},C._crypto_pwhash_argon2id_memlimit_sensitive=function(){return C.asm.Te.apply(null,arguments)},C._crypto_pwhash_argon2id_opslimit_interactive=function(){return C.asm.Ue.apply(null,arguments)},C._crypto_pwhash_argon2id_opslimit_max=function(){return C.asm.Ve.apply(null,arguments)},C._crypto_pwhash_argon2id_opslimit_min=function(){return C.asm.We.apply(null,arguments)},C._crypto_pwhash_argon2id_opslimit_moderate=function(){return C.asm.Xe.apply(null,arguments)},C._crypto_pwhash_argon2id_opslimit_sensitive=function(){return C.asm.Ye.apply(null,arguments)},C._crypto_pwhash_argon2id_passwd_max=function(){return C.asm.Ze.apply(null,arguments)},C._crypto_pwhash_argon2id_passwd_min=function(){return C.asm._e.apply(null,arguments)},C._crypto_pwhash_argon2id_saltbytes=function(){return C.asm.$e.apply(null,arguments)},C._crypto_pwhash_argon2id_str=function(){return C.asm.af.apply(null,arguments)},C._crypto_pwhash_argon2id_str_needs_rehash=function(){return C.asm.bf.apply(null,arguments)},C._crypto_pwhash_argon2id_str_verify=function(){return C.asm.cf.apply(null,arguments)},C._crypto_pwhash_argon2id_strbytes=function(){return C.asm.df.apply(null,arguments)},C._crypto_pwhash_argon2id_strprefix=function(){return C.asm.ef.apply(null,arguments)},C._crypto_pwhash_bytes_max=function(){return C.asm.ff.apply(null,arguments)},C._crypto_pwhash_bytes_min=function(){return C.asm.gf.apply(null,arguments)},C._crypto_pwhash_memlimit_interactive=function(){return C.asm.hf.apply(null,arguments)},C._crypto_pwhash_memlimit_max=function(){return C.asm.jf.apply(null,arguments)},C._crypto_pwhash_memlimit_min=function(){return C.asm.kf.apply(null,arguments)},C._crypto_pwhash_memlimit_moderate=function(){return C.asm.lf.apply(null,arguments)},C._crypto_pwhash_memlimit_sensitive=function(){return C.asm.mf.apply(null,arguments)},C._crypto_pwhash_opslimit_interactive=function(){return C.asm.nf.apply(null,arguments)},C._crypto_pwhash_opslimit_max=function(){return C.asm.of.apply(null,arguments)},C._crypto_pwhash_opslimit_min=function(){return C.asm.pf.apply(null,arguments)},C._crypto_pwhash_opslimit_moderate=function(){return C.asm.qf.apply(null,arguments)},C._crypto_pwhash_opslimit_sensitive=function(){return C.asm.rf.apply(null,arguments)},C._crypto_pwhash_passwd_max=function(){return C.asm.sf.apply(null,arguments)},C._crypto_pwhash_passwd_min=function(){return C.asm.tf.apply(null,arguments)},C._crypto_pwhash_primitive=function(){return C.asm.uf.apply(null,arguments)},C._crypto_pwhash_saltbytes=function(){return C.asm.vf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256=function(){return C.asm.wf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_bytes_max=function(){return C.asm.xf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_bytes_min=function(){return C.asm.yf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_ll=function(){return C.asm.zf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_memlimit_interactive=function(){return C.asm.Af.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_memlimit_max=function(){return C.asm.Bf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_memlimit_min=function(){return C.asm.Cf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive=function(){return C.asm.Df.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_opslimit_interactive=function(){return C.asm.Ef.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_opslimit_max=function(){return C.asm.Ff.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_opslimit_min=function(){return C.asm.Gf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive=function(){return C.asm.Hf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_passwd_max=function(){return C.asm.If.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_passwd_min=function(){return C.asm.Jf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_saltbytes=function(){return C.asm.Kf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_str=function(){return C.asm.Lf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_str_needs_rehash=function(){return C.asm.Mf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_str_verify=function(){return C.asm.Nf.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_strbytes=function(){return C.asm.Of.apply(null,arguments)},C._crypto_pwhash_scryptsalsa208sha256_strprefix=function(){return C.asm.Pf.apply(null,arguments)},C._crypto_pwhash_str=function(){return C.asm.Qf.apply(null,arguments)},C._crypto_pwhash_str_alg=function(){return C.asm.Rf.apply(null,arguments)},C._crypto_pwhash_str_needs_rehash=function(){return C.asm.Sf.apply(null,arguments)},C._crypto_pwhash_str_verify=function(){return C.asm.Tf.apply(null,arguments)},C._crypto_pwhash_strbytes=function(){return C.asm.Uf.apply(null,arguments)},C._crypto_pwhash_strprefix=function(){return C.asm.Vf.apply(null,arguments)},C._crypto_scalarmult=function(){return C.asm.Wf.apply(null,arguments)},C._crypto_scalarmult_base=function(){return C.asm.Xf.apply(null,arguments)},C._crypto_scalarmult_bytes=function(){return C.asm.Yf.apply(null,arguments)},C._crypto_scalarmult_curve25519=function(){return C.asm.Zf.apply(null,arguments)},C._crypto_scalarmult_curve25519_base=function(){return C.asm._f.apply(null,arguments)},C._crypto_scalarmult_curve25519_bytes=function(){return C.asm.$f.apply(null,arguments)},C._crypto_scalarmult_curve25519_scalarbytes=function(){return C.asm.ag.apply(null,arguments)},C._crypto_scalarmult_ed25519=function(){return C.asm.bg.apply(null,arguments)},C._crypto_scalarmult_ed25519_base=function(){return C.asm.cg.apply(null,arguments)},C._crypto_scalarmult_ed25519_base_noclamp=function(){return C.asm.dg.apply(null,arguments)},C._crypto_scalarmult_ed25519_bytes=function(){return C.asm.eg.apply(null,arguments)},C._crypto_scalarmult_ed25519_noclamp=function(){return C.asm.fg.apply(null,arguments)},C._crypto_scalarmult_ed25519_scalarbytes=function(){return C.asm.gg.apply(null,arguments)},C._crypto_scalarmult_primitive=function(){return C.asm.hg.apply(null,arguments)},C._crypto_scalarmult_ristretto255=function(){return C.asm.ig.apply(null,arguments)},C._crypto_scalarmult_ristretto255_base=function(){return C.asm.jg.apply(null,arguments)},C._crypto_scalarmult_ristretto255_bytes=function(){return C.asm.kg.apply(null,arguments)},C._crypto_scalarmult_ristretto255_scalarbytes=function(){return C.asm.lg.apply(null,arguments)},C._crypto_scalarmult_scalarbytes=function(){return C.asm.mg.apply(null,arguments)},C._crypto_secretbox=function(){return C.asm.ng.apply(null,arguments)},C._crypto_secretbox_boxzerobytes=function(){return C.asm.og.apply(null,arguments)},C._crypto_secretbox_detached=function(){return C.asm.pg.apply(null,arguments)},C._crypto_secretbox_easy=function(){return C.asm.qg.apply(null,arguments)},C._crypto_secretbox_keybytes=function(){return C.asm.rg.apply(null,arguments)},C._crypto_secretbox_keygen=function(){return C.asm.sg.apply(null,arguments)},C._crypto_secretbox_macbytes=function(){return C.asm.tg.apply(null,arguments)},C._crypto_secretbox_messagebytes_max=function(){return C.asm.ug.apply(null,arguments)},C._crypto_secretbox_noncebytes=function(){return C.asm.vg.apply(null,arguments)},C._crypto_secretbox_open=function(){return C.asm.wg.apply(null,arguments)},C._crypto_secretbox_open_detached=function(){return C.asm.xg.apply(null,arguments)},C._crypto_secretbox_open_easy=function(){return C.asm.yg.apply(null,arguments)},C._crypto_secretbox_primitive=function(){return C.asm.zg.apply(null,arguments)},C._crypto_secretbox_xchacha20poly1305_detached=function(){return C.asm.Ag.apply(null,arguments)},C._crypto_secretbox_xchacha20poly1305_easy=function(){return C.asm.Bg.apply(null,arguments)},C._crypto_secretbox_xchacha20poly1305_keybytes=function(){return C.asm.Cg.apply(null,arguments)},C._crypto_secretbox_xchacha20poly1305_macbytes=function(){return C.asm.Dg.apply(null,arguments)},C._crypto_secretbox_xchacha20poly1305_messagebytes_max=function(){return C.asm.Eg.apply(null,arguments)},C._crypto_secretbox_xchacha20poly1305_noncebytes=function(){return C.asm.Fg.apply(null,arguments)},C._crypto_secretbox_xchacha20poly1305_open_detached=function(){return C.asm.Gg.apply(null,arguments)},C._crypto_secretbox_xchacha20poly1305_open_easy=function(){return C.asm.Hg.apply(null,arguments)},C._crypto_secretbox_xsalsa20poly1305=function(){return C.asm.Ig.apply(null,arguments)},C._crypto_secretbox_xsalsa20poly1305_boxzerobytes=function(){return C.asm.Jg.apply(null,arguments)},C._crypto_secretbox_xsalsa20poly1305_keybytes=function(){return C.asm.Kg.apply(null,arguments)},C._crypto_secretbox_xsalsa20poly1305_keygen=function(){return C.asm.Lg.apply(null,arguments)},C._crypto_secretbox_xsalsa20poly1305_macbytes=function(){return C.asm.Mg.apply(null,arguments)},C._crypto_secretbox_xsalsa20poly1305_messagebytes_max=function(){return C.asm.Ng.apply(null,arguments)},C._crypto_secretbox_xsalsa20poly1305_noncebytes=function(){return C.asm.Og.apply(null,arguments)},C._crypto_secretbox_xsalsa20poly1305_open=function(){return C.asm.Pg.apply(null,arguments)},C._crypto_secretbox_xsalsa20poly1305_zerobytes=function(){return C.asm.Qg.apply(null,arguments)},C._crypto_secretbox_zerobytes=function(){return C.asm.Rg.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_abytes=function(){return C.asm.Sg.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_headerbytes=function(){return C.asm.Tg.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_init_pull=function(){return C.asm.Ug.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_init_push=function(){return C.asm.Vg.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_keybytes=function(){return C.asm.Wg.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_keygen=function(){return C.asm.Xg.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_messagebytes_max=function(){return C.asm.Yg.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_pull=function(){return C.asm.Zg.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_push=function(){return C.asm._g.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_rekey=function(){return C.asm.$g.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_statebytes=function(){return C.asm.ah.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_final=function(){return C.asm.bh.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_message=function(){return C.asm.ch.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_push=function(){return C.asm.dh.apply(null,arguments)},C._crypto_secretstream_xchacha20poly1305_tag_rekey=function(){return C.asm.eh.apply(null,arguments)},C._crypto_shorthash=function(){return C.asm.fh.apply(null,arguments)},C._crypto_shorthash_bytes=function(){return C.asm.gh.apply(null,arguments)},C._crypto_shorthash_keybytes=function(){return C.asm.hh.apply(null,arguments)},C._crypto_shorthash_keygen=function(){return C.asm.ih.apply(null,arguments)},C._crypto_shorthash_primitive=function(){return C.asm.jh.apply(null,arguments)},C._crypto_shorthash_siphash24=function(){return C.asm.kh.apply(null,arguments)},C._crypto_shorthash_siphash24_bytes=function(){return C.asm.lh.apply(null,arguments)},C._crypto_shorthash_siphash24_keybytes=function(){return C.asm.mh.apply(null,arguments)},C._crypto_shorthash_siphashx24=function(){return C.asm.nh.apply(null,arguments)},C._crypto_shorthash_siphashx24_bytes=function(){return C.asm.oh.apply(null,arguments)},C._crypto_shorthash_siphashx24_keybytes=function(){return C.asm.ph.apply(null,arguments)},C._crypto_sign=function(){return C.asm.qh.apply(null,arguments)},C._crypto_sign_bytes=function(){return C.asm.rh.apply(null,arguments)},C._crypto_sign_detached=function(){return C.asm.sh.apply(null,arguments)},C._crypto_sign_ed25519=function(){return C.asm.th.apply(null,arguments)},C._crypto_sign_ed25519_bytes=function(){return C.asm.uh.apply(null,arguments)},C._crypto_sign_ed25519_detached=function(){return C.asm.vh.apply(null,arguments)},C._crypto_sign_ed25519_keypair=function(){return C.asm.wh.apply(null,arguments)},C._crypto_sign_ed25519_messagebytes_max=function(){return C.asm.xh.apply(null,arguments)},C._crypto_sign_ed25519_open=function(){return C.asm.yh.apply(null,arguments)},C._crypto_sign_ed25519_pk_to_curve25519=function(){return C.asm.zh.apply(null,arguments)},C._crypto_sign_ed25519_publickeybytes=function(){return C.asm.Ah.apply(null,arguments)},C._crypto_sign_ed25519_secretkeybytes=function(){return C.asm.Bh.apply(null,arguments)},C._crypto_sign_ed25519_seed_keypair=function(){return C.asm.Ch.apply(null,arguments)},C._crypto_sign_ed25519_seedbytes=function(){return C.asm.Dh.apply(null,arguments)},C._crypto_sign_ed25519_sk_to_curve25519=function(){return C.asm.Eh.apply(null,arguments)},C._crypto_sign_ed25519_sk_to_pk=function(){return C.asm.Fh.apply(null,arguments)},C._crypto_sign_ed25519_sk_to_seed=function(){return C.asm.Gh.apply(null,arguments)},C._crypto_sign_ed25519_verify_detached=function(){return C.asm.Hh.apply(null,arguments)},C._crypto_sign_ed25519ph_final_create=function(){return C.asm.Ih.apply(null,arguments)},C._crypto_sign_ed25519ph_final_verify=function(){return C.asm.Jh.apply(null,arguments)},C._crypto_sign_ed25519ph_init=function(){return C.asm.Kh.apply(null,arguments)},C._crypto_sign_ed25519ph_statebytes=function(){return C.asm.Lh.apply(null,arguments)},C._crypto_sign_ed25519ph_update=function(){return C.asm.Mh.apply(null,arguments)},C._crypto_sign_final_create=function(){return C.asm.Nh.apply(null,arguments)},C._crypto_sign_final_verify=function(){return C.asm.Oh.apply(null,arguments)},C._crypto_sign_init=function(){return C.asm.Ph.apply(null,arguments)},C._crypto_sign_keypair=function(){return C.asm.Qh.apply(null,arguments)},C._crypto_sign_messagebytes_max=function(){return C.asm.Rh.apply(null,arguments)},C._crypto_sign_open=function(){return C.asm.Sh.apply(null,arguments)},C._crypto_sign_primitive=function(){return C.asm.Th.apply(null,arguments)},C._crypto_sign_publickeybytes=function(){return C.asm.Uh.apply(null,arguments)},C._crypto_sign_secretkeybytes=function(){return C.asm.Vh.apply(null,arguments)},C._crypto_sign_seed_keypair=function(){return C.asm.Wh.apply(null,arguments)},C._crypto_sign_seedbytes=function(){return C.asm.Xh.apply(null,arguments)},C._crypto_sign_statebytes=function(){return C.asm.Yh.apply(null,arguments)},C._crypto_sign_update=function(){return C.asm.Zh.apply(null,arguments)},C._crypto_sign_verify_detached=function(){return C.asm._h.apply(null,arguments)},C._crypto_stream=function(){return C.asm.$h.apply(null,arguments)},C._crypto_stream_chacha20=function(){return C.asm.ai.apply(null,arguments)},C._crypto_stream_chacha20_ietf=function(){return C.asm.bi.apply(null,arguments)},C._crypto_stream_chacha20_ietf_keybytes=function(){return C.asm.ci.apply(null,arguments)},C._crypto_stream_chacha20_ietf_keygen=function(){return C.asm.di.apply(null,arguments)},C._crypto_stream_chacha20_ietf_messagebytes_max=function(){return C.asm.ei.apply(null,arguments)},C._crypto_stream_chacha20_ietf_noncebytes=function(){return C.asm.fi.apply(null,arguments)},C._crypto_stream_chacha20_ietf_xor=function(){return C.asm.gi.apply(null,arguments)},C._crypto_stream_chacha20_ietf_xor_ic=function(){return C.asm.hi.apply(null,arguments)},C._crypto_stream_chacha20_keybytes=function(){return C.asm.ii.apply(null,arguments)},C._crypto_stream_chacha20_keygen=function(){return C.asm.ji.apply(null,arguments)},C._crypto_stream_chacha20_messagebytes_max=function(){return C.asm.ki.apply(null,arguments)},C._crypto_stream_chacha20_noncebytes=function(){return C.asm.li.apply(null,arguments)},C._crypto_stream_chacha20_xor=function(){return C.asm.mi.apply(null,arguments)},C._crypto_stream_chacha20_xor_ic=function(){return C.asm.ni.apply(null,arguments)},C._crypto_stream_keybytes=function(){return C.asm.oi.apply(null,arguments)},C._crypto_stream_keygen=function(){return C.asm.pi.apply(null,arguments)},C._crypto_stream_messagebytes_max=function(){return C.asm.qi.apply(null,arguments)},C._crypto_stream_noncebytes=function(){return C.asm.ri.apply(null,arguments)},C._crypto_stream_primitive=function(){return C.asm.si.apply(null,arguments)},C._crypto_stream_salsa20=function(){return C.asm.ti.apply(null,arguments)},C._crypto_stream_salsa2012=function(){return C.asm.ui.apply(null,arguments)},C._crypto_stream_salsa2012_keybytes=function(){return C.asm.vi.apply(null,arguments)},C._crypto_stream_salsa2012_keygen=function(){return C.asm.wi.apply(null,arguments)},C._crypto_stream_salsa2012_messagebytes_max=function(){return C.asm.xi.apply(null,arguments)},C._crypto_stream_salsa2012_noncebytes=function(){return C.asm.yi.apply(null,arguments)},C._crypto_stream_salsa2012_xor=function(){return C.asm.zi.apply(null,arguments)},C._crypto_stream_salsa208=function(){return C.asm.Ai.apply(null,arguments)},C._crypto_stream_salsa208_keybytes=function(){return C.asm.Bi.apply(null,arguments)},C._crypto_stream_salsa208_keygen=function(){return C.asm.Ci.apply(null,arguments)},C._crypto_stream_salsa208_messagebytes_max=function(){return C.asm.Di.apply(null,arguments)},C._crypto_stream_salsa208_noncebytes=function(){return C.asm.Ei.apply(null,arguments)},C._crypto_stream_salsa208_xor=function(){return C.asm.Fi.apply(null,arguments)},C._crypto_stream_salsa20_keybytes=function(){return C.asm.Gi.apply(null,arguments)},C._crypto_stream_salsa20_keygen=function(){return C.asm.Hi.apply(null,arguments)},C._crypto_stream_salsa20_messagebytes_max=function(){return C.asm.Ii.apply(null,arguments)},C._crypto_stream_salsa20_noncebytes=function(){return C.asm.Ji.apply(null,arguments)},C._crypto_stream_salsa20_xor=function(){return C.asm.Ki.apply(null,arguments)},C._crypto_stream_salsa20_xor_ic=function(){return C.asm.Li.apply(null,arguments)},C._crypto_stream_xchacha20=function(){return C.asm.Mi.apply(null,arguments)},C._crypto_stream_xchacha20_keybytes=function(){return C.asm.Ni.apply(null,arguments)},C._crypto_stream_xchacha20_keygen=function(){return C.asm.Oi.apply(null,arguments)},C._crypto_stream_xchacha20_messagebytes_max=function(){return C.asm.Pi.apply(null,arguments)},C._crypto_stream_xchacha20_noncebytes=function(){return C.asm.Qi.apply(null,arguments)},C._crypto_stream_xchacha20_xor=function(){return C.asm.Ri.apply(null,arguments)},C._crypto_stream_xchacha20_xor_ic=function(){return C.asm.Si.apply(null,arguments)},C._crypto_stream_xor=function(){return C.asm.Ti.apply(null,arguments)},C._crypto_stream_xsalsa20=function(){return C.asm.Ui.apply(null,arguments)},C._crypto_stream_xsalsa20_keybytes=function(){return C.asm.Vi.apply(null,arguments)},C._crypto_stream_xsalsa20_keygen=function(){return C.asm.Wi.apply(null,arguments)},C._crypto_stream_xsalsa20_messagebytes_max=function(){return C.asm.Xi.apply(null,arguments)},C._crypto_stream_xsalsa20_noncebytes=function(){return C.asm.Yi.apply(null,arguments)},C._crypto_stream_xsalsa20_xor=function(){return C.asm.Zi.apply(null,arguments)},C._crypto_stream_xsalsa20_xor_ic=function(){return C.asm._i.apply(null,arguments)},C._crypto_verify_16=function(){return C.asm.$i.apply(null,arguments)},C._crypto_verify_16_bytes=function(){return C.asm.aj.apply(null,arguments)},C._crypto_verify_32=function(){return C.asm.bj.apply(null,arguments)},C._crypto_verify_32_bytes=function(){return C.asm.cj.apply(null,arguments)},C._crypto_verify_64=function(){return C.asm.dj.apply(null,arguments)},C._crypto_verify_64_bytes=function(){return C.asm.ej.apply(null,arguments)},C._free=function(){return C.asm.fj.apply(null,arguments)},C._malloc=function(){return C.asm.gj.apply(null,arguments)},C._randombytes=function(){return C.asm.hj.apply(null,arguments)},C._randombytes_buf=function(){return C.asm.ij.apply(null,arguments)},C._randombytes_buf_deterministic=function(){return C.asm.jj.apply(null,arguments)},C._randombytes_close=function(){return C.asm.kj.apply(null,arguments)},C._randombytes_implementation_name=function(){return C.asm.lj.apply(null,arguments)},C._randombytes_random=function(){return C.asm.mj.apply(null,arguments)},C._randombytes_seedbytes=function(){return C.asm.nj.apply(null,arguments)},C._randombytes_stir=function(){return C.asm.oj.apply(null,arguments)},C._randombytes_uniform=function(){return C.asm.pj.apply(null,arguments)},C._sodium_base642bin=function(){return C.asm.qj.apply(null,arguments)},C._sodium_base64_encoded_len=function(){return C.asm.rj.apply(null,arguments)},C._sodium_bin2base64=function(){return C.asm.sj.apply(null,arguments)},C._sodium_bin2hex=function(){return C.asm.tj.apply(null,arguments)},C._sodium_hex2bin=function(){return C.asm.uj.apply(null,arguments)},C._sodium_init=function(){return C.asm.vj.apply(null,arguments)},C._sodium_library_minimal=function(){return C.asm.wj.apply(null,arguments)},C._sodium_library_version_major=function(){return C.asm.xj.apply(null,arguments)},C._sodium_library_version_minor=function(){return C.asm.yj.apply(null,arguments)},C._sodium_pad=function(){return C.asm.zj.apply(null,arguments)},C._sodium_unpad=function(){return C.asm.Aj.apply(null,arguments)},C._sodium_version_string=function(){return C.asm.Bj.apply(null,arguments)},C.asm=cA,C.setValue=function(A,I,g,B){switch("*"===(g=g||"i8").charAt(g.length-1)&&(g="i32"),g){case"i1":case"i8":F[A>>0]=I;break;case"i16":b[A>>1]=I;break;case"i32":d[A>>2]=I;break;case"i64":AA=[I>>>0,($=I,+P($)>=1?$>0?(0|X(+q($/4294967296),4294967295))>>>0:~~+K(($-+(~~$>>>0))/4294967296)>>>0:0)],d[A>>2]=AA[0],d[A+4>>2]=AA[1];break;case"float":H[A>>2]=I;break;case"double":G[A>>3]=I;break;default:W("invalid type for setValue: "+g)}},C.getValue=function(A,I,g){switch("*"===(I=I||"i8").charAt(I.length-1)&&(I="i32"),I){case"i1":case"i8":return F[A>>0];case"i16":return b[A>>1];case"i32":case"i64":return d[A>>2];case"float":return H[A>>2];case"double":return G[A>>3];default:W("invalid type for getValue: "+I)}return null},C.UTF8ToString=x,V=function A(){eA||iA(),eA||(V=A)},C.run=iA,C.preInit)for("function"==typeof C.preInit&&(C.preInit=[C.preInit]);C.preInit.length>0;)C.preInit.pop()();iA()}).catch(function(){B.useBackupModule()}),"object"==typeof process&&"function"==typeof process.removeAllListeners&&(process.removeAllListeners("uncaughtException"),process.removeAllListeners("unhandledRejection")),I}"function"==typeof define&&define.amd?define(["exports"],I):"object"==typeof exports&&"string"!=typeof exports.nodeName?I(exports):A.libsodium=I(A.libsodium_mod||(A.commonJsStrict={}))}(this);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/libsodium-sumo/dist/modules-sumo")

},{"_process":148,"buffer":52,"crypto":63,"fs":23,"path":141}],128:[function(require,module,exports){
!function(e){function t(e,t){"use strict";var r,a="uint8array",_=t.ready.then(function(){function a(){if(0!==r._sodium_init())throw new Error("libsodium was not correctly initialized.");for(var t=["crypto_aead_chacha20poly1305_decrypt","crypto_aead_chacha20poly1305_decrypt_detached","crypto_aead_chacha20poly1305_encrypt","crypto_aead_chacha20poly1305_encrypt_detached","crypto_aead_chacha20poly1305_ietf_decrypt","crypto_aead_chacha20poly1305_ietf_decrypt_detached","crypto_aead_chacha20poly1305_ietf_encrypt","crypto_aead_chacha20poly1305_ietf_encrypt_detached","crypto_aead_chacha20poly1305_ietf_keygen","crypto_aead_chacha20poly1305_keygen","crypto_aead_xchacha20poly1305_ietf_decrypt","crypto_aead_xchacha20poly1305_ietf_decrypt_detached","crypto_aead_xchacha20poly1305_ietf_encrypt","crypto_aead_xchacha20poly1305_ietf_encrypt_detached","crypto_aead_xchacha20poly1305_ietf_keygen","crypto_auth","crypto_auth_hmacsha256","crypto_auth_hmacsha256_keygen","crypto_auth_hmacsha256_verify","crypto_auth_hmacsha512","crypto_auth_hmacsha512_keygen","crypto_auth_hmacsha512_verify","crypto_auth_keygen","crypto_auth_verify","crypto_box_beforenm","crypto_box_curve25519xchacha20poly1305_keypair","crypto_box_curve25519xchacha20poly1305_seal","crypto_box_curve25519xchacha20poly1305_seal_open","crypto_box_detached","crypto_box_easy","crypto_box_easy_afternm","crypto_box_keypair","crypto_box_open_detached","crypto_box_open_easy","crypto_box_open_easy_afternm","crypto_box_seal","crypto_box_seal_open","crypto_box_seed_keypair","crypto_core_ristretto255_add","crypto_core_ristretto255_from_hash","crypto_core_ristretto255_is_valid_point","crypto_core_ristretto255_random","crypto_core_ristretto255_scalar_add","crypto_core_ristretto255_scalar_complement","crypto_core_ristretto255_scalar_invert","crypto_core_ristretto255_scalar_mul","crypto_core_ristretto255_scalar_negate","crypto_core_ristretto255_scalar_random","crypto_core_ristretto255_scalar_reduce","crypto_core_ristretto255_scalar_sub","crypto_core_ristretto255_sub","crypto_generichash","crypto_generichash_blake2b_salt_personal","crypto_generichash_final","crypto_generichash_init","crypto_generichash_keygen","crypto_generichash_update","crypto_hash","crypto_hash_sha256","crypto_hash_sha512","crypto_kdf_derive_from_key","crypto_kdf_keygen","crypto_kx_client_session_keys","crypto_kx_keypair","crypto_kx_seed_keypair","crypto_kx_server_session_keys","crypto_onetimeauth","crypto_onetimeauth_final","crypto_onetimeauth_init","crypto_onetimeauth_keygen","crypto_onetimeauth_update","crypto_onetimeauth_verify","crypto_pwhash","crypto_pwhash_scryptsalsa208sha256","crypto_pwhash_scryptsalsa208sha256_ll","crypto_pwhash_scryptsalsa208sha256_str","crypto_pwhash_scryptsalsa208sha256_str_verify","crypto_pwhash_str","crypto_pwhash_str_verify","crypto_scalarmult","crypto_scalarmult_base","crypto_scalarmult_ristretto255","crypto_scalarmult_ristretto255_base","crypto_secretbox_detached","crypto_secretbox_easy","crypto_secretbox_keygen","crypto_secretbox_open_detached","crypto_secretbox_open_easy","crypto_secretstream_xchacha20poly1305_init_pull","crypto_secretstream_xchacha20poly1305_init_push","crypto_secretstream_xchacha20poly1305_keygen","crypto_secretstream_xchacha20poly1305_pull","crypto_secretstream_xchacha20poly1305_push","crypto_secretstream_xchacha20poly1305_rekey","crypto_shorthash","crypto_shorthash_keygen","crypto_shorthash_siphashx24","crypto_sign","crypto_sign_detached","crypto_sign_ed25519_pk_to_curve25519","crypto_sign_ed25519_sk_to_curve25519","crypto_sign_ed25519_sk_to_pk","crypto_sign_ed25519_sk_to_seed","crypto_sign_final_create","crypto_sign_final_verify","crypto_sign_init","crypto_sign_keypair","crypto_sign_open","crypto_sign_seed_keypair","crypto_sign_update","crypto_sign_verify_detached","crypto_stream_chacha20","crypto_stream_chacha20_ietf_xor","crypto_stream_chacha20_ietf_xor_ic","crypto_stream_chacha20_keygen","crypto_stream_chacha20_xor","crypto_stream_chacha20_xor_ic","crypto_stream_keygen","crypto_stream_xchacha20_keygen","crypto_stream_xchacha20_xor","crypto_stream_xchacha20_xor_ic","randombytes_buf","randombytes_buf_deterministic","randombytes_close","randombytes_random","randombytes_set_implementation","randombytes_stir","randombytes_uniform","sodium_version_string"],a=[x,E,w,S,T,Y,A,B,K,I,M,L,N,U,O,R,P,C,G,D,X,V,F,H,z,j,q,W,J,Q,Z,$,ee,te,re,ae,_e,ne,se,ce,he,oe,pe,ye,ie,le,ue,ve,de,ge,be,fe,me,ke,xe,Ee,we,Se,Te,Ye,Ae,Be,Ke,Ie,Me,Le,Ne,Ue,Oe,Re,Pe,Ce,Ge,De,Xe,Ve,Fe,He,ze,je,qe,We,Je,Qe,Ze,$e,et,tt,rt,at,_t,nt,st,ct,ht,ot,pt,yt,it,lt,ut,vt,dt,gt,bt,ft,mt,kt,xt,Et,wt,St,Tt,Yt,At,Bt,Kt,It,Mt,Lt,Nt,Ut,Ot,Rt,Pt,Ct,Gt,Dt,Xt],_=0;_<a.length;_++)"function"==typeof r["_"+t[_]]&&(e[t[_]]=a[_]);var n=["SODIUM_LIBRARY_VERSION_MAJOR","SODIUM_LIBRARY_VERSION_MINOR","crypto_aead_chacha20poly1305_ABYTES","crypto_aead_chacha20poly1305_KEYBYTES","crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_NPUBBYTES","crypto_aead_chacha20poly1305_NSECBYTES","crypto_aead_chacha20poly1305_ietf_ABYTES","crypto_aead_chacha20poly1305_ietf_KEYBYTES","crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_ietf_NPUBBYTES","crypto_aead_chacha20poly1305_ietf_NSECBYTES","crypto_aead_xchacha20poly1305_ietf_ABYTES","crypto_aead_xchacha20poly1305_ietf_KEYBYTES","crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX","crypto_aead_xchacha20poly1305_ietf_NPUBBYTES","crypto_aead_xchacha20poly1305_ietf_NSECBYTES","crypto_auth_BYTES","crypto_auth_KEYBYTES","crypto_auth_hmacsha256_BYTES","crypto_auth_hmacsha256_KEYBYTES","crypto_auth_hmacsha512_BYTES","crypto_auth_hmacsha512_KEYBYTES","crypto_box_BEFORENMBYTES","crypto_box_MACBYTES","crypto_box_MESSAGEBYTES_MAX","crypto_box_NONCEBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SEALBYTES","crypto_box_SECRETKEYBYTES","crypto_box_SEEDBYTES","crypto_box_curve25519xchacha20poly1305_NONCEBYTES","crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES","crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES","crypto_core_hchacha20_CONSTBYTES","crypto_core_hchacha20_INPUTBYTES","crypto_core_hchacha20_KEYBYTES","crypto_core_hchacha20_OUTPUTBYTES","crypto_core_ristretto255_BYTES","crypto_core_ristretto255_HASHBYTES","crypto_core_ristretto255_NONREDUCEDSCALARBYTES","crypto_core_ristretto255_SCALARBYTES","crypto_generichash_BYTES","crypto_generichash_BYTES_MAX","crypto_generichash_BYTES_MIN","crypto_generichash_KEYBYTES","crypto_generichash_KEYBYTES_MAX","crypto_generichash_KEYBYTES_MIN","crypto_generichash_blake2b_BYTES","crypto_generichash_blake2b_BYTES_MAX","crypto_generichash_blake2b_BYTES_MIN","crypto_generichash_blake2b_KEYBYTES","crypto_generichash_blake2b_KEYBYTES_MAX","crypto_generichash_blake2b_KEYBYTES_MIN","crypto_generichash_blake2b_PERSONALBYTES","crypto_generichash_blake2b_SALTBYTES","crypto_hash_BYTES","crypto_hash_sha256_BYTES","crypto_hash_sha512_BYTES","crypto_kdf_BYTES_MAX","crypto_kdf_BYTES_MIN","crypto_kdf_CONTEXTBYTES","crypto_kdf_KEYBYTES","crypto_kx_PUBLICKEYBYTES","crypto_kx_SECRETKEYBYTES","crypto_kx_SEEDBYTES","crypto_kx_SESSIONKEYBYTES","crypto_onetimeauth_BYTES","crypto_onetimeauth_KEYBYTES","crypto_pwhash_ALG_ARGON2I13","crypto_pwhash_ALG_ARGON2ID13","crypto_pwhash_ALG_DEFAULT","crypto_pwhash_BYTES_MAX","crypto_pwhash_BYTES_MIN","crypto_pwhash_MEMLIMIT_INTERACTIVE","crypto_pwhash_MEMLIMIT_MAX","crypto_pwhash_MEMLIMIT_MIN","crypto_pwhash_MEMLIMIT_MODERATE","crypto_pwhash_MEMLIMIT_SENSITIVE","crypto_pwhash_OPSLIMIT_INTERACTIVE","crypto_pwhash_OPSLIMIT_MAX","crypto_pwhash_OPSLIMIT_MIN","crypto_pwhash_OPSLIMIT_MODERATE","crypto_pwhash_OPSLIMIT_SENSITIVE","crypto_pwhash_PASSWD_MAX","crypto_pwhash_PASSWD_MIN","crypto_pwhash_SALTBYTES","crypto_pwhash_STRBYTES","crypto_pwhash_STR_VERIFY","crypto_pwhash_scryptsalsa208sha256_BYTES_MAX","crypto_pwhash_scryptsalsa208sha256_BYTES_MIN","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE","crypto_pwhash_scryptsalsa208sha256_SALTBYTES","crypto_pwhash_scryptsalsa208sha256_STRBYTES","crypto_pwhash_scryptsalsa208sha256_STR_VERIFY","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_scalarmult_ristretto255_BYTES","crypto_scalarmult_ristretto255_SCALARBYTES","crypto_secretbox_KEYBYTES","crypto_secretbox_MACBYTES","crypto_secretbox_MESSAGEBYTES_MAX","crypto_secretbox_NONCEBYTES","crypto_secretstream_xchacha20poly1305_ABYTES","crypto_secretstream_xchacha20poly1305_HEADERBYTES","crypto_secretstream_xchacha20poly1305_KEYBYTES","crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX","crypto_secretstream_xchacha20poly1305_MESSAGESBYTES_MAX","crypto_secretstream_xchacha20poly1305_NPUBBYTES","crypto_secretstream_xchacha20poly1305_TAG_FINAL","crypto_secretstream_xchacha20poly1305_TAG_MESSAGE","crypto_secretstream_xchacha20poly1305_TAG_PUSH","crypto_secretstream_xchacha20poly1305_TAG_REKEY","crypto_shorthash_BYTES","crypto_shorthash_KEYBYTES","crypto_shorthash_siphashx24_BYTES","crypto_shorthash_siphashx24_KEYBYTES","crypto_sign_BYTES","crypto_sign_MESSAGEBYTES_MAX","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","crypto_sign_SEEDBYTES","crypto_stream_KEYBYTES","crypto_stream_MESSAGEBYTES_MAX","crypto_stream_NONCEBYTES","crypto_stream_chacha20_KEYBYTES","crypto_stream_chacha20_NONCEBYTES","crypto_stream_chacha20_ietf_KEYBYTES","crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX","crypto_stream_chacha20_ietf_NONCEBYTES","crypto_stream_xchacha20_KEYBYTES","crypto_stream_xchacha20_MESSAGEBYTES_MAX","crypto_stream_xchacha20_NONCEBYTES","randombytes_SEEDBYTES"];for(_=0;_<n.length;_++)"function"==typeof(c=r["_"+n[_].toLowerCase()])&&(e[n[_]]=c());var s=["SODIUM_VERSION_STRING","crypto_pwhash_STRPREFIX","crypto_pwhash_scryptsalsa208sha256_STRPREFIX"];for(_=0;_<s.length;_++){var c;"function"==typeof(c=r["_"+s[_].toLowerCase()])&&(e[s[_]]=r.UTF8ToString(c()))}}r=t;try{a();var _=new Uint8Array([98,97,108,108,115]),n=e.randombytes_buf(e.crypto_secretbox_NONCEBYTES),s=e.randombytes_buf(e.crypto_secretbox_KEYBYTES),c=e.crypto_secretbox_easy(_,n,s),h=e.crypto_secretbox_open_easy(c,n,s);if(e.memcmp(_,h))return}catch(e){if(null==r.useBackupModule)throw new Error("Both wasm and asm failed to load"+e)}r.useBackupModule(),a()});function n(e){if("function"==typeof TextEncoder)return(new TextEncoder).encode(e);e=unescape(encodeURIComponent(e));for(var t=new Uint8Array(e.length),r=0,a=e.length;r<a;r++)t[r]=e.charCodeAt(r);return t}function s(e){if("function"==typeof TextDecoder)return new TextDecoder("utf-8",{fatal:!0}).decode(e);var t=Math.ceil(e.length/8192);if(t<=1)try{return decodeURIComponent(escape(String.fromCharCode.apply(null,e)))}catch(e){throw new TypeError("The encoded data was not valid.")}for(var r="",a=0,_=0;_<t;_++){var n=Array.prototype.slice.call(e,8192*_+a,8192*(_+1)+a);if(0!=n.length){var c,h=n.length,o=0;do{var p=n[--h];p>=240?(o=4,c=!0):p>=224?(o=3,c=!0):p>=192?(o=2,c=!0):p<128&&(o=1,c=!0)}while(!c);for(var y=o-(n.length-h),i=0;i<y;i++)a--,n.pop();r+=s(n)}}return r}function c(e){e=k(null,e,"input");for(var t,r,a,_="",n=0;n<e.length;n++)a=87+(r=15&e[n])+(r-10>>8&-39)<<8|87+(t=e[n]>>>4)+(t-10>>8&-39),_+=String.fromCharCode(255&a)+String.fromCharCode(a>>>8);return _}var h={ORIGINAL:1,ORIGINAL_NO_PADDING:3,URLSAFE:5,URLSAFE_NO_PADDING:7};function o(e){if(null==e)return h.URLSAFE_NO_PADDING;if(e!==h.ORIGINAL&&e!==h.ORIGINAL_NO_PADDING&&e!==h.URLSAFE&&e!=h.URLSAFE_NO_PADDING)throw new Error("unsupported base64 variant");return e}function p(e,t){t=o(t),e=k(_,e,"input");var a,_=[],n=0|Math.floor(e.length/3),c=e.length-3*n,h=4*n+(0!==c?0==(2&t)?4:2+(c>>>1):0),p=new u(h+1),y=v(e);return _.push(y),_.push(p.address),0===r._sodium_bin2base64(p.address,p.length,y,e.length,t)&&b(_,"conversion failed"),p.length=h,a=s(p.to_Uint8Array()),g(_),a}function y(e,t){var r=t||a;if(!i(r))throw new Error(r+" output format is not available");if(e instanceof u){if("uint8array"===r)return e.to_Uint8Array();if("text"===r)return s(e.to_Uint8Array());if("hex"===r)return c(e.to_Uint8Array());if("base64"===r)return p(e.to_Uint8Array(),h.URLSAFE_NO_PADDING);throw new Error('What is output format "'+r+'"?')}if("object"==typeof e){for(var _=Object.keys(e),n={},o=0;o<_.length;o++)n[_[o]]=y(e[_[o]],r);return n}if("string"==typeof e)return e;throw new TypeError("Cannot format output")}function i(e){for(var t=["uint8array","text","hex","base64"],r=0;r<t.length;r++)if(t[r]===e)return!0;return!1}function l(e){if(e){if("string"!=typeof e)throw new TypeError("When defined, the output format must be a string");if(!i(e))throw new Error(e+" is not a supported output format")}}function u(e){this.length=e,this.address=d(e)}function v(e){var t=d(e.length);return r.HEAPU8.set(e,t),t}function d(e){var t=r._malloc(e);if(0===t)throw{message:"_malloc() failed",length:e};return t}function g(e){if(e)for(var t=0;t<e.length;t++)a=e[t],r._free(a);var a}function b(e,t){throw g(e),new Error(t)}function f(e,t){throw g(e),new TypeError(t)}function m(e,t,r){null==t&&f(e,r+" cannot be null or undefined")}function k(e,t,r){return m(e,t,r),t instanceof Uint8Array?t:"string"==typeof t?n(t):void f(e,"unsupported input type for "+r)}function x(e,t,a,_,n,s){var c=[];l(s);var h=null;null!=e&&(h=v(e=k(c,e,"secret_nonce")),e.length,c.push(h)),t=k(c,t,"ciphertext");var o,p=r._crypto_aead_chacha20poly1305_abytes(),i=t.length;i<p&&f(c,"ciphertext is too short"),o=v(t),c.push(o);var d=null,m=0;null!=a&&(d=v(a=k(c,a,"additional_data")),m=a.length,c.push(d)),_=k(c,_,"public_nonce");var x,E=0|r._crypto_aead_chacha20poly1305_npubbytes();_.length!==E&&f(c,"invalid public_nonce length"),x=v(_),c.push(x),n=k(c,n,"key");var w,S=0|r._crypto_aead_chacha20poly1305_keybytes();n.length!==S&&f(c,"invalid key length"),w=v(n),c.push(w);var T=new u(i-r._crypto_aead_chacha20poly1305_abytes()|0),Y=T.address;if(c.push(Y),0===r._crypto_aead_chacha20poly1305_decrypt(Y,null,h,o,i,0,d,m,0,x,w)){var A=y(T,s);return g(c),A}b(c,"ciphertext cannot be decrypted using that key")}function E(e,t,a,_,n,s,c){var h=[];l(c);var o=null;null!=e&&(o=v(e=k(h,e,"secret_nonce")),e.length,h.push(o));var p=v(t=k(h,t,"ciphertext")),i=t.length;h.push(p),a=k(h,a,"mac");var d,m=0|r._crypto_box_macbytes();a.length!==m&&f(h,"invalid mac length"),d=v(a),h.push(d);var x=null,E=0;null!=_&&(x=v(_=k(h,_,"additional_data")),E=_.length,h.push(x)),n=k(h,n,"public_nonce");var w,S=0|r._crypto_aead_chacha20poly1305_npubbytes();n.length!==S&&f(h,"invalid public_nonce length"),w=v(n),h.push(w),s=k(h,s,"key");var T,Y=0|r._crypto_aead_chacha20poly1305_keybytes();s.length!==Y&&f(h,"invalid key length"),T=v(s),h.push(T);var A=new u(0|i),B=A.address;if(h.push(B),0===r._crypto_aead_chacha20poly1305_decrypt_detached(B,o,p,i,0,d,x,E,0,w,T)){var K=y(A,c);return g(h),K}b(h,"ciphertext cannot be decrypted using that key")}function w(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_chacha20poly1305_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_chacha20poly1305_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(o+r._crypto_aead_chacha20poly1305_abytes()|0),T=S.address;if(c.push(T),0===r._crypto_aead_chacha20poly1305_encrypt(T,null,h,o,0,p,i,0,d,m,E)){var Y=y(S,s);return g(c),Y}b(c,"invalid usage")}function S(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_chacha20poly1305_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_chacha20poly1305_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(0|o),T=S.address;c.push(T);var Y=new u(0|r._crypto_aead_chacha20poly1305_abytes()),A=Y.address;if(c.push(A),0===r._crypto_aead_chacha20poly1305_encrypt_detached(T,A,null,h,o,0,p,i,0,d,m,E)){var B=y({ciphertext:S,mac:Y},s);return g(c),B}b(c,"invalid usage")}function T(e,t,a,_,n,s){var c=[];l(s);var h=null;null!=e&&(h=v(e=k(c,e,"secret_nonce")),e.length,c.push(h)),t=k(c,t,"ciphertext");var o,p=r._crypto_aead_chacha20poly1305_ietf_abytes(),i=t.length;i<p&&f(c,"ciphertext is too short"),o=v(t),c.push(o);var d=null,m=0;null!=a&&(d=v(a=k(c,a,"additional_data")),m=a.length,c.push(d)),_=k(c,_,"public_nonce");var x,E=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==E&&f(c,"invalid public_nonce length"),x=v(_),c.push(x),n=k(c,n,"key");var w,S=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==S&&f(c,"invalid key length"),w=v(n),c.push(w);var T=new u(i-r._crypto_aead_chacha20poly1305_ietf_abytes()|0),Y=T.address;if(c.push(Y),0===r._crypto_aead_chacha20poly1305_ietf_decrypt(Y,null,h,o,i,0,d,m,0,x,w)){var A=y(T,s);return g(c),A}b(c,"ciphertext cannot be decrypted using that key")}function Y(e,t,a,_,n,s,c){var h=[];l(c);var o=null;null!=e&&(o=v(e=k(h,e,"secret_nonce")),e.length,h.push(o));var p=v(t=k(h,t,"ciphertext")),i=t.length;h.push(p),a=k(h,a,"mac");var d,m=0|r._crypto_box_macbytes();a.length!==m&&f(h,"invalid mac length"),d=v(a),h.push(d);var x=null,E=0;null!=_&&(x=v(_=k(h,_,"additional_data")),E=_.length,h.push(x)),n=k(h,n,"public_nonce");var w,S=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();n.length!==S&&f(h,"invalid public_nonce length"),w=v(n),h.push(w),s=k(h,s,"key");var T,Y=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();s.length!==Y&&f(h,"invalid key length"),T=v(s),h.push(T);var A=new u(0|i),B=A.address;if(h.push(B),0===r._crypto_aead_chacha20poly1305_ietf_decrypt_detached(B,o,p,i,0,d,x,E,0,w,T)){var K=y(A,c);return g(h),K}b(h,"ciphertext cannot be decrypted using that key")}function A(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(o+r._crypto_aead_chacha20poly1305_ietf_abytes()|0),T=S.address;if(c.push(T),0===r._crypto_aead_chacha20poly1305_ietf_encrypt(T,null,h,o,0,p,i,0,d,m,E)){var Y=y(S,s);return g(c),Y}b(c,"invalid usage")}function B(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(0|o),T=S.address;c.push(T);var Y=new u(0|r._crypto_aead_chacha20poly1305_ietf_abytes()),A=Y.address;if(c.push(A),0===r._crypto_aead_chacha20poly1305_ietf_encrypt_detached(T,A,null,h,o,0,p,i,0,d,m,E)){var B=y({ciphertext:S,mac:Y},s);return g(c),B}b(c,"invalid usage")}function K(e){var t=[];l(e);var a=new u(0|r._crypto_aead_chacha20poly1305_ietf_keybytes()),_=a.address;t.push(_),r._crypto_aead_chacha20poly1305_ietf_keygen(_);var n=y(a,e);return g(t),n}function I(e){var t=[];l(e);var a=new u(0|r._crypto_aead_chacha20poly1305_keybytes()),_=a.address;t.push(_),r._crypto_aead_chacha20poly1305_keygen(_);var n=y(a,e);return g(t),n}function M(e,t,a,_,n,s){var c=[];l(s);var h=null;null!=e&&(h=v(e=k(c,e,"secret_nonce")),e.length,c.push(h)),t=k(c,t,"ciphertext");var o,p=r._crypto_aead_xchacha20poly1305_ietf_abytes(),i=t.length;i<p&&f(c,"ciphertext is too short"),o=v(t),c.push(o);var d=null,m=0;null!=a&&(d=v(a=k(c,a,"additional_data")),m=a.length,c.push(d)),_=k(c,_,"public_nonce");var x,E=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==E&&f(c,"invalid public_nonce length"),x=v(_),c.push(x),n=k(c,n,"key");var w,S=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==S&&f(c,"invalid key length"),w=v(n),c.push(w);var T=new u(i-r._crypto_aead_xchacha20poly1305_ietf_abytes()|0),Y=T.address;if(c.push(Y),0===r._crypto_aead_xchacha20poly1305_ietf_decrypt(Y,null,h,o,i,0,d,m,0,x,w)){var A=y(T,s);return g(c),A}b(c,"ciphertext cannot be decrypted using that key")}function L(e,t,a,_,n,s,c){var h=[];l(c);var o=null;null!=e&&(o=v(e=k(h,e,"secret_nonce")),e.length,h.push(o));var p=v(t=k(h,t,"ciphertext")),i=t.length;h.push(p),a=k(h,a,"mac");var d,m=0|r._crypto_box_macbytes();a.length!==m&&f(h,"invalid mac length"),d=v(a),h.push(d);var x=null,E=0;null!=_&&(x=v(_=k(h,_,"additional_data")),E=_.length,h.push(x)),n=k(h,n,"public_nonce");var w,S=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();n.length!==S&&f(h,"invalid public_nonce length"),w=v(n),h.push(w),s=k(h,s,"key");var T,Y=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();s.length!==Y&&f(h,"invalid key length"),T=v(s),h.push(T);var A=new u(0|i),B=A.address;if(h.push(B),0===r._crypto_aead_xchacha20poly1305_ietf_decrypt_detached(B,o,p,i,0,d,x,E,0,w,T)){var K=y(A,c);return g(h),K}b(h,"ciphertext cannot be decrypted using that key")}function N(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(o+r._crypto_aead_xchacha20poly1305_ietf_abytes()|0),T=S.address;if(c.push(T),0===r._crypto_aead_xchacha20poly1305_ietf_encrypt(T,null,h,o,0,p,i,0,d,m,E)){var Y=y(S,s);return g(c),Y}b(c,"invalid usage")}function U(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"message")),o=e.length;c.push(h);var p=null,i=0;null!=t&&(p=v(t=k(c,t,"additional_data")),i=t.length,c.push(p));var d=null;null!=a&&(d=v(a=k(c,a,"secret_nonce")),a.length,c.push(d)),_=k(c,_,"public_nonce");var m,x=0|r._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=v(_),c.push(m),n=k(c,n,"key");var E,w=0|r._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==w&&f(c,"invalid key length"),E=v(n),c.push(E);var S=new u(0|o),T=S.address;c.push(T);var Y=new u(0|r._crypto_aead_xchacha20poly1305_ietf_abytes()),A=Y.address;if(c.push(A),0===r._crypto_aead_xchacha20poly1305_ietf_encrypt_detached(T,A,null,h,o,0,p,i,0,d,m,E)){var B=y({ciphertext:S,mac:Y},s);return g(c),B}b(c,"invalid usage")}function O(e){var t=[];l(e);var a=new u(0|r._crypto_aead_xchacha20poly1305_ietf_keybytes()),_=a.address;t.push(_),r._crypto_aead_xchacha20poly1305_ietf_keygen(_);var n=y(a,e);return g(t),n}function R(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_auth_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_auth_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_auth(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function P(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_auth_hmacsha256_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_auth_hmacsha256_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_auth_hmacsha256(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function C(e){var t=[];l(e);var a=new u(0|r._crypto_auth_hmacsha256_keybytes()),_=a.address;t.push(_),r._crypto_auth_hmacsha256_keygen(_);var n=y(a,e);return g(t),n}function G(e,t,a){var _=[];e=k(_,e,"tag");var n,s=0|r._crypto_auth_hmacsha256_bytes();e.length!==s&&f(_,"invalid tag length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"key");var o,p=0|r._crypto_auth_hmacsha256_keybytes();a.length!==p&&f(_,"invalid key length"),o=v(a),_.push(o);var y=0==(0|r._crypto_auth_hmacsha256_verify(n,c,h,0,o));return g(_),y}function D(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_auth_hmacsha512_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_auth_hmacsha512_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_auth_hmacsha512(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function X(e){var t=[];l(e);var a=new u(0|r._crypto_auth_hmacsha512_keybytes()),_=a.address;t.push(_),r._crypto_auth_hmacsha512_keygen(_);var n=y(a,e);return g(t),n}function V(e,t,a){var _=[];e=k(_,e,"tag");var n,s=0|r._crypto_auth_hmacsha512_bytes();e.length!==s&&f(_,"invalid tag length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"key");var o,p=0|r._crypto_auth_hmacsha512_keybytes();a.length!==p&&f(_,"invalid key length"),o=v(a),_.push(o);var y=0==(0|r._crypto_auth_hmacsha512_verify(n,c,h,0,o));return g(_),y}function F(e){var t=[];l(e);var a=new u(0|r._crypto_auth_keybytes()),_=a.address;t.push(_),r._crypto_auth_keygen(_);var n=y(a,e);return g(t),n}function H(e,t,a){var _=[];e=k(_,e,"tag");var n,s=0|r._crypto_auth_bytes();e.length!==s&&f(_,"invalid tag length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"key");var o,p=0|r._crypto_auth_keybytes();a.length!==p&&f(_,"invalid key length"),o=v(a),_.push(o);var y=0==(0|r._crypto_auth_verify(n,c,h,0,o));return g(_),y}function z(e,t,a){var _=[];l(a),e=k(_,e,"publicKey");var n,s=0|r._crypto_box_publickeybytes();e.length!==s&&f(_,"invalid publicKey length"),n=v(e),_.push(n),t=k(_,t,"privateKey");var c,h=0|r._crypto_box_secretkeybytes();t.length!==h&&f(_,"invalid privateKey length"),c=v(t),_.push(c);var o=new u(0|r._crypto_box_beforenmbytes()),p=o.address;if(_.push(p),0==(0|r._crypto_box_beforenm(p,n,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function j(e){var t=[];l(e);var a=new u(0|r._crypto_box_curve25519xchacha20poly1305_publickeybytes()),_=a.address;t.push(_);var n=new u(0|r._crypto_box_curve25519xchacha20poly1305_secretkeybytes()),s=n.address;t.push(s),r._crypto_box_curve25519xchacha20poly1305_keypair(_,s);var c=y({publicKey:a,privateKey:n,keyType:"curve25519"},e);return g(t),c}function q(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"publicKey");var c,h=0|r._crypto_box_curve25519xchacha20poly1305_publickeybytes();t.length!==h&&f(_,"invalid publicKey length"),c=v(t),_.push(c);var o=new u(s+r._crypto_box_curve25519xchacha20poly1305_sealbytes()|0),p=o.address;_.push(p),r._crypto_box_curve25519xchacha20poly1305_seal(p,n,s,0,c);var i=y(o,a);return g(_),i}function W(e,t,a,_){var n=[];l(_),e=k(n,e,"ciphertext");var s,c=r._crypto_box_curve25519xchacha20poly1305_sealbytes(),h=e.length;h<c&&f(n,"ciphertext is too short"),s=v(e),n.push(s),t=k(n,t,"publicKey");var o,p=0|r._crypto_box_curve25519xchacha20poly1305_publickeybytes();t.length!==p&&f(n,"invalid publicKey length"),o=v(t),n.push(o),a=k(n,a,"secretKey");var i,d=0|r._crypto_box_curve25519xchacha20poly1305_secretkeybytes();a.length!==d&&f(n,"invalid secretKey length"),i=v(a),n.push(i);var b=new u(h-r._crypto_box_curve25519xchacha20poly1305_sealbytes()|0),m=b.address;n.push(m),r._crypto_box_curve25519xchacha20poly1305_seal_open(m,s,h,0,o,i);var x=y(b,_);return g(n),x}function J(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_box_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),a=k(s,a,"publicKey");var i,d=0|r._crypto_box_publickeybytes();a.length!==d&&f(s,"invalid publicKey length"),i=v(a),s.push(i),_=k(s,_,"privateKey");var m,x=0|r._crypto_box_secretkeybytes();_.length!==x&&f(s,"invalid privateKey length"),m=v(_),s.push(m);var E=new u(0|h),w=E.address;s.push(w);var S=new u(0|r._crypto_box_macbytes()),T=S.address;if(s.push(T),0==(0|r._crypto_box_detached(w,T,c,h,0,o,i,m))){var Y=y({ciphertext:E,mac:S},n);return g(s),Y}b(s,"invalid usage")}function Q(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_box_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),a=k(s,a,"publicKey");var i,d=0|r._crypto_box_publickeybytes();a.length!==d&&f(s,"invalid publicKey length"),i=v(a),s.push(i),_=k(s,_,"privateKey");var m,x=0|r._crypto_box_secretkeybytes();_.length!==x&&f(s,"invalid privateKey length"),m=v(_),s.push(m);var E=new u(h+r._crypto_box_macbytes()|0),w=E.address;if(s.push(w),0==(0|r._crypto_box_easy(w,c,h,0,o,i,m))){var S=y(E,n);return g(s),S}b(s,"invalid usage")}function Z(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_box_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"sharedKey");var p,i=0|r._crypto_box_beforenmbytes();a.length!==i&&f(n,"invalid sharedKey length"),p=v(a),n.push(p);var d=new u(c+r._crypto_box_macbytes()|0),m=d.address;if(n.push(m),0==(0|r._crypto_box_easy_afternm(m,s,c,0,h,p))){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function $(e){var t=[];l(e);var a=new u(0|r._crypto_box_publickeybytes()),_=a.address;t.push(_);var n=new u(0|r._crypto_box_secretkeybytes()),s=n.address;if(t.push(s),0==(0|r._crypto_box_keypair(_,s))){var c={publicKey:y(a,e),privateKey:y(n,e),keyType:"x25519"};return g(t),c}b(t,"internal error")}function ee(e,t,a,_,n,s){var c=[];l(s);var h=v(e=k(c,e,"ciphertext")),o=e.length;c.push(h),t=k(c,t,"mac");var p,i=0|r._crypto_box_macbytes();t.length!==i&&f(c,"invalid mac length"),p=v(t),c.push(p),a=k(c,a,"nonce");var d,m=0|r._crypto_box_noncebytes();a.length!==m&&f(c,"invalid nonce length"),d=v(a),c.push(d),_=k(c,_,"publicKey");var x,E=0|r._crypto_box_publickeybytes();_.length!==E&&f(c,"invalid publicKey length"),x=v(_),c.push(x),n=k(c,n,"privateKey");var w,S=0|r._crypto_box_secretkeybytes();n.length!==S&&f(c,"invalid privateKey length"),w=v(n),c.push(w);var T=new u(0|o),Y=T.address;if(c.push(Y),0==(0|r._crypto_box_open_detached(Y,h,p,o,0,d,x,w))){var A=y(T,s);return g(c),A}b(c,"incorrect key pair for the given ciphertext")}function te(e,t,a,_,n){var s=[];l(n),e=k(s,e,"ciphertext");var c,h=r._crypto_box_macbytes(),o=e.length;o<h&&f(s,"ciphertext is too short"),c=v(e),s.push(c),t=k(s,t,"nonce");var p,i=0|r._crypto_box_noncebytes();t.length!==i&&f(s,"invalid nonce length"),p=v(t),s.push(p),a=k(s,a,"publicKey");var d,m=0|r._crypto_box_publickeybytes();a.length!==m&&f(s,"invalid publicKey length"),d=v(a),s.push(d),_=k(s,_,"privateKey");var x,E=0|r._crypto_box_secretkeybytes();_.length!==E&&f(s,"invalid privateKey length"),x=v(_),s.push(x);var w=new u(o-r._crypto_box_macbytes()|0),S=w.address;if(s.push(S),0==(0|r._crypto_box_open_easy(S,c,o,0,p,d,x))){var T=y(w,n);return g(s),T}b(s,"incorrect key pair for the given ciphertext")}function re(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"ciphertext")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_box_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"sharedKey");var p,i=0|r._crypto_box_beforenmbytes();a.length!==i&&f(n,"invalid sharedKey length"),p=v(a),n.push(p);var d=new u(c-r._crypto_box_macbytes()|0),m=d.address;if(n.push(m),0==(0|r._crypto_box_open_easy_afternm(m,s,c,0,h,p))){var x=y(d,_);return g(n),x}b(n,"incorrect secret key for the given ciphertext")}function ae(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"publicKey");var c,h=0|r._crypto_box_publickeybytes();t.length!==h&&f(_,"invalid publicKey length"),c=v(t),_.push(c);var o=new u(s+r._crypto_box_sealbytes()|0),p=o.address;if(_.push(p),0==(0|r._crypto_box_seal(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function _e(e,t,a,_){var n=[];l(_),e=k(n,e,"ciphertext");var s,c=r._crypto_box_sealbytes(),h=e.length;h<c&&f(n,"ciphertext is too short"),s=v(e),n.push(s),t=k(n,t,"publicKey");var o,p=0|r._crypto_box_publickeybytes();t.length!==p&&f(n,"invalid publicKey length"),o=v(t),n.push(o),a=k(n,a,"privateKey");var i,d=0|r._crypto_box_secretkeybytes();a.length!==d&&f(n,"invalid privateKey length"),i=v(a),n.push(i);var m=new u(h-r._crypto_box_sealbytes()|0),x=m.address;if(n.push(x),0==(0|r._crypto_box_seal_open(x,s,h,0,o,i))){var E=y(m,_);return g(n),E}b(n,"incorrect key pair for the given ciphertext")}function ne(e,t){var a=[];l(t),e=k(a,e,"seed");var _,n=0|r._crypto_box_seedbytes();e.length!==n&&f(a,"invalid seed length"),_=v(e),a.push(_);var s=new u(0|r._crypto_box_publickeybytes()),c=s.address;a.push(c);var h=new u(0|r._crypto_box_secretkeybytes()),o=h.address;if(a.push(o),0==(0|r._crypto_box_seed_keypair(c,o,_))){var p={publicKey:y(s,t),privateKey:y(h,t),keyType:"x25519"};return g(a),p}b(a,"invalid usage")}function se(e,t,a){var _=[];l(a),e=k(_,e,"p");var n,s=0|r._crypto_core_ristretto255_bytes();e.length!==s&&f(_,"invalid p length"),n=v(e),_.push(n),t=k(_,t,"q");var c,h=0|r._crypto_core_ristretto255_bytes();t.length!==h&&f(_,"invalid q length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_core_ristretto255_add(p,n,c))){var i=y(o,a);return g(_),i}b(_,"inputs is invalid element")}function ce(e,t){var a=[];l(t);var _=v(e=k(a,e,"r"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_bytes()),s=n.address;if(a.push(s),0==(0|r._crypto_core_ristretto255_from_hash(s,_))){var c=y(n,t);return g(a),c}b(a,"invalid usage")}function he(e,t){var a=[];l(t);var _=v(e=k(a,e,"point"));e.length,a.push(_);var n=1==(0|r._crypto_core_ristretto255_is_valid_point(_));return g(a),n}function oe(e){var t=[];l(e);var a=new u(0|r._crypto_core_ristretto255_bytes()),_=a.address;t.push(_),r._crypto_core_ristretto255_random(_);var n=y(a,e);return g(t),n}function pe(e,t,a){var _=[];l(a),e=k(_,e,"x");var n,s=0|r._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(_,"invalid x length"),n=v(e),_.push(n),t=k(_,t,"y");var c,h=0|r._crypto_core_ristretto255_scalarbytes();t.length!==h&&f(_,"invalid y length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_scalarbytes()),p=o.address;_.push(p),r._crypto_core_ristretto255_scalar_add(p,n,c);var i=y(o,a);return g(_),i}function ye(e,t){var a=[];l(t);var _=v(e=k(a,e,"s"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;a.push(s),r._crypto_core_ristretto255_scalar_complement(s,_);var c=y(n,t);return g(a),c}function ie(e,t){var a=[];l(t);var _=v(e=k(a,e,"s"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;if(a.push(s),0==(0|r._crypto_core_ristretto255_scalar_invert(s,_))){var c=y(n,t);return g(a),c}b(a,"invalid reciprocate")}function le(e,t,a){var _=[];l(a),e=k(_,e,"x");var n,s=0|r._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(_,"invalid x length"),n=v(e),_.push(n),t=k(_,t,"y");var c,h=0|r._crypto_core_ristretto255_scalarbytes();t.length!==h&&f(_,"invalid y length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_scalarbytes()),p=o.address;_.push(p),r._crypto_core_ristretto255_scalar_mul(p,n,c);var i=y(o,a);return g(_),i}function ue(e,t){var a=[];l(t);var _=v(e=k(a,e,"s"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;a.push(s),r._crypto_core_ristretto255_scalar_negate(s,_);var c=y(n,t);return g(a),c}function ve(e){var t=[];l(e);var a=new u(0|r._crypto_core_ristretto255_scalarbytes()),_=a.address;t.push(_),r._crypto_core_ristretto255_random(_);var n=y(a,e);return g(t),n}function de(e,t){var a=[];l(t);var _=v(e=k(a,e,"sample"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_scalarbytes()),s=n.address;a.push(s),r._crypto_core_ristretto255_scalar_reduce(s,_);var c=y(n,t);return g(a),c}function ge(e,t,a){var _=[];l(a),e=k(_,e,"x");var n,s=0|r._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(_,"invalid x length"),n=v(e),_.push(n),t=k(_,t,"y");var c,h=0|r._crypto_core_ristretto255_scalarbytes();t.length!==h&&f(_,"invalid y length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_scalarbytes()),p=o.address;_.push(p),r._crypto_core_ristretto255_scalar_sub(p,n,c);var i=y(o,a);return g(_),i}function be(e,t,a){var _=[];l(a),e=k(_,e,"p");var n,s=0|r._crypto_core_ristretto255_bytes();e.length!==s&&f(_,"invalid p length"),n=v(e),_.push(n),t=k(_,t,"q");var c,h=0|r._crypto_core_ristretto255_bytes();t.length!==h&&f(_,"invalid q length"),c=v(t),_.push(c);var o=new u(0|r._crypto_core_ristretto255_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_core_ristretto255_sub(p,n,c))){var i=y(o,a);return g(_),i}b(_,"inputs is invalid element")}function fe(e,t,a,_){var n=[];l(_),m(n,e,"hash_length"),("number"!=typeof e||(0|e)!==e||e<0)&&f(n,"hash_length must be an unsigned integer");var s=v(t=k(n,t,"message")),c=t.length;n.push(s);var h=null,o=0;null!=a&&(h=v(a=k(n,a,"key")),o=a.length,n.push(h));var p=new u(e|=0),i=p.address;if(n.push(i),0==(0|r._crypto_generichash(i,e,s,c,0,h,o))){var d=y(p,_);return g(n),d}b(n,"invalid usage")}function me(e,t,a,_,n){var s=[];l(n),m(s,e,"subkey_len"),("number"!=typeof e||(0|e)!==e||e<0)&&f(s,"subkey_len must be an unsigned integer");var c=null,h=0;null!=t&&(c=v(t=k(s,t,"key")),h=t.length,s.push(c)),a=k(s,a,"id");var o,p=0|r._crypto_generichash_blake2b_saltbytes();a.length!==p&&f(s,"invalid id length"),o=v(a),s.push(o),_=k(s,_,"ctx");var i,d=0|r._crypto_generichash_blake2b_personalbytes();_.length!==d&&f(s,"invalid ctx length"),i=v(_),s.push(i);var x=new u(0|e),E=x.address;if(s.push(E),0==(0|r._crypto_generichash_blake2b_salt_personal(E,e,null,0,0,c,h,o,i))){var w=y(x,n);return g(s),w}b(s,"invalid usage")}function ke(e,t,a){var _=[];l(a),m(_,e,"state_address"),m(_,t,"hash_length"),("number"!=typeof t||(0|t)!==t||t<0)&&f(_,"hash_length must be an unsigned integer");var n=new u(t|=0),s=n.address;if(_.push(s),0==(0|r._crypto_generichash_final(e,s,t))){var c=(r._free(e),y(n,a));return g(_),c}b(_,"invalid usage")}function xe(e,t,a){var _=[];l(a);var n=null,s=0;null!=e&&(n=v(e=k(_,e,"key")),s=e.length,_.push(n)),m(_,t,"hash_length"),("number"!=typeof t||(0|t)!==t||t<0)&&f(_,"hash_length must be an unsigned integer");var c=new u(357).address;if(0==(0|r._crypto_generichash_init(c,n,s,t))){var h=c;return g(_),h}b(_,"invalid usage")}function Ee(e){var t=[];l(e);var a=new u(0|r._crypto_generichash_keybytes()),_=a.address;t.push(_),r._crypto_generichash_keygen(_);var n=y(a,e);return g(t),n}function we(e,t,a){var _=[];l(a),m(_,e,"state_address");var n=v(t=k(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_generichash_update(e,n,s))&&b(_,"invalid usage"),g(_)}function Se(e,t){var a=[];l(t);var _=v(e=k(a,e,"message")),n=e.length;a.push(_);var s=new u(0|r._crypto_hash_bytes()),c=s.address;if(a.push(c),0==(0|r._crypto_hash(c,_,n,0))){var h=y(s,t);return g(a),h}b(a,"invalid usage")}function Te(e,t){var a=[];l(t);var _=v(e=k(a,e,"message")),n=e.length;a.push(_);var s=new u(0|r._crypto_hash_sha256_bytes()),c=s.address;if(a.push(c),0==(0|r._crypto_hash_sha256(c,_,n,0))){var h=y(s,t);return g(a),h}b(a,"invalid usage")}function Ye(e,t){var a=[];l(t);var _=v(e=k(a,e,"message")),n=e.length;a.push(_);var s=new u(0|r._crypto_hash_sha512_bytes()),c=s.address;if(a.push(c),0==(0|r._crypto_hash_sha512(c,_,n,0))){var h=y(s,t);return g(a),h}b(a,"invalid usage")}function Ae(e,t,a,_,s){var c=[];l(s),m(c,e,"subkey_len"),("number"!=typeof e||(0|e)!==e||e<0)&&f(c,"subkey_len must be an unsigned integer"),m(c,t,"subkey_id"),("number"!=typeof t||(0|t)!==t||t<0)&&f(c,"subkey_id must be an unsigned integer"),"string"!=typeof a&&f(c,"ctx must be a string");var h=v(a=n(a+"\0"));a.length,c.push(h),_=k(c,_,"key");var o,p=0|r._crypto_kdf_keybytes();_.length!==p&&f(c,"invalid key length"),o=v(_),c.push(o);var i=new u(0|e),d=i.address;c.push(d),r._crypto_kdf_derive_from_key(d,e,t,t>>>24>>>8,h,o);var b=y(i,s);return g(c),b}function Be(e){var t=[];l(e);var a=new u(0|r._crypto_kdf_keybytes()),_=a.address;t.push(_),r._crypto_kdf_keygen(_);var n=y(a,e);return g(t),n}function Ke(e,t,a,_){var n=[];l(_),e=k(n,e,"clientPublicKey");var s,c=0|r._crypto_kx_publickeybytes();e.length!==c&&f(n,"invalid clientPublicKey length"),s=v(e),n.push(s),t=k(n,t,"clientSecretKey");var h,o=0|r._crypto_kx_secretkeybytes();t.length!==o&&f(n,"invalid clientSecretKey length"),h=v(t),n.push(h),a=k(n,a,"serverPublicKey");var p,i=0|r._crypto_kx_publickeybytes();a.length!==i&&f(n,"invalid serverPublicKey length"),p=v(a),n.push(p);var d=new u(0|r._crypto_kx_sessionkeybytes()),m=d.address;n.push(m);var x=new u(0|r._crypto_kx_sessionkeybytes()),E=x.address;if(n.push(E),0==(0|r._crypto_kx_client_session_keys(m,E,s,h,p))){var w=y({sharedRx:d,sharedTx:x},_);return g(n),w}b(n,"invalid usage")}function Ie(e){var t=[];l(e);var a=new u(0|r._crypto_kx_publickeybytes()),_=a.address;t.push(_);var n=new u(0|r._crypto_kx_secretkeybytes()),s=n.address;if(t.push(s),0==(0|r._crypto_kx_keypair(_,s))){var c={publicKey:y(a,e),privateKey:y(n,e),keyType:"x25519"};return g(t),c}b(t,"internal error")}function Me(e,t){var a=[];l(t),e=k(a,e,"seed");var _,n=0|r._crypto_kx_seedbytes();e.length!==n&&f(a,"invalid seed length"),_=v(e),a.push(_);var s=new u(0|r._crypto_kx_publickeybytes()),c=s.address;a.push(c);var h=new u(0|r._crypto_kx_secretkeybytes()),o=h.address;if(a.push(o),0==(0|r._crypto_kx_seed_keypair(c,o,_))){var p={publicKey:y(s,t),privateKey:y(h,t),keyType:"x25519"};return g(a),p}b(a,"internal error")}function Le(e,t,a,_){var n=[];l(_),e=k(n,e,"serverPublicKey");var s,c=0|r._crypto_kx_publickeybytes();e.length!==c&&f(n,"invalid serverPublicKey length"),s=v(e),n.push(s),t=k(n,t,"serverSecretKey");var h,o=0|r._crypto_kx_secretkeybytes();t.length!==o&&f(n,"invalid serverSecretKey length"),h=v(t),n.push(h),a=k(n,a,"clientPublicKey");var p,i=0|r._crypto_kx_publickeybytes();a.length!==i&&f(n,"invalid clientPublicKey length"),p=v(a),n.push(p);var d=new u(0|r._crypto_kx_sessionkeybytes()),m=d.address;n.push(m);var x=new u(0|r._crypto_kx_sessionkeybytes()),E=x.address;if(n.push(E),0==(0|r._crypto_kx_server_session_keys(m,E,s,h,p))){var w=y({sharedRx:d,sharedTx:x},_);return g(n),w}b(n,"invalid usage")}function Ne(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_onetimeauth_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_onetimeauth_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_onetimeauth(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function Ue(e,t){var a=[];l(t),m(a,e,"state_address");var _=new u(0|r._crypto_onetimeauth_bytes()),n=_.address;if(a.push(n),0==(0|r._crypto_onetimeauth_final(e,n))){var s=(r._free(e),y(_,t));return g(a),s}b(a,"invalid usage")}function Oe(e,t){var a=[];l(t);var _=null;null!=e&&(_=v(e=k(a,e,"key")),e.length,a.push(_));var n=new u(144).address;if(0==(0|r._crypto_onetimeauth_init(n,_))){var s=n;return g(a),s}b(a,"invalid usage")}function Re(e){var t=[];l(e);var a=new u(0|r._crypto_onetimeauth_keybytes()),_=a.address;t.push(_),r._crypto_onetimeauth_keygen(_);var n=y(a,e);return g(t),n}function Pe(e,t,a){var _=[];l(a),m(_,e,"state_address");var n=v(t=k(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_onetimeauth_update(e,n,s))&&b(_,"invalid usage"),g(_)}function Ce(e,t,a){var _=[];e=k(_,e,"hash");var n,s=0|r._crypto_onetimeauth_bytes();e.length!==s&&f(_,"invalid hash length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"key");var o,p=0|r._crypto_onetimeauth_keybytes();a.length!==p&&f(_,"invalid key length"),o=v(a),_.push(o);var y=0==(0|r._crypto_onetimeauth_verify(n,c,h,0,o));return g(_),y}function Ge(e,t,a,_,n,s,c){var h=[];l(c),m(h,e,"keyLength"),("number"!=typeof e||(0|e)!==e||e<0)&&f(h,"keyLength must be an unsigned integer");var o=v(t=k(h,t,"password")),p=t.length;h.push(o),a=k(h,a,"salt");var i,d=0|r._crypto_pwhash_saltbytes();a.length!==d&&f(h,"invalid salt length"),i=v(a),h.push(i),m(h,_,"opsLimit"),("number"!=typeof _||(0|_)!==_||_<0)&&f(h,"opsLimit must be an unsigned integer"),m(h,n,"memLimit"),("number"!=typeof n||(0|n)!==n||n<0)&&f(h,"memLimit must be an unsigned integer"),m(h,s,"algorithm"),("number"!=typeof s||(0|s)!==s||s<0)&&f(h,"algorithm must be an unsigned integer");var x=new u(0|e),E=x.address;if(h.push(E),0==(0|r._crypto_pwhash(E,e,0,o,p,0,i,_,0,n,s))){var w=y(x,c);return g(h),w}b(h,"invalid usage")}function De(e,t,a,_,n,s){var c=[];l(s),m(c,e,"keyLength"),("number"!=typeof e||(0|e)!==e||e<0)&&f(c,"keyLength must be an unsigned integer");var h=v(t=k(c,t,"password")),o=t.length;c.push(h),a=k(c,a,"salt");var p,i=0|r._crypto_pwhash_scryptsalsa208sha256_saltbytes();a.length!==i&&f(c,"invalid salt length"),p=v(a),c.push(p),m(c,_,"opsLimit"),("number"!=typeof _||(0|_)!==_||_<0)&&f(c,"opsLimit must be an unsigned integer"),m(c,n,"memLimit"),("number"!=typeof n||(0|n)!==n||n<0)&&f(c,"memLimit must be an unsigned integer");var d=new u(0|e),x=d.address;if(c.push(x),0==(0|r._crypto_pwhash_scryptsalsa208sha256(x,e,0,h,o,0,p,_,0,n))){var E=y(d,s);return g(c),E}b(c,"invalid usage")}function Xe(e,t,a,_,n,s,c){var h=[];l(c);var o=v(e=k(h,e,"password")),p=e.length;h.push(o);var i=v(t=k(h,t,"salt")),d=t.length;h.push(i),m(h,a,"opsLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(h,"opsLimit must be an unsigned integer"),m(h,_,"r"),("number"!=typeof _||(0|_)!==_||_<0)&&f(h,"r must be an unsigned integer"),m(h,n,"p"),("number"!=typeof n||(0|n)!==n||n<0)&&f(h,"p must be an unsigned integer"),m(h,s,"keyLength"),("number"!=typeof s||(0|s)!==s||s<0)&&f(h,"keyLength must be an unsigned integer");var x=new u(0|s),E=x.address;if(h.push(E),0==(0|r._crypto_pwhash_scryptsalsa208sha256_ll(o,p,i,d,a,0,_,n,E,s))){var w=y(x,c);return g(h),w}b(h,"invalid usage")}function Ve(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"password")),c=e.length;n.push(s),m(n,t,"opsLimit"),("number"!=typeof t||(0|t)!==t||t<0)&&f(n,"opsLimit must be an unsigned integer"),m(n,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(n,"memLimit must be an unsigned integer");var h=new u(0|r._crypto_pwhash_scryptsalsa208sha256_strbytes()).address;if(n.push(h),0==(0|r._crypto_pwhash_scryptsalsa208sha256_str(h,s,c,0,t,0,a))){var o=r.UTF8ToString(h);return g(n),o}b(n,"invalid usage")}function Fe(e,t,a){var _=[];l(a),"string"!=typeof e&&f(_,"hashed_password must be a string");var s=v(e=n(e+"\0"));e.length,_.push(s);var c=v(t=k(_,t,"password")),h=t.length;_.push(c);var o=0==(0|r._crypto_pwhash_scryptsalsa208sha256_str_verify(s,c,h,0));return g(_),o}function He(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"password")),c=e.length;n.push(s),m(n,t,"opsLimit"),("number"!=typeof t||(0|t)!==t||t<0)&&f(n,"opsLimit must be an unsigned integer"),m(n,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(n,"memLimit must be an unsigned integer");var h=new u(0|r._crypto_pwhash_strbytes()).address;if(n.push(h),0==(0|r._crypto_pwhash_str(h,s,c,0,t,0,a))){var o=r.UTF8ToString(h);return g(n),o}b(n,"invalid usage")}function ze(e,t,a){var _=[];l(a),"string"!=typeof e&&f(_,"hashed_password must be a string");var s=v(e=n(e+"\0"));e.length,_.push(s);var c=v(t=k(_,t,"password")),h=t.length;_.push(c);var o=0==(0|r._crypto_pwhash_str_verify(s,c,h,0));return g(_),o}function je(e,t,a){var _=[];l(a),e=k(_,e,"privateKey");var n,s=0|r._crypto_scalarmult_scalarbytes();e.length!==s&&f(_,"invalid privateKey length"),n=v(e),_.push(n),t=k(_,t,"publicKey");var c,h=0|r._crypto_scalarmult_scalarbytes();t.length!==h&&f(_,"invalid publicKey length"),c=v(t),_.push(c);var o=new u(0|r._crypto_scalarmult_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_scalarmult(p,n,c))){var i=y(o,a);return g(_),i}b(_,"weak public key")}function qe(e,t){var a=[];l(t),e=k(a,e,"privateKey");var _,n=0|r._crypto_scalarmult_scalarbytes();e.length!==n&&f(a,"invalid privateKey length"),_=v(e),a.push(_);var s=new u(0|r._crypto_scalarmult_scalarbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_scalarmult_base(c,_))){var h=y(s,t);return g(a),h}b(a,"insecure scalar")}function We(e,t,a){var _=[];l(a),e=k(_,e,"scalar");var n,s=0|r._crypto_scalarmult_ristretto255_scalarbytes();e.length!==s&&f(_,"invalid scalar length"),n=v(e),_.push(n),t=k(_,t,"privateKey");var c,h=0|r._crypto_scalarmult_ristretto255_bytes();t.length!==h&&f(_,"invalid privateKey length"),c=v(t),_.push(c);var o=new u(0|r._crypto_scalarmult_ristretto255_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_scalarmult_ristretto255(p,n,c))){var i=y(o,a);return g(_),i}b(_,"input is zero element")}function Je(e,t){var a=[];l(t);var _=v(e=k(a,e,"scalar"));e.length,a.push(_);var n=new u(0|r._crypto_core_ristretto255_bytes()),s=n.address;if(a.push(s),0==(0|r._crypto_scalarmult_ristretto255_base(s,_))){var c=y(n,t);return g(a),c}b(a,"scalar is 0")}function Qe(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_secretbox_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_secretbox_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(0|c),m=d.address;n.push(m);var x=new u(0|r._crypto_secretbox_macbytes()),E=x.address;if(n.push(E),0==(0|r._crypto_secretbox_detached(m,E,s,c,0,h,p))){var w=y({mac:x,cipher:d},_);return g(n),w}b(n,"invalid usage")}function Ze(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_secretbox_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_secretbox_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(c+r._crypto_secretbox_macbytes()|0),m=d.address;if(n.push(m),0==(0|r._crypto_secretbox_easy(m,s,c,0,h,p))){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function $e(e){var t=[];l(e);var a=new u(0|r._crypto_secretbox_keybytes()),_=a.address;t.push(_),r._crypto_secretbox_keygen(_);var n=y(a,e);return g(t),n}function et(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"ciphertext")),h=e.length;s.push(c),t=k(s,t,"mac");var o,p=0|r._crypto_secretbox_macbytes();t.length!==p&&f(s,"invalid mac length"),o=v(t),s.push(o),a=k(s,a,"nonce");var i,d=0|r._crypto_secretbox_noncebytes();a.length!==d&&f(s,"invalid nonce length"),i=v(a),s.push(i),_=k(s,_,"key");var m,x=0|r._crypto_secretbox_keybytes();_.length!==x&&f(s,"invalid key length"),m=v(_),s.push(m);var E=new u(0|h),w=E.address;if(s.push(w),0==(0|r._crypto_secretbox_open_detached(w,c,o,h,0,i,m))){var S=y(E,n);return g(s),S}b(s,"wrong secret key for the given ciphertext")}function tt(e,t,a,_){var n=[];l(_),e=k(n,e,"ciphertext");var s,c=r._crypto_secretbox_macbytes(),h=e.length;h<c&&f(n,"ciphertext is too short"),s=v(e),n.push(s),t=k(n,t,"nonce");var o,p=0|r._crypto_secretbox_noncebytes();t.length!==p&&f(n,"invalid nonce length"),o=v(t),n.push(o),a=k(n,a,"key");var i,d=0|r._crypto_secretbox_keybytes();a.length!==d&&f(n,"invalid key length"),i=v(a),n.push(i);var m=new u(h-r._crypto_secretbox_macbytes()|0),x=m.address;if(n.push(x),0==(0|r._crypto_secretbox_open_easy(x,s,h,0,o,i))){var E=y(m,_);return g(n),E}b(n,"wrong secret key for the given ciphertext")}function rt(e,t,a){var _=[];l(a),e=k(_,e,"header");var n,s=0|r._crypto_secretstream_xchacha20poly1305_headerbytes();e.length!==s&&f(_,"invalid header length"),n=v(e),_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_secretstream_xchacha20poly1305_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(52).address;if(0==(0|r._crypto_secretstream_xchacha20poly1305_init_pull(o,n,c))){var p=o;return g(_),p}b(_,"invalid usage")}function at(e,t){var a=[];l(t),e=k(a,e,"key");var _,n=0|r._crypto_secretstream_xchacha20poly1305_keybytes();e.length!==n&&f(a,"invalid key length"),_=v(e),a.push(_);var s=new u(52).address,c=new u(0|r._crypto_secretstream_xchacha20poly1305_headerbytes()),h=c.address;if(a.push(h),0==(0|r._crypto_secretstream_xchacha20poly1305_init_push(s,h,_))){var o={state:s,header:y(c,t)};return g(a),o}b(a,"invalid usage")}function _t(e){var t=[];l(e);var a=new u(0|r._crypto_secretstream_xchacha20poly1305_keybytes()),_=a.address;t.push(_),r._crypto_secretstream_xchacha20poly1305_keygen(_);var n=y(a,e);return g(t),n}function nt(e,t,a,_){var n=[];l(_),m(n,e,"state_address"),t=k(n,t,"cipher");var s,c=r._crypto_secretstream_xchacha20poly1305_abytes(),h=t.length;h<c&&f(n,"cipher is too short"),s=v(t),n.push(s);var o=null,p=0;null!=a&&(o=v(a=k(n,a,"ad")),p=a.length,n.push(o));var i=new u(h-r._crypto_secretstream_xchacha20poly1305_abytes()|0),b=i.address;n.push(b);var x,E=(x=d(1),n.push(x),(E=0===r._crypto_secretstream_xchacha20poly1305_pull(e,b,0,x,s,h,0,o,p)&&{tag:r.HEAPU8[x],message:i})&&{message:y(E.message,_),tag:E.tag});return g(n),E}function st(e,t,a,_,n){var s=[];l(n),m(s,e,"state_address");var c=v(t=k(s,t,"message_chunk")),h=t.length;s.push(c);var o=null,p=0;null!=a&&(o=v(a=k(s,a,"ad")),p=a.length,s.push(o)),m(s,_,"tag"),("number"!=typeof _||(0|_)!==_||_<0)&&f(s,"tag must be an unsigned integer");var i=new u(h+r._crypto_secretstream_xchacha20poly1305_abytes()|0),d=i.address;if(s.push(d),0==(0|r._crypto_secretstream_xchacha20poly1305_push(e,d,0,c,h,0,o,p,0,_))){var x=y(i,n);return g(s),x}b(s,"invalid usage")}function ct(e,t){var a=[];return l(t),m(a,e,"state_address"),r._crypto_secretstream_xchacha20poly1305_rekey(e),g(a),!0}function ht(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_shorthash_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_shorthash_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_shorthash(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function ot(e){var t=[];l(e);var a=new u(0|r._crypto_shorthash_keybytes()),_=a.address;t.push(_),r._crypto_shorthash_keygen(_);var n=y(a,e);return g(t),n}function pt(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"key");var c,h=0|r._crypto_shorthash_siphashx24_keybytes();t.length!==h&&f(_,"invalid key length"),c=v(t),_.push(c);var o=new u(0|r._crypto_shorthash_siphashx24_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_shorthash_siphashx24(p,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function yt(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"privateKey");var c,h=0|r._crypto_sign_secretkeybytes();t.length!==h&&f(_,"invalid privateKey length"),c=v(t),_.push(c);var o=new u(e.length+r._crypto_sign_bytes()|0),p=o.address;if(_.push(p),0==(0|r._crypto_sign(p,null,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function it(e,t,a){var _=[];l(a);var n=v(e=k(_,e,"message")),s=e.length;_.push(n),t=k(_,t,"privateKey");var c,h=0|r._crypto_sign_secretkeybytes();t.length!==h&&f(_,"invalid privateKey length"),c=v(t),_.push(c);var o=new u(0|r._crypto_sign_bytes()),p=o.address;if(_.push(p),0==(0|r._crypto_sign_detached(p,null,n,s,0,c))){var i=y(o,a);return g(_),i}b(_,"invalid usage")}function lt(e,t){var a=[];l(t),e=k(a,e,"edPk");var _,n=0|r._crypto_sign_publickeybytes();e.length!==n&&f(a,"invalid edPk length"),_=v(e),a.push(_);var s=new u(0|r._crypto_scalarmult_scalarbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_pk_to_curve25519(c,_))){var h=y(s,t);return g(a),h}b(a,"invalid key")}function ut(e,t){var a=[];l(t),e=k(a,e,"edSk");var _,n=0|r._crypto_sign_secretkeybytes();e.length!==n&&f(a,"invalid edSk length"),_=v(e),a.push(_);var s=new u(0|r._crypto_scalarmult_scalarbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_sk_to_curve25519(c,_))){var h=y(s,t);return g(a),h}b(a,"invalid key")}function vt(e,t){var a=[];l(t),e=k(a,e,"privateKey");var _,n=0|r._crypto_sign_secretkeybytes();e.length!==n&&f(a,"invalid privateKey length"),_=v(e),a.push(_);var s=new u(0|r._crypto_sign_publickeybytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_sk_to_pk(c,_))){var h=y(s,t);return g(a),h}b(a,"invalid key")}function dt(e,t){var a=[];l(t),e=k(a,e,"privateKey");var _,n=0|r._crypto_sign_secretkeybytes();e.length!==n&&f(a,"invalid privateKey length"),_=v(e),a.push(_);var s=new u(0|r._crypto_sign_seedbytes()),c=s.address;if(a.push(c),0==(0|r._crypto_sign_ed25519_sk_to_seed(c,_))){var h=y(s,t);return g(a),h}b(a,"invalid key")}function gt(e,t,a){var _=[];l(a),m(_,e,"state_address"),t=k(_,t,"privateKey");var n,s=0|r._crypto_sign_secretkeybytes();t.length!==s&&f(_,"invalid privateKey length"),n=v(t),_.push(n);var c=new u(0|r._crypto_sign_bytes()),h=c.address;if(_.push(h),0==(0|r._crypto_sign_final_create(e,h,null,n))){var o=(r._free(e),y(c,a));return g(_),o}b(_,"invalid usage")}function bt(e,t,a,_){var n=[];l(_),m(n,e,"state_address"),t=k(n,t,"signature");var s,c=0|r._crypto_sign_bytes();t.length!==c&&f(n,"invalid signature length"),s=v(t),n.push(s),a=k(n,a,"publicKey");var h,o=0|r._crypto_sign_publickeybytes();a.length!==o&&f(n,"invalid publicKey length"),h=v(a),n.push(h);var p=0==(0|r._crypto_sign_final_verify(e,s,h));return g(n),p}function ft(e){var t=[];l(e);var a=new u(208).address;if(0==(0|r._crypto_sign_init(a))){var _=a;return g(t),_}b(t,"internal error")}function mt(e){var t=[];l(e);var a=new u(0|r._crypto_sign_publickeybytes()),_=a.address;t.push(_);var n=new u(0|r._crypto_sign_secretkeybytes()),s=n.address;if(t.push(s),0==(0|r._crypto_sign_keypair(_,s))){var c={publicKey:y(a,e),privateKey:y(n,e),keyType:"ed25519"};return g(t),c}b(t,"internal error")}function kt(e,t,a){var _=[];l(a),e=k(_,e,"signedMessage");var n,s=r._crypto_sign_bytes(),c=e.length;c<s&&f(_,"signedMessage is too short"),n=v(e),_.push(n),t=k(_,t,"publicKey");var h,o=0|r._crypto_sign_publickeybytes();t.length!==o&&f(_,"invalid publicKey length"),h=v(t),_.push(h);var p=new u(c-r._crypto_sign_bytes()|0),i=p.address;if(_.push(i),0==(0|r._crypto_sign_open(i,null,n,c,0,h))){var d=y(p,a);return g(_),d}b(_,"incorrect signature for the given public key")}function xt(e,t){var a=[];l(t),e=k(a,e,"seed");var _,n=0|r._crypto_sign_seedbytes();e.length!==n&&f(a,"invalid seed length"),_=v(e),a.push(_);var s=new u(0|r._crypto_sign_publickeybytes()),c=s.address;a.push(c);var h=new u(0|r._crypto_sign_secretkeybytes()),o=h.address;if(a.push(o),0==(0|r._crypto_sign_seed_keypair(c,o,_))){var p={publicKey:y(s,t),privateKey:y(h,t),keyType:"ed25519"};return g(a),p}b(a,"invalid usage")}function Et(e,t,a){var _=[];l(a),m(_,e,"state_address");var n=v(t=k(_,t,"message_chunk")),s=t.length;_.push(n),0!=(0|r._crypto_sign_update(e,n,s))&&b(_,"invalid usage"),g(_)}function wt(e,t,a){var _=[];e=k(_,e,"signature");var n,s=0|r._crypto_sign_bytes();e.length!==s&&f(_,"invalid signature length"),n=v(e),_.push(n);var c=v(t=k(_,t,"message")),h=t.length;_.push(c),a=k(_,a,"publicKey");var o,p=0|r._crypto_sign_publickeybytes();a.length!==p&&f(_,"invalid publicKey length"),o=v(a),_.push(o);var y=0==(0|r._crypto_sign_verify_detached(n,c,h,0,o));return g(_),y}function St(e,t,a,_){var n=[];l(_),m(n,e,"outLength"),("number"!=typeof e||(0|e)!==e||e<0)&&f(n,"outLength must be an unsigned integer"),t=k(n,t,"key");var s,c=0|r._crypto_stream_chacha20_keybytes();t.length!==c&&f(n,"invalid key length"),s=v(t),n.push(s),a=k(n,a,"nonce");var h,o=0|r._crypto_stream_chacha20_noncebytes();a.length!==o&&f(n,"invalid nonce length"),h=v(a),n.push(h);var p=new u(0|e),i=p.address;n.push(i),r._crypto_stream_chacha20(i,e,0,h,s);var d=y(p,_);return g(n),d}function Tt(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"input_message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_stream_chacha20_ietf_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_stream_chacha20_ietf_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(0|c),m=d.address;if(n.push(m),0===r._crypto_stream_chacha20_ietf_xor(m,s,c,0,h,p)){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function Yt(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"input_message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_stream_chacha20_ietf_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),m(s,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&f(s,"nonce_increment must be an unsigned integer"),_=k(s,_,"key");var i,d=0|r._crypto_stream_chacha20_ietf_keybytes();_.length!==d&&f(s,"invalid key length"),i=v(_),s.push(i);var x=new u(0|h),E=x.address;if(s.push(E),0===r._crypto_stream_chacha20_ietf_xor_ic(E,c,h,0,o,a,0,i)){var w=y(x,n);return g(s),w}b(s,"invalid usage")}function At(e){var t=[];l(e);var a=new u(0|r._crypto_stream_chacha20_keybytes()),_=a.address;t.push(_),r._crypto_stream_chacha20_keygen(_);var n=y(a,e);return g(t),n}function Bt(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"input_message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_stream_chacha20_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_stream_chacha20_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(0|c),m=d.address;if(n.push(m),0===r._crypto_stream_chacha20_xor(m,s,c,0,h,p)){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function Kt(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"input_message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_stream_chacha20_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),m(s,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&f(s,"nonce_increment must be an unsigned integer"),_=k(s,_,"key");var i,d=0|r._crypto_stream_chacha20_keybytes();_.length!==d&&f(s,"invalid key length"),i=v(_),s.push(i);var x=new u(0|h),E=x.address;if(s.push(E),0===r._crypto_stream_chacha20_xor_ic(E,c,h,0,o,a,0,i)){var w=y(x,n);return g(s),w}b(s,"invalid usage")}function It(e){var t=[];l(e);var a=new u(0|r._crypto_stream_keybytes()),_=a.address;t.push(_),r._crypto_stream_keygen(_);var n=y(a,e);return g(t),n}function Mt(e){var t=[];l(e);var a=new u(0|r._crypto_stream_xchacha20_keybytes()),_=a.address;t.push(_),r._crypto_stream_xchacha20_keygen(_);var n=y(a,e);return g(t),n}function Lt(e,t,a,_){var n=[];l(_);var s=v(e=k(n,e,"input_message")),c=e.length;n.push(s),t=k(n,t,"nonce");var h,o=0|r._crypto_stream_xchacha20_noncebytes();t.length!==o&&f(n,"invalid nonce length"),h=v(t),n.push(h),a=k(n,a,"key");var p,i=0|r._crypto_stream_xchacha20_keybytes();a.length!==i&&f(n,"invalid key length"),p=v(a),n.push(p);var d=new u(0|c),m=d.address;if(n.push(m),0===r._crypto_stream_xchacha20_xor(m,s,c,0,h,p)){var x=y(d,_);return g(n),x}b(n,"invalid usage")}function Nt(e,t,a,_,n){var s=[];l(n);var c=v(e=k(s,e,"input_message")),h=e.length;s.push(c),t=k(s,t,"nonce");var o,p=0|r._crypto_stream_xchacha20_noncebytes();t.length!==p&&f(s,"invalid nonce length"),o=v(t),s.push(o),m(s,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&f(s,"nonce_increment must be an unsigned integer"),_=k(s,_,"key");var i,d=0|r._crypto_stream_xchacha20_keybytes();_.length!==d&&f(s,"invalid key length"),i=v(_),s.push(i);var x=new u(0|h),E=x.address;if(s.push(E),0===r._crypto_stream_xchacha20_xor_ic(E,c,h,0,o,a,0,i)){var w=y(x,n);return g(s),w}b(s,"invalid usage")}function Ut(e,t){var a=[];l(t),m(a,e,"length"),("number"!=typeof e||(0|e)!==e||e<0)&&f(a,"length must be an unsigned integer");var _=new u(0|e),n=_.address;a.push(n),r._randombytes_buf(n,e);var s=y(_,t);return g(a),s}function Ot(e,t,a){var _=[];l(a),m(_,e,"length"),("number"!=typeof e||(0|e)!==e||e<0)&&f(_,"length must be an unsigned integer"),t=k(_,t,"seed");var n,s=0|r._randombytes_seedbytes();t.length!==s&&f(_,"invalid seed length"),n=v(t),_.push(n);var c=new u(0|e),h=c.address;_.push(h),r._randombytes_buf_deterministic(h,e,n);var o=y(c,a);return g(_),o}function Rt(e){l(e),r._randombytes_close()}function Pt(e){l(e);var t=r._randombytes_random()>>>0;return g([]),t}function Ct(e,t){var a=[];l(t);for(var _=r._malloc(24),n=0;n<6;n++)r.setValue(_+4*n,r.Runtime.addFunction(e[["implementation_name","random","stir","uniform","buf","close"][n]]),"i32");0!=(0|r._randombytes_set_implementation(_))&&b(a,"unsupported implementation"),g(a)}function Gt(e){l(e),r._randombytes_stir()}function Dt(e,t){var a=[];l(t),m(a,e,"upper_bound"),("number"!=typeof e||(0|e)!==e||e<0)&&f(a,"upper_bound must be an unsigned integer");var _=r._randombytes_uniform(e)>>>0;return g(a),_}function Xt(){var e=r._sodium_version_string(),t=r.UTF8ToString(e);return g([]),t}return u.prototype.to_Uint8Array=function(){var e=new Uint8Array(this.length);return e.set(r.HEAPU8.subarray(this.address,this.address+this.length)),e},e.add=function(e,t){if(!(e instanceof Uint8Array&&t instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can added");var r=e.length,a=0,_=0;if(t.length!=e.length)throw new TypeError("Arguments must have the same length");for(_=0;_<r;_++)a>>=8,a+=e[_]+t[_],e[_]=255&a},e.base64_variants=h,e.compare=function(e,t){if(!(e instanceof Uint8Array&&t instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be compared");if(e.length!==t.length)throw new TypeError("Only instances of identical length can be compared");for(var r=0,a=1,_=e.length;_-- >0;)r|=t[_]-e[_]>>8&a,a&=(t[_]^e[_])-1>>8;return r+r+a-1},e.from_base64=function(e,t){t=o(t);var a,_=[],n=new u(3*(e=k(_,e,"input")).length/4),s=v(e),c=d(4),h=d(4);return _.push(s),_.push(n.address),_.push(n.result_bin_len_p),_.push(n.b64_end_p),0!==r._sodium_base642bin(n.address,n.length,s,e.length,0,c,h,t)&&b(_,"invalid input"),r.getValue(h,"i32")-s!==e.length&&b(_,"incomplete input"),n.length=r.getValue(c,"i32"),a=n.to_Uint8Array(),g(_),a},e.from_hex=function(e){var t,a=[],_=new u((e=k(a,e,"input")).length/2),n=v(e),s=d(4);return a.push(n),a.push(_.address),a.push(_.hex_end_p),0!==r._sodium_hex2bin(_.address,_.length,n,e.length,0,0,s)&&b(a,"invalid input"),r.getValue(s,"i32")-n!==e.length&&b(a,"incomplete input"),t=_.to_Uint8Array(),g(a),t},e.from_string=n,e.increment=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be incremented");for(var t=256,r=0,a=e.length;r<a;r++)t>>=8,t+=e[r],e[r]=255&t},e.is_zero=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be checked");for(var t=0,r=0,a=e.length;r<a;r++)t|=e[r];return 0===t},e.libsodium=t,e.memcmp=function(e,t){if(!(e instanceof Uint8Array&&t instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be compared");if(e.length!==t.length)throw new TypeError("Only instances of identical length can be compared");for(var r=0,a=0,_=e.length;a<_;a++)r|=e[a]^t[a];return 0===r},e.memzero=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be wiped");for(var t=0,r=e.length;t<r;t++)e[t]=0},e.output_formats=function(){return["uint8array","text","hex","base64"]},e.pad=function(e,t){if(!(e instanceof Uint8Array))throw new TypeError("buffer must be a Uint8Array");if((t|=0)<=0)throw new Error("block size must be > 0");var a,_=[],n=d(4),s=1,c=0,h=0|e.length,o=new u(h+t);_.push(n),_.push(o.address);for(var p=o.address,y=o.address+h+t;p<y;p++)r.HEAPU8[p]=e[c],c+=s=1&~((65535&((h-=s)>>>48|h>>>32|h>>>16|h))-1>>16);return 0!==r._sodium_pad(n,o.address,e.length,t,o.length)&&b(_,"internal error"),o.length=r.getValue(n,"i32"),a=o.to_Uint8Array(),g(_),a},e.unpad=function(e,t){if(!(e instanceof Uint8Array))throw new TypeError("buffer must be a Uint8Array");if((t|=0)<=0)throw new Error("block size must be > 0");var a=[],_=v(e),n=d(4);return a.push(_),a.push(n),0!==r._sodium_unpad(n,_,e.length,t)&&b(a,"unsupported/invalid padding"),e=(e=new Uint8Array(e)).subarray(0,r.getValue(n,"i32")),g(a),e},e.ready=_,e.symbols=function(){return Object.keys(e).sort()},e.to_base64=p,e.to_hex=c,e.to_string=s,e}var r="object"==typeof e.sodium&&"function"==typeof e.sodium.onload?e.sodium.onload:null;"function"==typeof define&&define.amd?define(["exports","libsodium-sumo"],t):"object"==typeof exports&&"string"!=typeof exports.nodeName?t(exports,require("libsodium-sumo")):e.sodium=t(e.commonJsStrict={},e.libsodium),r&&e.sodium.ready.then(function(){r(e.sodium)})}(this);

},{"libsodium-sumo":127}],129:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":108,"inherits":124,"safe-buffer":173}],130:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":21,"brorand":22}],131:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],132:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],133:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],134:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],135:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":136,"asn1.js":3}],136:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":3}],137:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":26,"evp_bytestokey":105,"safe-buffer":173}],138:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":134,"./asn1":135,"./fixProc":137,"browserify-aes":26,"pbkdf2":142,"safe-buffer":173}],139:[function(require,module,exports){
/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

},{}],140:[function(require,module,exports){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};

},{}],141:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":148}],142:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":143,"./lib/sync":146}],143:[function(require,module,exports){
(function (process,global){
var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var Buffer = require('safe-buffer').Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./default-encoding":144,"./precondition":145,"./sync":146,"_process":148,"safe-buffer":173}],144:[function(require,module,exports){
(function (process){
var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

}).call(this,require('_process'))

},{"_process":148}],145:[function(require,module,exports){
(function (Buffer){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":125}],146:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var Buffer = require('safe-buffer').Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":144,"./precondition":145,"create-hash/md5":60,"ripemd160":172,"safe-buffer":173,"sha.js":175}],147:[function(require,module,exports){
(function (process){
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,require('_process'))

},{"_process":148}],148:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],149:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":151,"./publicEncrypt":152}],150:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":59,"safe-buffer":173}],151:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":150,"./withPublic":153,"./xor":154,"bn.js":21,"browserify-rsa":44,"create-hash":59,"parse-asn1":138,"safe-buffer":173}],152:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":150,"./withPublic":153,"./xor":154,"bn.js":21,"browserify-rsa":44,"create-hash":59,"parse-asn1":138,"randombytes":155,"safe-buffer":173}],153:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":21,"safe-buffer":173}],154:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],155:[function(require,module,exports){
(function (process,global){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":148,"safe-buffer":173}],156:[function(require,module,exports){
(function (process,global){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":148,"randombytes":155,"safe-buffer":173}],157:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":158}],158:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":160,"./_stream_writable":162,"core-util-is":57,"inherits":124,"process-nextick-args":147}],159:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":161,"core-util-is":57,"inherits":124}],160:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_stream_duplex":158,"./internal/streams/BufferList":163,"./internal/streams/destroy":164,"./internal/streams/stream":165,"_process":148,"core-util-is":57,"events":104,"inherits":124,"isarray":166,"process-nextick-args":147,"safe-buffer":173,"string_decoder/":167,"util":23}],161:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":158,"core-util-is":57,"inherits":124}],162:[function(require,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"./_stream_duplex":158,"./internal/streams/destroy":164,"./internal/streams/stream":165,"_process":148,"core-util-is":57,"inherits":124,"process-nextick-args":147,"safe-buffer":173,"timers":197,"util-deprecate":199}],163:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":173,"util":23}],164:[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":147}],165:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":104}],166:[function(require,module,exports){
arguments[4][126][0].apply(exports,arguments)
},{"dup":126}],167:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":173}],168:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":169}],169:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":158,"./lib/_stream_passthrough.js":159,"./lib/_stream_readable.js":160,"./lib/_stream_transform.js":161,"./lib/_stream_writable.js":162}],170:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":169}],171:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":162}],172:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":52,"hash-base":108,"inherits":124}],173:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":52}],174:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":173}],175:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":176,"./sha1":177,"./sha224":178,"./sha256":179,"./sha384":180,"./sha512":181}],176:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":174,"inherits":124,"safe-buffer":173}],177:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":174,"inherits":124,"safe-buffer":173}],178:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":174,"./sha256":179,"inherits":124,"safe-buffer":173}],179:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":174,"inherits":124,"safe-buffer":173}],180:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":174,"./sha512":181,"inherits":124,"safe-buffer":173}],181:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":174,"inherits":124,"safe-buffer":173}],182:[function(require,module,exports){

/**
 * Module dependencies.
 */

var url = require('./url');
var parser = require('socket.io-parser');
var Manager = require('./manager');
var debug = require('debug')('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = require('./manager');
exports.Socket = require('./socket');

},{"./manager":183,"./socket":185,"./url":186,"debug":187,"socket.io-parser":190}],183:[function(require,module,exports){

/**
 * Module dependencies.
 */

var eio = require('engine.io-client');
var Socket = require('./socket');
var Emitter = require('component-emitter');
var parser = require('socket.io-parser');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:manager');
var indexOf = require('indexof');
var Backoff = require('backo2');

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

},{"./on":184,"./socket":185,"backo2":17,"component-bind":54,"component-emitter":55,"debug":187,"engine.io-client":90,"indexof":123,"socket.io-parser":190}],184:[function(require,module,exports){

/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}

},{}],185:[function(require,module,exports){

/**
 * Module dependencies.
 */

var parser = require('socket.io-parser');
var Emitter = require('component-emitter');
var toArray = require('to-array');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:socket');
var parseqs = require('parseqs');
var hasBin = require('has-binary2');

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.flags = {};
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  this.flags = {};

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({type: parser.CONNECT, query: query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  var sameNamespace = packet.nsp === this.nsp;
  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';

  if (!sameNamespace && !rootNamespaceError) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags.compress = compress;
  return this;
};

/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */

Socket.prototype.binary = function (binary) {
  this.flags.binary = binary;
  return this;
};

},{"./on":184,"component-bind":54,"component-emitter":55,"debug":187,"has-binary2":106,"parseqs":139,"socket.io-parser":190,"to-array":198}],186:[function(require,module,exports){

/**
 * Module dependencies.
 */

var parseuri = require('parseuri');
var debug = require('debug')('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || (typeof location !== 'undefined' && location);
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}

},{"debug":187,"parseuri":140}],187:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))

},{"./debug":188,"_process":148}],188:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"dup":100,"ms":133}],189:[function(require,module,exports){
/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = require('isarray');
var isBuf = require('./is-buffer');
var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');
var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if (typeof data === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (typeof data === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

},{"./is-buffer":191,"isarray":126}],190:[function(require,module,exports){

/**
 * Module dependencies.
 */

var debug = require('debug')('socket.io-parser');
var Emitter = require('component-emitter');
var binary = require('./binary');
var isArray = require('isarray');
var isBuf = require('./is-buffer');

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    var payload = tryStringify(obj.data);
    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch(e){
    return false;
  }
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  }

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';
    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i === str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch(e){
    return false;
  }
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}

},{"./binary":189,"./is-buffer":191,"component-emitter":55,"debug":192,"isarray":126}],191:[function(require,module,exports){
(function (Buffer){

module.exports = isBuf;

var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

var isView = function (obj) {
  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
};

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (withNativeBuffer && Buffer.isBuffer(obj)) ||
          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
}

}).call(this,require("buffer").Buffer)

},{"buffer":52}],192:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))

},{"./debug":193,"_process":148}],193:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"dup":100,"ms":133}],194:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":104,"inherits":124,"readable-stream/duplex.js":157,"readable-stream/passthrough.js":168,"readable-stream/readable.js":169,"readable-stream/transform.js":170,"readable-stream/writable.js":171}],195:[function(require,module,exports){
arguments[4][167][0].apply(exports,arguments)
},{"dup":167,"safe-buffer":196}],196:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":52}],197:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":148,"timers":197}],198:[function(require,module,exports){
module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}

},{}],199:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],200:[function(require,module,exports){
var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{}],201:[function(require,module,exports){
'use strict';

var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

},{}],202:[function(require,module,exports){
'use strict';

const socketio = require('socket.io-client');

function ClientSocket(hostname, agent) {
  const self = this;

  this._nextId = 0;
  this.socket = socketio(hostname, {forceNew: true});

  // mailbox and listeners
  this.listeners = {};
  this.mailbox = {};
  this.socket.on('receive', function (tag, msg) {
    if (self.listeners[tag] != null) {
      self.listeners[tag](msg);
      delete self.listeners[tag];
    } else {
      self.mailbox[tag] = msg;
    }
  });

  // handle error
  this.socket.on('error', function (error) {
    agent.progress('error', null, null, error);
    throw error;
  });
}

ClientSocket.prototype.join = function (role) {
  this.socket.emit('join', role);
};

ClientSocket.prototype.hear = function (tag, _id) {
  if (_id == null) {
    _id = this._nextId++;
  }

  const self = this;
  return new Promise(function (resolve) {
    self.on(tag + _id, resolve);
  });
};

ClientSocket.prototype.on = function (tag, callback) {
  if (this.mailbox[tag] != null) {
    callback(this.mailbox[tag]);
    delete this.mailbox[tag];
  } else {
    this.listeners[tag] = callback;
  }
};

ClientSocket.prototype.send = function (tag, msg, _id) {
  if (_id == null) {
    _id = this._nextId++;
  }

  this.socket.emit('send', tag + _id, msg);
};

ClientSocket.prototype.nextId = function () {
  return this._nextId++;
};

ClientSocket.prototype.disconnect = function () {
  this.socket.disconnect();
};

module.exports = ClientSocket;

},{"socket.io-client":182}],203:[function(require,module,exports){
'use strict';

const sodium = require('libsodium-wrappers-sumo');

const crypto = require('../util/crypto.js');
const labelParser = require('../parse/label.js');

function OT(socket) {
  this.socket = socket;
}

OT.prototype.send = function (tag, m0, m1) {
  const self = this;
  const _id = this.socket.nextId();

  const a = sodium.crypto_core_ristretto255_scalar_random();
  const A = sodium.crypto_scalarmult_ristretto255_base(a);

  this.socket.send('A', Array.from(A), _id);
  this.socket.hear('B', _id).then(function (B) {
    B = Uint8Array.from(B);
    let k0 = sodium.crypto_scalarmult_ristretto255(a, B);
    let k1 = sodium.crypto_scalarmult_ristretto255(a, sodium.crypto_core_ristretto255_sub(B, A));

    k0 = sodium.crypto_generichash(m0.bytes.length, k0);
    k1 = sodium.crypto_generichash(m1.bytes.length, k1);

    const e0 = crypto.encrypt_generic(m0, k0, 0);
    const e1 = crypto.encrypt_generic(m1, k1, 0);

    self.socket.send('e', [e0.serialize(), e1.serialize()], _id);
  });
};

OT.prototype.receive = function (tag, c) {
  const self = this;
  const _id = this.socket.nextId();

  const b = sodium.crypto_core_ristretto255_scalar_random();
  let B = sodium.crypto_scalarmult_ristretto255_base(b);

  return new Promise(function (resolve) {
    self.socket.hear('A', _id).then(function (A) {
      A = Uint8Array.from(A);
      if (c === 1) {
        B = sodium.crypto_core_ristretto255_add(A, B);
      }

      self.socket.send('B', Array.from(B), _id);
      self.socket.hear('e', _id).then(function (e) {
        e = labelParser(e[c]);

        let k = sodium.crypto_scalarmult_ristretto255(b, A);
        k = sodium.crypto_generichash(e.bytes.length, k);

        resolve(crypto.decrypt_generic(e, k, 0));
      });
    });
  });
};

module.exports = OT;

},{"../parse/label.js":211,"../util/crypto.js":213,"libsodium-wrappers-sumo":128}],204:[function(require,module,exports){
'use strict';

const circuitParser = require('./parse/circuit.js');
const labelParser = require('./parse/label.js');

const crypto = require('./util/crypto.js');

const receiveInputLabels = function (agent, circuit) {
  const garblerInputSize = circuit.garblerInputSize;
  const evaluatorInputSize = circuit.evaluatorInputSize;

  // send garbler input labels
  const promises = [];
  for (let i = 0; i < garblerInputSize; i++) {
    promises.push(agent.socket.hear('wire'+i).then(labelParser));
  }

  // Send the evaluator the first half of the input labels directly.
  for (let i = 0; i < evaluatorInputSize; i++) {
    const index = i + garblerInputSize;
    promises.push(agent.OT.receive('wire'+index, agent.input[i]));
  }

  return Promise.all(promises);
};

const evaluateAnd = function (agent, garbledGate, garbledAssignment) {
  const in1 = garbledGate.inputWires[0];
  const in2 = garbledGate.inputWires[1];
  const out = garbledGate.outputWire;

  const label1 = garbledAssignment[in1];
  const label2 = garbledAssignment[in2];

  const point = 2 * label1.getPoint() + label2.getPoint();
  const cipher = garbledGate.truthTable[point];

  garbledAssignment[out] = crypto.decrypt(label1, label2, garbledGate.id, cipher);
};

const evaluateXor = function (agent, garbledGate, garbledAssignment) {
  const in1 = garbledGate.inputWires[0];
  const in2 = garbledGate.inputWires[1];
  const out = garbledGate.outputWire;

  garbledAssignment[out] = garbledAssignment[in1].xor(garbledAssignment[in2]);
};

const evaluateNot = function (agent, garbledGate, garbledAssignment) {
  const in1 = garbledGate.inputWires[0];
  const out = garbledGate.outputWire;

  garbledAssignment[out] = garbledAssignment[in1];
};

const run = function (agent) {
  // receive circuit
  agent.socket.hear('circuit').then(function (circuit) {
    // parse circuit
    circuit = circuitParser(circuit);

    agent.progress('OT');

    // receiver garbled inputs and OT for evaluator inputs
    receiveInputLabels(agent, circuit).then(function (garbledAssignment) {
      // evaluate one gate at a time
      for (let i = 0; i < circuit.gates.length; i++) {
        if (i % 2500 === 0) {
          agent.progress('evaluating', i, circuit.gates.length);
        }

        const garbledGate = circuit.gates[i];

        if (garbledGate.operation === 'AND') {
          evaluateAnd(agent, garbledGate, garbledAssignment);
        } else if (garbledGate.operation === 'XOR') {
          evaluateXor(agent, garbledGate, garbledAssignment);
        } else {
          evaluateNot(agent, garbledGate, garbledAssignment);
        }
      }
      agent.progress('evaluating', circuit.gates.length, circuit.gates.length);

      // send garbled output to garbler
      agent.progress('output');
      const garbledOutput = garbledAssignment.slice(circuit.wiresCount - circuit.outputSize);
      agent.socket.send('output', garbledOutput.map(function (label) {
        return label.serialize();
      }));

      // retrieve de-garbled output
      agent.socket.hear('output').then(function (bits) {
        agent._outputResolve(bits);
      });
    });
  });
};

module.exports = run;
},{"./parse/circuit.js":210,"./parse/label.js":211,"./util/crypto.js":213}],205:[function(require,module,exports){
'use strict';

const sodium = require('libsodium-wrappers-sumo');

const Label = require('./modules/label.js');
const Circuit = require('./modules/circuit.js');
const Gate = require('./modules/gate.js');
const labelParser = require('./parse/label.js');
const crypto = require('./util/crypto.js');

const generateInputLabels = function (R, count, labelSize) {
  const garbledAssignment = [];
  for (let i = 0; i < count; i++) {
    const label = new Label(sodium.randombytes_buf(labelSize));
    garbledAssignment[i] = [label, label.xor(R)];
  }

  return garbledAssignment;
};

const garbleAnd = function (agent, gate, R, garbledAssignment) {
  const in1 = gate.inputWires[0];
  const in2 = gate.inputWires[1];
  const out = gate.outputWire;

  const randomLabel = new Label(sodium.randombytes_buf(agent.labelSize));
  garbledAssignment[out] = [randomLabel, randomLabel.xor(R)];

  let values = [
    crypto.encrypt(garbledAssignment[in1][0], garbledAssignment[in2][0], gate.id, garbledAssignment[out][0]),
    crypto.encrypt(garbledAssignment[in1][0], garbledAssignment[in2][1], gate.id, garbledAssignment[out][0]),
    crypto.encrypt(garbledAssignment[in1][1], garbledAssignment[in2][0], gate.id, garbledAssignment[out][0]),
    crypto.encrypt(garbledAssignment[in1][1], garbledAssignment[in2][1], gate.id, garbledAssignment[out][1])
  ];

  let points = [
    2 * garbledAssignment[in1][0].getPoint() + garbledAssignment[in2][0].getPoint(),
    2 * garbledAssignment[in1][0].getPoint() + garbledAssignment[in2][1].getPoint(),
    2 * garbledAssignment[in1][1].getPoint() + garbledAssignment[in2][0].getPoint(),
    2 * garbledAssignment[in1][1].getPoint() + garbledAssignment[in2][1].getPoint()
  ];

  let truthTable = [];
  truthTable[points[0]] = values[0];
  truthTable[points[1]] = values[1];
  truthTable[points[2]] = values[2];
  truthTable[points[3]] = values[3];

  return new Gate(gate.id, 'AND', gate.inputWires, gate.outputWire, truthTable);
};

const garbleXor = function (agent, gate, R, garbledAssignment) {
  const in1 = gate.inputWires[0];
  const in2 = gate.inputWires[1];
  const out = gate.outputWire;

  garbledAssignment[out] = [
    garbledAssignment[in1][0].xor(garbledAssignment[in2][0]),
    garbledAssignment[in1][1].xor(garbledAssignment[in2][1]).xor(R),
  ];

  return gate;
};

const garbleNot = function (agent, gate, R, garbledAssignment) {
  const in1 = gate.inputWires[0];
  const out = gate.outputWire;

  garbledAssignment[out] = [garbledAssignment[in1][1], garbledAssignment[in1][0]];

  return gate;
};

const sendInputLabels = function (agent, garbledAssignment) {
  const circuit = agent.circuit;
  const garblerInputSize = circuit.garblerInputSize;
  const evaluatorInputSize = circuit.evaluatorInputSize;

  // send garbler input labels
  for (let i = 0; i < garblerInputSize; i++) {
    const label = garbledAssignment[i][agent.input[i]];
    agent.socket.send('wire'+i, label.serialize());
  }

  // Send the evaluator the first half of the input labels directly.
  for (let i = 0; i < evaluatorInputSize; i++) {
    const index = i + garblerInputSize;
    agent.OT.send('wire'+index, garbledAssignment[index][0], garbledAssignment[index][1]);
  }
};

const degarbleOutput = function (agent, garbledAssignment, outputLabels) {
  const bits = [];
  for (let i = 0; i < agent.circuit.outputSize; i++) {
    const bitLabel = outputLabels[i];
    const options = garbledAssignment[agent.circuit.wiresCount - agent.circuit.outputSize + i];
    if (options[0].equals(bitLabel)) {
      bits.push(0);
    } else if (options[1].equals(bitLabel)) {
      bits.push(1);
    } else {
      agent.progress('error', null, null, 'output label unequal to either labels');
      agent.log('Output label ' + i + ' unequal to either labels!');
    }
  }

  return bits;
};

const run = function (agent) {
  const circuit = agent.circuit;
  const garbledCircuit = new Circuit(circuit.wiresCount, circuit.garblerInputSize, circuit.evaluatorInputSize, circuit.outputSize, agent.labelSize);

  // generate random offset
  const R = new Label(sodium.randombytes_buf(agent.labelSize));
  R.setPoint(1);

  // generate labels for input wires
  const garbledAssignment = generateInputLabels(R, circuit.evaluatorInputSize + circuit.garblerInputSize, agent.labelSize);

  // garble gates
  for (let i = 0; i < circuit.gates.length; i++) {
    if (i % 10000 === 0) {
      agent.progress('garbling', i, agent.circuit.gates.length);
    }

    let gate = circuit.gates[i];

    if (gate.operation === 'AND') {
      gate = garbleAnd(agent, gate, R, garbledAssignment);
    } else if (gate.operation === 'XOR') {
      gate = garbleXor(agent, gate, R, garbledAssignment);
    } else {
      gate = garbleNot(agent, gate, R, garbledAssignment);
    }

    garbledCircuit.gates.push(gate);
  }
  agent.progress('garbling', agent.circuit.gates.length, agent.circuit.gates.length);

  // send circuit
  agent.socket.send('circuit', garbledCircuit.serialize());

  // send garbler inputs and OT for evaluator inputs
  agent.progress('OT');
  sendInputLabels(agent, garbledAssignment);

  // get output and de-garble them
  agent.socket.hear('output').then(function (labels) {
    agent.progress('output');

    labels = labels.map(labelParser);
    const bits = degarbleOutput(agent, garbledAssignment, labels);

    // send output
    agent.socket.send('output', bits);

    // resolve promise
    agent._outputResolve(bits);
  });
};

module.exports = run;
},{"./modules/circuit.js":207,"./modules/gate.js":208,"./modules/label.js":209,"./parse/label.js":211,"./util/crypto.js":213,"libsodium-wrappers-sumo":128}],206:[function(require,module,exports){
/**
 * Main client module: garbled circuit protocol agents.
 * This is the module exported by dist/jigg.js for browsers.
 *
 * When included using a script tag, this module exposes the global
 * constructor JIGG, which is an alias for the class {@link Agent}.
 *
 * @module Browser
 */

'use strict';

const LABEL_SIZE = 16; // 16 bytes => 128 bits

const garble = require('./garble.js');
const evaluate = require('./evaluate.js');

const circuitParser = require('./parse/parse.js');

const Socket = require('./comm/clientSocket.js');
const OT = require('./comm/ot.js');

const hexutils = require('./util/hexutils.js');
const sodium = require('libsodium-wrappers-sumo');

/**
 * Create a new JIGG agent with the given role.
 * @param {string} role - Agent role ('Garbler' or 'Evaluator').
 * @param {string} hostname - hostname and port of the server, should be acceptable by socket.io.
 * @param {object} [options] - additional optional options including:
 *
 * &nbsp;&nbsp;&nbsp;&nbsp;debug: boolean, defaults to false.
 *
 * &nbsp;&nbsp;&nbsp;&nbsp;labelSize: number, defaults to 16 bytes.
 *
 * @constructor
 * @alias Agent
 */
function Agent(role, hostname, options) {
  const self = this;

  if (options == null) {
    options = {};
  }

  if (options.__Socket) {
    this.socket = new options.__Socket(hostname, this);
  } else {
    this.socket = new Socket(hostname, this);
  }

  this.role = role;
  this.OT = new OT(this.socket);
  this.hexutils = hexutils;

  this.listeners = [];
  this.log = function () {};

  this._outputPromise = new Promise (function (resolve) {
    self._outputResolve = resolve;
  });
  this._outputPromise.then(this.socket.disconnect.bind(this.socket));

  this.throttle = options.throttle == null ? 0 : options.throttle;
  this.parallel = options.parallel == null ? Number.MAX_VALUE : options.parallel;
  this.labelSize = options.labelSize == null ? LABEL_SIZE : options.labelSize;

  if (options.debug) {
    this.log = console.log.bind(console, this.role);
    this.addProgressListener(this.log);
  }
}

/**
 * Loads the given circuit.
 * @param {string|Circuit} circuit - the circuit encoded as specified in encoding.
 * @param {string} [encoding='text'] - the encoding of the circuit, defaults to 'text' indicating a text encoding of a bristol fashion circuit.
 *                                     Alternatively, 'object' can be used for parsed circuits provided as a Circuit object.
 */
Agent.prototype.loadCircuit = function (circuit, encoding) {
  if (encoding == null || encoding === 'text') {
    this.circuit = circuitParser(circuit);
  } else {
    this.circuit = circuit;
  }
};

/**
 * Sets the input of this party.
 * @param {number[]|number|string} input - the input to the circuit.
 * @param [encoding='bits'] - the encoding of the input, defaults to 'bits' for array of 0|1. The order of bits depends on the
 *                            underlying circuit, but typically, index 0 represents the least significant bit.
 *                            Alternatively, it accepts 'number' and 'hex' for a number and a hex string.
 */
Agent.prototype.setInput = function (input, encoding) {
  const size = (this.role === 'Garbler' ? this.circuit.garblerInputSize : this.circuit.evaluatorInputSize);

  if (encoding === 'number') {
    this.input = input.toString(2).split('').map(function (bit) {
      return parseInt(bit);
    }).reverse();

    while (this.input.length < size) {
      this.input.push(0);
    }
  }

  if (encoding === 'hex') {
    this.input = hexutils.hex2bin(input).split('').map(function (bit) {
      return parseInt(bit);
    }).reverse();

    while (this.input.length < size) {
      this.input.push(0);
    }
  }

  if (encoding === 'bits' || encoding == null) {
    if (input.length !== size) {
      throw new Error('Input has wrong length');
    }

    this.input = input.slice();
  }
};

/**
 * Returns a promise to the output encoded as specified by the encoding.
 * @param [encoding='bits'] - the encoding of the input, defaults to 'bits' for array of 0|1. The order of bits depends on the
 *                            underlying circuit, but typically, index 0 represents the least significant bit.
 *                            Alternatively, it accepts 'number' and 'hex' for a number and a hex string.
 * @return {Promise} a promise to the output, which is either number, number[], or string.
 */
Agent.prototype.getOutput = function (encoding) {
  return this._outputPromise.then(function (output) {
    output = output.slice();
    if (encoding == null || encoding === 'bits') {
      return output;
    }

    if (encoding === 'hex') {
      return hexutils.bin2hex(output.reverse().join(''));
    }

    if (encoding === 'number') {
      return parseInt(output.reverse().join(''), 2);
    }
  });
};

/**
 * Adds a listener for progress events.
 * @param {module:JIGG~progressListener} progressListener - the listener.
 */
Agent.prototype.addProgressListener = function (progressListener) {
  this.listeners.push(progressListener);
};

Agent.prototype.progress = function (state, current, total, error) {
  for (let i = 0; i < this.listeners.length; i++) {
    this.listeners[i](state, current, total, error);
  }
};

/**
 * Run the agent on the circuit.
 */
Agent.prototype.start = function () {
  const self = this;

  sodium.ready.then(function () {
    self.socket.join(self.role);
    self.socket.hear('go').then(function () {
      self.progress('connected');
      if (self.role === 'Garbler') {
        garble(self);
      } else {
        evaluate(self);
      }
    });
  });
};

/**
 * Disconnects the socket with the server.
 */
Agent.prototype.disconnect = function () {
  this.socket.disconnect();
};

module.exports = Agent;
},{"./comm/clientSocket.js":202,"./comm/ot.js":203,"./evaluate.js":204,"./garble.js":205,"./parse/parse.js":212,"./util/hexutils.js":214,"libsodium-wrappers-sumo":128}],207:[function(require,module,exports){
// Describes both garbled and plain circuits

'use strict';

function Circuit(wiresCount, garblerInputSize, evaluatorInputSize, outputSize, labelSize) {
  this.wiresCount = wiresCount;
  this.garblerInputSize = garblerInputSize;
  this.evaluatorInputSize = evaluatorInputSize;
  this.outputSize = outputSize;
  this.labelSize = labelSize;

  this.gates = [];
}

Circuit.prototype.serialize = function () {
  const meta = JSON.stringify([
    this.wiresCount,
    this.garblerInputSize,
    this.evaluatorInputSize,
    this.outputSize,
    this.labelSize,
    this.gates.length
  ]);

  const gates = this.gates.map(function (gate) {
    return gate.serialize();
  });
  gates.unshift(meta);

  return gates.join('');
};

module.exports = Circuit;
},{}],208:[function(require,module,exports){
// Describes both garbled and plain gates

'use strict';

function Gate(id, operation, inputWires, outputWire, truthTable) {
  this.id = id;
  this.operation = operation;
  this.inputWires = inputWires;
  this.outputWire = outputWire;
  this.truthTable = truthTable;

  // INV is an alias for NOT
  if (this.operation === 'INV') {
    this.operation = 'NOT';
  }
}

Gate.prototype.serialize = function () {
  let gateStr = [];

  if (this.operation === 'AND') {
    gateStr.push('&');
  } else if (this.operation === 'XOR') {
    gateStr.push('^');
  } else if (this.operation === 'NOT') {
    gateStr.push('!');
  }

  gateStr.push(this.id);
  gateStr.push(JSON.stringify(this.inputWires));
  gateStr.push(this.outputWire);

  if (this.operation === 'AND') {
    gateStr.push('-');
    for (let i = 0; i < this.truthTable.length; i++) {
      gateStr.push(this.truthTable[i].serialize());
    }
  }

  return gateStr.join('');
};

module.exports = Gate;
},{}],209:[function(require,module,exports){
// Wrapper around Uint8Arrays

'use strict';

function Label(bytes) {
  this.bytes = bytes;
}

Label.prototype.xor = function (label2) {
  return this.xorBytes(label2.bytes);
};

Label.prototype.xorBytes = function (bytes2) {
  const bytes = this.bytes.slice();

  for (let i = 0; i < bytes.length; i++) {
    bytes[i] = bytes[i] ^ bytes2[i];
  }

  return new Label(bytes);
};

Label.prototype.getPoint = function () {
  return this.bytes[0] & 0x01;
};

Label.prototype.setPoint = function (point) {
  if (point === 0) {
    this.bytes[0] = this.bytes[0] & 0xFE;
  } else {
    this.bytes[0] = this.bytes[0] | 0x01;
  }
};

Label.prototype.equals = function (label2) {
  if (this.bytes.length !== label2.bytes.length) {
    return false;
  }

  for (let i = 0; i < this.bytes.length; i++) {
    if (this.bytes[i] !== label2.bytes[i]) {
      return false;
    }
  }

  return true;
};

Label.prototype.isZero = function () {
  for (let i = 0; i < this.bytes.length; i++) {
    if (this.bytes[i] !== 0) {
      return false;
    }
  }

  return true;
};

Label.prototype.serialize = function () {
  const arr = [];
  for (let i = 0; i < this.bytes.length; i++) {
    arr[i] = String.fromCharCode(this.bytes[i]);
  }

  return arr.join('');
};

module.exports = Label;
},{}],210:[function(require,module,exports){
'use strict';

const Circuit = require('../modules/circuit.js');
const Gate = require('../modules/gate.js');
const Label = require('../modules/label.js');

const circuitParser = function (text) {
  const metaEnd = text.indexOf(']');
  const meta = JSON.parse(text.substring(0, metaEnd + 1));

  const circuit = new Circuit(meta[0], meta[1], meta[2], meta[3], meta[4]);
  let gatesCount = meta[5];

  let i = metaEnd + 1;
  // parse one gate at a time
  while (i < text.length) {
    let operation, inputWires, outputWire, gateId, truthTable;

    // parse operation
    operation = text.charAt(i);
    if (operation === '&') {
      operation = 'AND';
    } else if (operation === '^') {
      operation = 'XOR';
    } else if (operation === '!') {
      operation = 'NOT';
    }

    // parse gate Id
    i++;
    gateId = '';
    while (text.charAt(i) !== '[') {
      gateId += text.charAt(i);
      i++;
    }
    gateId = parseInt(gateId);

    // parse input wires
    inputWires = '';
    while (text.charAt(i) !== ']') {
      inputWires += text.charAt(i);
      i++;
    }
    inputWires = JSON.parse(inputWires + ']');

    // parse output wires
    i++;
    outputWire = '';
    while (text.charAt(i) !== '-' && text.charAt(i) !== '&' &&
           text.charAt(i) !== '^' && text.charAt(i) !== '!' && i < text.length) {
      outputWire += text.charAt(i);
      i++;
    }
    outputWire = parseInt(outputWire);

    // parse truth table if exists
    if (operation === 'AND') {
      i++;
      truthTable = [];
      // parse one label at a time
      for (let k = 0; k < 4; k++) {
        truthTable[k] = new Uint8Array(circuit.labelSize);
        for (let l = 0; l < circuit.labelSize; l++) {
          truthTable[k][l] = text.charCodeAt(i);
          i++;
        }
        truthTable[k] = new Label(truthTable[k]);
      }
    }

    // build gate and put it in circuit
    circuit.gates.push(new Gate(gateId, operation, inputWires, outputWire, truthTable));
    gatesCount--;
  }

  if (gatesCount !== 0) {
    console.log('problem parsing circuit!');
    throw new Error('problem parsing circuit!');
  }

  return circuit;
};

module.exports = circuitParser;
},{"../modules/circuit.js":207,"../modules/gate.js":208,"../modules/label.js":209}],211:[function(require,module,exports){
'use strict';

const Label = require('../modules/label.js');

const labelParser = function (labelStr) {
  const bytes = new Uint8Array(labelStr.length);
  for (let i = 0; i < labelStr.length; i++) {
    bytes[i] = labelStr.charCodeAt(i);
  }

  return new Label(bytes);
};

module.exports = labelParser;
},{"../modules/label.js":209}],212:[function(require,module,exports){
// Parses bristol fashion text circuits into Circuit objects

'use strict';

/*
 * Bristol fashion has the following format:
 * <GATE COUNT> <WIRE_COUNT>
 * <INPUT COUNT> <FIRST INPUT BIT SIZE> <SECOND INPUT BIT SIZE> ...
 * <OUTPUT COUNT> <FIRST OUTPUT SIZE> <SECOND OUTPUT SIZE> ...
 * <GATE INPUT COUNT> <GATE OUTPUT COUNT> <INPUT WIRE INDEX> ... <OUTPUT WIRE INDEX> ... <GATE OPERATION>
 * ...
 */

const Circuit = require('../modules/circuit.js');
const Gate = require('../modules/gate.js');

const RECOGNIZED_OPERATIONS = ['AND', 'XOR', 'INV', 'NOT'];

module.exports = function (text) {
  const rows = text.split('\n').filter(function (line) {
    const tmp = line.trim();
    return !(tmp.startsWith('#') || tmp.length === 0);
  }).map(function (line) {
    if (line.indexOf('#') > -1) {
      line = line.substring(0, line.indexOf('#')).trim();
    }

    return line.split(' ').map(function (token) {
      return token.trim();
    });
  });

  // Begin parsing input/output meta data
  const wireCount = parseInt(rows[0][1]);
  const inputs = rows[1].slice(1);
  const outputs = rows[2].slice(1);

  // Sanity Checks
  if (rows[2][0] !== '1' || outputs.length !== 1) {
    throw new Error('Circuit has multiple outputs! Unsupported');
  }
  if (rows[1][0] !== '2' || inputs.length !== 2) {
    throw new Error('Circuit does not have exactly 2 inputs! Unsupported');
  }
  if (rows.length !== parseInt(rows[0][0]) + 3) {
    throw new Error('Circuit has inconsistent number of lines compared to gates count');
  }

  // Create empty circuit object
  const circuit = new Circuit(wireCount, parseInt(inputs[0]), parseInt(inputs[1]), parseInt(outputs[0]));

  // Parse the individual gates
  for (let r = 3; r < rows.length; r++) {
    const tokens = rows[r];

    const inputCount = parseInt(tokens[0]);
    const outputCount = parseInt(tokens[1]);
    const operation = tokens[tokens.length-1];

    if (RECOGNIZED_OPERATIONS.indexOf(operation) === -1) {
      throw new Error('Unrecognized gate: ' + operation)
    }
    if (outputCount !== 1) {
      throw new Error('Gate ' + r + ' does not have exactly 1 output!');
    }

    const output = parseInt(tokens[2 + inputCount]);
    const inputs = tokens.slice(2, 2 + inputCount).map(function (e) {
      return parseInt(e);
    });
    const gate = new Gate(r - 3, operation, inputs, output);

    if ((operation === 'INV' || operation === 'NOT') && (inputs.length !== 1)) {
      throw new Error(operation + ' Gate ' + r + ' does not have exactly 1 input!');
    }
    if ((operation === 'AND' || operation === 'XOR') && (inputs.length !== 2)) {
      throw new Error('Gate ' + r + ' does not have exactly 2 inputs!');
    }

    circuit.gates.push(gate);
  }

  return circuit;
};

},{"../modules/circuit.js":207,"../modules/gate.js":208}],213:[function(require,module,exports){
'use strict';

const sodium = require('libsodium-wrappers-sumo');
const bytes = 16;

function encrypt(a, b, t, m) {
  const k = a.xor(b);
  return m.xor(k).xorBytes(randomOracle(k.bytes, t));
}

function longToByteArray(long) {
  // we want to represent the input as a 24-bytes array
  let byteArray = new Uint8Array(sodium.crypto_secretbox_NONCEBYTES);

  for (let index = 0; index < byteArray.length; index++) {
    let byte = long & 0xff;
    byteArray [ index ] = byte;
    long = (long - byte) / 256 ;
  }

  return byteArray;
}

function randomOracle(m, t) {
  return sodium.crypto_secretbox_easy(
    m,
    longToByteArray(t),  // Nonce 24 bytes because this sodium uses 192 bit blocks.
    sodium.from_hex('da5698be17b9b46962335799779fbeca8ce5d491c0d26243bafef9ea1837a9d8')  // SHA(0).
  ).subarray(0, bytes+1);  // Prune back to the correct number of bytes.
}

function encrypt_generic(plaintext, key, nonce) {
  return plaintext.xorBytes(key).xorBytes(randomOracle(key, nonce));
}

module.exports = {
  encrypt: encrypt, // label encryption
  decrypt: encrypt,
  encrypt_generic: encrypt_generic, // OT
  decrypt_generic: encrypt_generic
};

},{"libsodium-wrappers-sumo":128}],214:[function(require,module,exports){
'use strict';

const table16 = {
  0: '0000', 1: '0001', 2: '0010', 3: '0011',
  4: '0100', 5: '0101', 6: '0110', 7: '0111',
  8: '1000', 9: '1001', A: '1010', B: '1011',
  C: '1100', D: '1101', E: '1110', F: '1111'
};
function hex2bin(hex) {
  let bin = '';
  for (let i = 0; i < hex.length; i++) {
    bin += table16[hex[i].toUpperCase()];
  }
  return bin;
}

const table2 = {
  '0000': '0', '0001': '1', '0010': '2', '0011': '3',
  '0100': '4', '0101': '5', '0110': '6', '0111': '7',
  '1000': '8', '1001': '9', '1010': 'A', '1011': 'B',
  '1100': 'C', '1101': 'D', '1110': 'E', '1111': 'F'
};
function bin2hex(bin) {
  let hex = '';
  bin = (new Array((4-(bin.length%4))%4)).fill('0').join('') + bin;
  for (let i = 0; i < bin.length; i+=4) {
    hex += table2[bin.substr(i, 4)];
  }
  return hex;
}

module.exports = {
  bin2hex: bin2hex,
  hex2bin: hex2bin
};

},{}]},{},[206])(206)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
